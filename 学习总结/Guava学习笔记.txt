参考：http://outofmemory.cn/java/guava/base/Strings

-------------------------------------------------- Guava对字符串的操作 ------------------------------------------------------------
public class GuavaOpertionString {
	
	@Test
    public void test01() {
		//判断字符串是否为空
		//Strings.isNullOrEmpty(input)
        String input = "hello";
        boolean isNullOrEmpty = Strings.isNullOrEmpty(input);
        System.out.println("input " + (isNullOrEmpty?"is":"is not") + " null or empty.");
        
        //获得两个字符串相同的前缀或者后缀
        //Strings.commonPrefix(a,b)
        String a = "com.jd.coo.Hello";
        String b = "com.jd.coo.Hi";
        String ourCommonPrefix = Strings.commonPrefix(a,b);
        System.out.println("a,b common prefix is " + ourCommonPrefix);

        //Strings.commonSuffix(a,b)
        String c = "com.google.Hello";
        String d = "com.jd.Hello";
        String ourSuffix = Strings.commonSuffix(c,d);
        System.out.println("c,d common suffix is " + ourSuffix);
        
        //Strings的padStart和padEnd方法来补全字符串
        int minLength = 4;
        String padEndResult = Strings.padEnd("123", minLength, '0');
        System.out.println("padEndResult is " + padEndResult);

        String padStartResult = Strings.padStart("1", 3, '0');
        System.out.println("padStartResult is " + padStartResult);
	}

	@Test
    public void test02() {
		  //使用Splitter类来拆分字符串，正则说明[] 字符集合，只匹配其中任何一个字符，字符串{n,}，表示前面的字符至少匹配n次
		  Iterable<String> splitResults = Splitter.onPattern("[,，]{1,}")
	                .trimResults()   //对结果进行trim
	                .omitEmptyStrings()   //去除空串
	                .split("hello,word,,世界，水平");

	        for (String item : splitResults) {
	            System.out.println(item);
	        }
	        
	        String toSplitString = "a=b;c=d,e=f";
	        Map<String,String> kvs = Splitter.onPattern("[,;]{1,}")
	        		.withKeyValueSeparator('=')  //二次拆分
	        		.split(toSplitString); 
	        for (Map.Entry<String,String> entry : kvs.entrySet()) {
	            System.out.println(String.format("%s=%s", entry.getKey(),entry.getValue()));
	        }
	        
	        //合并字符串，Joiner.on(" ")
	        String joinResult = Joiner.on(" ").join(new String[]{"hello","world"});
	        System.out.println(joinResult);
	        
	        String mapJoinResult = Joiner.on(",")
	        		.withKeyValueSeparator("=") 
	        		.join(kvs);
	        System.out.println(mapJoinResult);
	        
	        //大小写转换，对字符串做模式匹配，了解
	        System.out.println(CaseFormat.LOWER_HYPHEN.to(CaseFormat.LOWER_CAMEL, "test-data"));//testData
	        System.out.println(CaseFormat.LOWER_UNDERSCORE.to(CaseFormat.LOWER_CAMEL, "test_data"));//testData
	        System.out.println(CaseFormat.UPPER_UNDERSCORE.to(CaseFormat.UPPER_CAMEL, "test_data"));//TestData
	        
	        System.out.println(CaseFormat.LOWER_CAMEL.to(CaseFormat.LOWER_UNDERSCORE, "testdata"));//testdata
	        System.out.println(CaseFormat.LOWER_CAMEL.to(CaseFormat.LOWER_UNDERSCORE, "TestData"));//test_data
	        System.out.println(CaseFormat.LOWER_CAMEL.to(CaseFormat.LOWER_HYPHEN, "testData"));//test-data
	}
	
}

-------------------------------------------------- Guava对对象的操作 ------------------------------------------------------------

public class GuavaOpertionObject {
	
	@Test
    public void test01() {
		  //判断对象是否相等，是否为空
		  Object a = null;
	      Object b = new Object();
	      boolean aEqualsB = Objects.equal(a, b);
	      System.out.println(aEqualsB);
	}
	
	public static void main(String [] args) {
	      Student jim = new Student();
	        jim.setId(1);
	        jim.setName("Jim");
	        jim.setAge(13);
	        System.out.println(jim.toString());//Student{id=1, name=Jim, age=13}
	    }
	
	public static class Student {
        private int id;
        private String name;
        private int age;

        public int getId() {
            return id;
        }
        public void setId(int id) {
            this.id = id;
        }

        public String getName() {
            return name;
        }
        public void setName(String name) {
            this.name = name;
        }

        public int getAge() {
            return age;
        }
        public void setAge(int age) {
            this.age = age;
        }

        public String toString() {
            return Objects.toStringHelper(this.getClass())
                    .add("id", id)
                    .add("name", name)
                    .add("age", age)
                    .omitNullValues().toString();
        }
    }
}

-------------------------------------------------- Guava对参数校验的操作 ------------------------------------------------------------

public class GuavaOpertionPreconditions {
	
	@Test
    public void test01() {
		GuavaOpertionPreconditions demo = new GuavaOpertionPreconditions();
        demo.doSomething("Jim", 19, "hello world, hello java"); 
	}
	 
	public void doSomething(String name, int age, String desc) {
	        String str = Preconditions.checkNotNull(name, "name may not be null");
	        Preconditions.checkArgument(age >= 18 && age < 99, "age must in range (18,99)");
	        Preconditions.checkArgument(desc !=null && desc.length() < 100, "desc too long, max length is ", 100);
	        //do things
	        System.out.println(str);
	}
	
}

-------------------------------------------------- Guava提供Optional来避免空指针异常 ------------------------------------------------------------

public class GuavaOpertionOptional {
	
	@Test
    public void test01() {
		  Optional<Student> possibleNull = Optional.of(new Student());
	      possibleNull.get();
	      
//	      Optional<Student> possibleNull1 = Optional.absent();
//	      Student jim = possibleNull1.get();
	}
	public static class Student { }
}

-------------------------------------------------- Guava对不可变集合的操作 ------------------------------------------------------------

public class GuavaOpertionImmutable {
	
	@Test
    public void test01() {
		//方式一：使用builder创建不可变集合 
		Set<String> immutableNamedColors = ImmutableSet.<String>builder()
	                .add("red", "green","black","white","grey")
	                .build();
	        //immutableNamedColors.add("abc"); //build后不可添加元素
	        for (String color : immutableNamedColors) {
	            System.out.println(color);
	        }
	        
	   //方式二：使用ImmutableSet.of()静态方法创建
	   ImmutableSet<String> immutableNamedColors1 = ImmutableSet.of("red","green","black","white","grey");  
	   for (String color : immutableNamedColors1) {
           System.out.println(color);
       }
	   
	 //方式三：使用ImmutableSet.copyOf()静态方法创建
	   ImmutableSet<String> immutableNamedColors2 = ImmutableSet.copyOf(new String[]{"red","green","black","white","grey"});
	   for (String color : immutableNamedColors2) {
           System.out.println(color);
       }
	}
	
}

-------------------------------------------------- Guava对集合元素进行计数的操作 ------------------------------------------------------------

public class GuavaOpertionMultiset {
	
	@Test
    public void test01() {
		/*常用实现 Multiset接口的类有：
		 *HashMultiset: 元素存放于 HashMap
		 *LinkedHashMultiset: 元素存放于 LinkedHashMap，即元素的排列顺序由第一次放入的顺序决定
		 *TreeMultiset:元素被排序存放于TreeMap
		 *EnumMultiset: 元素必须是 enum类型
		 *ImmutableMultiset: 不可修改的 Mutiset
		 */
		Multiset<String> multiset = HashMultiset.create();
        String sentences = "this is a story, there is a good girl in the story.";
        Iterable<String> words = Splitter.onPattern("[^a-z]{1,}")  //[^a-z]	反向范围字符。匹配不在指定的范围内的任何字符。
        		.omitEmptyStrings()
        		.trimResults()
        		.split(sentences);
        for (String word : words) {
//            System.out.println(word);
        	multiset.add(word);
        }

        for (Object element : multiset.elementSet()) {
            System.out.println((String)element + ":" + multiset.count(element));
        }
	}
	
}

-------------------------------------------------- Guava对双向Map（既提供键到值的映射，也提供值到键的映射）的操作 ------------------------------------------------------------

public class GuavaOpertionBiMap {
	
	@Test
    public void test01() {
		/*BiMap的常用实现有：
		 *HashBiMap: key 集合与 value 集合都有 HashMap 实现
		 *EnumBiMap: key 与 value 都必须是 enum 类型
		 *ImmutableBiMap: 不可修改的 BiMap
		*/
		BiMap<String,String> weekNameMap = HashBiMap.create();
        weekNameMap.put("星期一","Monday");
        weekNameMap.put("星期二","Tuesday");
        weekNameMap.put("星期三","Wednesday");
        weekNameMap.put("星期四","Thursday");
        weekNameMap.put("星期五","Friday");
        weekNameMap.put("星期六","Saturday");
        weekNameMap.put("星期日","Sunday");

        System.out.println("星期日的英文名是" + weekNameMap.get("星期日"));
        System.out.println("Sunday的中文是" + weekNameMap.inverse().get("Sunday"));
	}
	
}

-------------------------------------------------- Guava对Multimaps（类似于Map<K, Collection<V>>结构，一键多值的Map）的操作 ------------------------------------------------------------

public class GuavaOpertionMultimaps {
	
	@Test
    public void test01() {
		/*Multimap提供了丰富的实现，所以你可以用它来替代程序里的Map<K, Collection<V>>，具体的实现如下：
		 *	      实现                                                      Key实现	     Value实现
		 *ArrayListMultimap	        HashMap      ArrayList
		 *HashMultimap	            HashMap	     HashSet
		 *LinkedListMultimap	LinkedHashMap	LinkedList
		 *LinkedHashMultimap	LinkedHashMap	LinkedHashSet
		 *TreeMultimap	             TreeMap	TreeSet
		 *ImmutableListMultimap	ImmutableMap	ImmutableList
		 *ImmutableSetMultimap	ImmutableMap	ImmutableSet
		*/
		 Multimap<String, String> myMultimap = ArrayListMultimap.create();  
		    
		  // 添加键值对
		  myMultimap.put("Fruits", "Bannana"); 
		 //给Fruits元素添加另一个元素 
		  myMultimap.put("Fruits", "Apple");  
		  myMultimap.put("Fruits", "Pear");  
		  myMultimap.put("Vegetables", "Carrot");  
		    
		  // 获得multimap的size
		  int size = myMultimap.size();  
		  System.out.println(size);  // 4  
		    
		  // 获得Fruits对应的所有的值
		  Collection<String> fruits = myMultimap.get("Fruits");  
		  System.out.println(fruits); // [Bannana, Apple, Pear]  
		    
		  Collection<String> vegetables = myMultimap.get("Vegetables");  
		  System.out.println(vegetables); // [Carrot]  
		    
		  //遍历Mutlimap  
		  for(String value : myMultimap.values()) {  
		   System.out.println(value);  
		  }  
		    
		  // Removing a single value  移除单个值
		  myMultimap.remove("Fruits","Pear");  
		  System.out.println(myMultimap.get("Fruits")); // [Bannana, Pear]  
		    
		  // Remove all values for a key  
		  myMultimap.removeAll("Fruits");  
		  System.out.println(myMultimap.get("Fruits")); // [] (Empty Collection!)  
		
	}
	
}

-------------------------------------------------- Guava对Table（结构：二维矩阵表结构）的操作 ------------------------------------------------------------

public class GuavaOpertionTable {
	
	@Test
    public void test01() {
		 Table<Integer, Integer, String> table = HashBasedTable.create();
	        for (int row = 0; row < 10; row++) {
	            for (int column = 0; column < 5; column++) {
	                table.put(row, column, "value of cell (" + row + "," + column + ")");
	            }
	        }
	        for (int row=0;row<table.rowMap().size();row++) {
	            Map<Integer,String> rowData = table.row(row);
	            for (int column =0;column < rowData.size(); column ++) {
	                System.out.println("cell(" + row + "," + column + ") value is:" + rowData.get(column));
	            }
	        }
	}
	
}

-------------------------------------------------- Guava对迭代器的操作 ------------------------------------------------------------
public class GuavaOpertionIterator {
	
	@Test
    public void test01() {
		 List<String> list = Lists.newArrayList("Apple","Pear","Peach","Banana");
	        Predicate<String> condition = new Predicate<String>() {
	            @Override
	            public boolean apply(String input) {
	                return ((String)input).startsWith("P");
	            }
	        };
	        //元素是否都满足某个条件，Iterators.all()方法
	        boolean allIsStartsWithP = Iterators.all(list.iterator(),condition);
	        System.out.println("all result == " + allIsStartsWithP);
	        
	        //获取指定元素
	        String secondElement = Iterators.get(list.iterator(), 1);
	        System.out.println(secondElement);
	        
	        //filter方法过滤符合条件的项
	        Iterator<String> startPElements = Iterators.filter(list.iterator(), new Predicate<String>() {
	            @Override
	            public boolean apply(String input) {
	                return input.startsWith("P");
	            }
	        });
	        
	        while (startPElements.hasNext()) {
				System.out.println(startPElements.next());
			}
	        
	        //Iterators.find()查询符合条件的元素
	        String length5Element = Iterators.find(list.iterator(), new Predicate<String>() {
	            @Override
	            public boolean apply(String input) {
	                return input.length() == 5;
	            }
	        });
	        System.out.println(length5Element);
	        
	        //Iterators.transform()对迭代器元素做转换
	        Iterator<Integer> countIterator = Iterators.transform(list.iterator(), new Function<String, Integer>() {
	            @Override
	            public Integer apply(String input) {
	                return input.length();
	            }
	        });
	        
	        System.out.println("----------------------以下展示长度信息----------------------------");
	        while (countIterator.hasNext()) {
				System.out.println(countIterator.next());
			}
	}
	
}

-------------------------------------------------- Guava对缓存的处理的操作 ------------------------------------------------------------

public class GuavaOpertionCache {
	
	@Test
    public void test01() throws ExecutionException, InterruptedException {
		//缓存包括并发问题，缓存失效机制，内存不够用时缓存释放，缓存的命中率，缓存的移除等等
		//缓存接口这里是LoadingCache，LoadingCache在缓存项不存在时可以自动加载缓存
        LoadingCache<Integer,Student> studentCache
                //CacheBuilder的构造函数是私有的，只能通过其静态方法newBuilder()来获得CacheBuilder的实例
                = CacheBuilder.newBuilder()
                //设置并发级别为8，并发级别是指可以同时写缓存的线程数
                .concurrencyLevel(8)
                //设置写缓存后8秒钟过期
                .expireAfterWrite(8, TimeUnit.SECONDS)
                //设置缓存容器的初始容量为10
                .initialCapacity(10)
                //设置缓存最大容量为100，超过100之后就会按照LRU最近虽少使用算法来移除缓存项
                .maximumSize(100)
                //设置要统计缓存的命中率
                .recordStats()
                //设置缓存的移除通知
                .removalListener(new RemovalListener<Object, Object>() {
                    @Override
                    public void onRemoval(RemovalNotification<Object, Object> notification) {
                        System.out.println(notification.getKey() + " 已经被移除, 移除的原因是 " + notification.getCause());
                    }
                })
                //build方法中可以指定CacheLoader，在缓存不存在时通过CacheLoader的实现自动加载缓存
                .build(
                        new CacheLoader<Integer, Student>() {
                            @Override
                            public Student load(Integer key) throws Exception {
                                System.out.println("加载学生的主键Id " + key);
                                Student student = new Student();
                                student.setId(key);
                                student.setName("姓名 " + key);
                                return student;
                            }
                        }
                );

        for (int i=0;i<20;i++) {
            //从缓存中得到数据，由于我们没有设置过缓存，所以需要通过CacheLoader加载缓存数据
            Student student = studentCache.get(1);
            System.out.println(student);
            //休眠1秒，每秒执行一次
            TimeUnit.SECONDS.sleep(1);
        }

        System.out.println("缓存的状态:");
        //最后打印缓存的命中率等 情况
        System.out.println(studentCache.stats().toString());
        
        //缓存的方法：
//        ImmutableMap<K, V> getAllPresent(Iterable<?> keys) 一次获得多个键的缓存值
//        put和putAll方法向缓存中添加一个或者多个缓存项
//        invalidate 和 invalidateAll方法从缓存中移除缓存项
//        asMap()方法获得缓存数据的ConcurrentMap<K, V>快照
//        cleanUp()清空缓存
//        refresh(Key) 刷新缓存，即重新取缓存数据，更新缓存
	}
	//学生类
	class Student{
		private Integer id;
		private String name;
		public Integer getId() {
			return id;
		}
		public void setId(Integer id) {
			this.id = id;
		}
		public String getName() {
			return name;
		}
		public void setName(String name) {
			this.name = name;
		}
		
		@Override
		public String toString() {
			return "Student [id=" + id + ", name=" + name + "]";
		}
		
	}
	
}

-------------------------------------------------- Guava对IO流文件的操作 ------------------------------------------------------------

public class GuavaOpertionIO {
	
    /**
     * 向文件中写入字节流
     * @param fileName
     * @param contents
     */
    public static void doFileWrite(final String fileName, final String contents) {
		  //参数校验
    	  checkNotNull(fileName, "Provided file name for writing must NOT be null.");
	      checkNotNull(contents, "Unable to write null contents.");
	      final File newFile = new File(fileName);
	      try
	      {
	         Files.write(contents.getBytes(), newFile);
	      }
	      catch (IOException fileIoEx)
	      {
	         err.println(  "ERROR trying to write to file '" + fileName + "' - "
	                     + fileIoEx.toString());
	      }
	}
    
    /**
     * 获得文件内容
     * @param filePath
     * @throws IOException
     */
    public static void doReadFile(final String filePath) throws IOException {
	    
	    File testFile = new File(filePath);
	    List<String> lines = Files.readLines(testFile, Charsets.UTF_8);
	    for (String line : lines) {
	        System.out.println(line);
	    }
    }
    
    /**
     * 行号计数，针对大文件
     */
    public static class CounterLine implements LineProcessor<Integer> {
        private int rowNum = 0;
       @Override
        public boolean processLine(String line) throws IOException {
            rowNum ++;
            return true;
        }

        @Override
        public Integer getResult() {
            return rowNum;
        }
    }
    
    /**
     * 文件复制
     * @param sourceFileName
     * @param targetFileName
     */
    public static void fileCopy(final String sourceFileName, final String targetFileName){
    	      //参数校验
    	      checkNotNull(sourceFileName, "Copy source file name must NOT be null.");
    	      checkNotNull(targetFileName, "Copy target file name must NOT be null.");
    	      final File sourceFile = new File(sourceFileName);
    	      final File targetFile = new File(targetFileName);
    	      try
    	      {
    	         Files.copy(sourceFile, targetFile);
    	      }
    	      catch (IOException fileIoEx)
    	      {
    	         err.println(
    	              "ERROR trying to copy file '" + sourceFileName
    	            + "' to file '" + targetFileName + "' - " + fileIoEx.toString());
    	      }
    }
    
    /**
     * 比较2文件是否相同
     * @param fileName1
     * @param fileName2
     */
    public static void equal(final String fileName1, final String fileName2){
       //参数校验
       checkNotNull(fileName1, "First file name for comparison must NOT be null.");
       checkNotNull(fileName2, "Second file name for comparison must NOT be null.");
       final File file1 = new File(fileName1);
       final File file2 = new File(fileName2);
       try
       {
          out.println(
              "File '" + fileName1 + "' "
            + (Files.equal(file1, file2) ? "IS" : "is NOT")
            + " the same as file '" + fileName2 + "'.");
       }
       catch (IOException fileIoEx)
       {
          err.println(
               "ERROR trying to compare two files '"
             + fileName1 + "' and '" + fileName2 + "' - " + fileIoEx.toString());
       }
    }
    
    public static void main(String[] args) {
    	String fileName = "F:/test.txt";String contents = "这是测试内容";
    	doFileWrite(fileName,contents);
    	
    	String filePath = "F:/test.txt";
    	try {
			doReadFile(filePath);
		} catch (IOException e) {
			 err.println(  "读取文件内容出错");
		}
    	
    	String testFilePath = "F:\\bigtest.txt";
        File testFile = new File(testFilePath);
        CounterLine counter = new CounterLine();
        String firstContext =null;
        String allContext =null;
        try {
			Files.readLines(testFile, Charsets.UTF_8, counter);
			firstContext = Files.readFirstLine(testFile, Charsets.UTF_8);//
			allContext = Files.toString(testFile,Charsets.UTF_8);
		} catch (IOException e) {
			 err.println(  "读取文件内容出错");
		}
        System.out.println(counter.getResult());//计数
        //另外还有readBytes方法可以对文件的字节做处理，readFirstLine可以返回第一行的文本，Files.toString(File,Charset)可以返回文件的所有文本内容。
        System.out.println(firstContext);//
        System.out.println(allContext);//
        
        fileCopy("F:/test.txt","F:/test_copy.txt");
        equal("F:/test.txt","F:/test_copy.txt");
		
		 //net通讯
        HostAndPort hostAndPort = HostAndPort.fromString("127.0.0.1:8080");
        System.out.println("host == " + hostAndPort.getHostText());
        System.out.println("port == " + hostAndPort.getPortOrDefault(80));
	}
    /*
     * Guava的Files类中还提供了其他一些文件的简捷方法。比如
     * touch方法创建或者更新文件的时间戳。
     * createTempDir()方法创建临时目录
     * Files.createParentDirs(File) 创建父级目录
     * getChecksum(File)获得文件的checksum
     * hash(File)获得文件的hash
     * map系列方法获得文件的内存映射
     * getFileExtension(String)获得文件的扩展名
     * getNameWithoutExtension(String file)获得不带扩展名的文件名
     * 
     */
}







