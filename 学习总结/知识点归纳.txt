----------------------------------------------容器虚拟化技术Docker------------------------------------------------------- 
一、容器虚拟化技术Docker
	定义：解决了运行环境和配置问题软件容器，方便做持续集成并有助于整体发布的容器虚拟化技术。
	特点:一次构建、随处运行，DevOps，内核虚拟化，依赖与宿主机内核（不同于传统的虚拟机技术）
	基本组成：镜像、容器、仓库
	docker安装：
	docker启动：centos 6+ 命令：service docker start
				centos 7+ 命令：systemctl start docker 
	docker关闭重启：centos 7+ 命令：systemctl restart docker  systemctl stop docker
二、常用命令：
	帮助命令：docker version/docker info/docker --help
	镜像命令：docker images 
			  docker search XXX镜像名，可选参数：
			  docker pull XXX镜像名
			  docker rmi -f XXX镜像名ID
			  移除所有镜像：docker rmi -f $(docker images -qa)
	容器命令：docker run [OPTIONS] IMAGE [COMMAND] [ARG...]
			   OPTIONS说明（常用）：有些是一个减号，有些是两个减号
				--name="容器新名字": 为容器指定一个名称；
				-d: 后台运行容器，并返回容器ID，也即启动守护式容器；
				-i：以交互模式运行容器，通常与 -t 同时使用；
				-t：为容器重新分配一个伪输入终端，通常与 -i 同时使用；
				-P: 随机端口映射；
				-p: 指定端口映射，有以下四种格式
					  ip:hostPort:containerPort
					  ip::containerPort
					  hostPort:containerPort
					  containerPort 
			当前所有正在运行的容器：docker ps [OPTIONS] 
									OPTIONS说明（常用）：
									-a :列出当前所有正在运行的容器+历史上运行过的
									-l :显示最近创建的容器。
									-n：显示最近n个创建的容器。
									-q :静默模式，只显示容器编号。
									--no-trunc :不截断输出。
			退出容器：容器停止退出exit
					  容器不停止退出ctrl+P+Q
			启动/停止/重启/强制停止容器：docker start/stop/restart/kill 容器ID或者容器名
			删除已停止的容器：docker rm -f 容器ID 
			删除所有容器：docker rm -f $(docker ps -a -q) 或docker ps -a -q | xargs docker rm
			启动守护式容器：docker run -d 容器名
			查看容器日志：docker logs -f -t --tail n 容器ID
			查看容器内运行的进程：docker top 容器ID
			查看容器内部细节：docker inspect 容器ID
			进入正在运行的容器并以命令行交互：docker exec -it 容器ID bashShell
											  重新进入docker attach 容器ID
			从容器内拷贝文件到主机上：docker cp 容器ID:容器内路径 目的主机路径
三、Docker镜像
	镜像加速原理：bootfs(加载kernel) / rootfs(不同的操作系统发行版)			
	分层的联合文件系统：最大的一个好处就是 - 共享资源
	Docker镜像commit操作补充：docker commit -m=“提交的描述信息” -a=“作者” 容器ID 要创建的目标镜像名:[标签名]
四、Docker容器数据卷
	作用：容器间继承+共享数据、容器的持久化
	卷的设计目的就是数据的持久化，完全独立于容器的生存周期，因此Docker不会在容器删除时删除其挂载的数据卷
	特点：
		1：数据卷可在容器之间共享或重用数据
		2：卷中的更改可以直接生效
		3：数据卷中的更改不会包含在镜像的更新中
		4：数据卷的生命周期一直持续到没有容器使用它为止
	直接命令添加：
		docker run -it -v /宿主机绝对路径目录:/容器内目录[:ro] [--privileged=true] 镜像名
	查看数据卷是否挂载成功
		docker inspect 容器ID
	容器和宿主机之间数据共享				  
	容器停止退出后，宿主机修改后数据是否同步-同步				  
	DockerFile添加-生成镜像：
		使用方式：在Dockerfile中使用VOLUME指令来给镜像添加一个或多个数据卷，格式：VOLUME["/dataVolumeContainer1","/dataVolumeContainer2","/dataVolumeContainer3"]
		构建：docker build -f Dockerfile路径 -t 新的镜像名
	数据卷容器(容器间继承+传递共享数据)：
		语法：--volumes-from，例如：docker run -it --name doc2 --volumes-from doc01 zzyy/centos
五、DockerFile解析
	定义：Dockerfile是用来构建Docker镜像的构建文件，是由一系列命令和参数构成的脚本。
	构建三步骤：编写Dockerfile文件、docker build、docker run
	关系：
		Dockerfile面向开发，Docker镜像成为交付标准，Docker容器则涉及部署与运维，三者缺一不可，合力充当Docker体系的基石
	保留字:
六、Docker发布
	aliyun镜像的使用：
	登录阿里云Docker Registry：$ sudo docker login --username=ali域逸诚 registry.cn-hangzhou.aliyuncs.com
	从Registry中拉取镜像：$ sudo docker pull registry.cn-hangzhou.aliyuncs.com/ali_yuyicheng/redis_test:[镜像版本号]				  
	将镜像推送到Registry：				  
					$ sudo docker login --username=ali域逸诚 registry.cn-hangzhou.aliyuncs.com
					$ sudo docker tag [ImageId] registry.cn-hangzhou.aliyuncs.com/ali_yuyicheng/redis_test:[镜像版本号]
					$ sudo docker push registry.cn-hangzhou.aliyuncs.com/ali_yuyicheng/redis_test:[镜像版本号]  
					
----------------------------------------------文档数据结构MongoDB的使用-------------------------------------------------------					  
一、npm（Node Package Manager 包管理器）工具的使用
	- 通过npm可以对node中的包进行上传、下载、搜索等操作
		- npm会在安装完node以后，自动安装
		- npm的常用指令
			npm -v 查看npm的版本
			npm version 查看所有模块的版本
			npm init 初始化项目-创建package.json
			npm i/install 包名 安装指定的包
			npm i/install 包名 --save 安装指定的包并添加依赖
			npm i/install 包名 -g 全局安装（一般都是一些工具）
			npm i/install 安装当前项目所依赖的包
			npm s/search 包名 搜索包	
			npm r/remove 包名 删除一个包
二、MongoDB	
	定义：为快速开发WEB应用而设计的数据库，面向文档，类似JSON数据(BSON),注意：MongoDB数据库使用的是JavaScript进行操作的，在MongoDB含有一个对ES标准实现的引擎，
		在MongoDB中所有ES中的语法中都可以使用
	启动：
		- 打开cmd命令行窗口
			- 输入 mongod 启动mongodb服务器
			- 32位注意：
				启动服务器时，需要输入如下内容
					mongod --storageEngine=mmapv1
					mongod --dbpath 数据库路径 --port 端口
			
		- 再打开一个cmd窗口
			- 输入 mongo 连接mongodb ，出现 >				  
					  
	- 基本概念
		数据库（database）、集合（collection）、文档（document）
		- 在MongoDB中，数据库和集合都不需要手动创建，当我们创建文档时，如果文档所在的集合或数据库不存在会自动创建数据库和集合		
		
	- 基本指令
		show dbs/databases 
			- 显示当前的所有数据库
		use 数据库名
			- 进入到指定的数据库中
		db
			- db表示的是当前所处的数据库
		show collections
			- 显示数据库中所有的集合
			
	- 数据库的CRUD（增删改查）的操作
		  
		- 向数据库中插入文档
		- db.collection.insert()
			- insert()可以向集合中插入一个或多个文档
		- db.collection.insertOne()
			- 向集合中插入一个文档
		- db.collection.insertMany()
			- 向集合中插入多个文档
		如：db.stus.insert([
				{name:"沙和尚",age:38,gender:"男"},
				{name:"白骨精",age:16,gender:"女"},
				{name:"蜘蛛精",age:14,gender:"女"}
			]);
			db.stus.find({}); //查询所有文档
				
		- 查询数据库中的文档
			- db.collection.find()
				- 可以根据指定条件从集合中查询所有符合条件的文档
				- 返回的是一个数组
			- db.collection.findOne()
				- 查询第一个符合条件的文档
				- 返回的是一个对象
			- db.collection.find().count()
				- 查询符合条件的文档的数量
			查询条件：
				-$gt $eq $lt $lte limit() $or
				如：db.emp.find({sal:{$lt:2000 , $gt:1000}}).limit(5);
					db.emp.find({$or:[{sal:{$lt:1000}} , {sal:{$gt:2500}}]});
			分页：
			skip()用于跳过指定数量的数据，MongoDB会自动调整skip和limit的位置
			如：db.numbers.find().skip(10).limit(10); -第11条到20条数据	
			如：db.stus.find({age:16 , name:"白骨精"});
				
		- 修改数据库中的文档
			- db.collection.update()
				- 可以修改、替换集合中的一个或多个文档（默认修改一个）
				注意：  - update()默认情况下会使用新对象来替换旧的对象
						- 如果需要修改指定的属性，而不是替换需要使用“修改操作符”来完成修改
							$set 可以用来修改文档中的指定属性
							$unset 可以用来删除文档的指定属性
							内嵌文档中：
							$push 用于向数组中添加一个新的元素
							$addToSet 向数组中添加一个新元素 ，如果数组中已经存在了该元素，则不会添加
							$inc 增加到	，如:db.emp.updateMany({sal:{$lte:1000}} , {$inc:{sal:400}});						
						- update()默认只会修改一个
			- db.collection.updateOne()
				- 修改集合中的一个文档
			- db.collection.updateMany()
				- 修改集合中的多个文档
			- db.collection.replaceOne()
				- 替换集合中的一个文档
			如：db.stus.update(
				{"_id" : ObjectId("59c219689410bc1dbecc0709")},
				{$set:{
					gender:"男",
					address:"流沙河"
				}}    
			)
			又如：db.stus.update(
					{"name" : "猪八戒"},
					
					{
						$set:{
						address:"呵呵呵"
						}
					}  ,
					{
						multi:true
					}    
				)
				
		- 删除集合中的文档
			- db.collection.remove()
				- 删除集合中的一个或多个文档（默认删除多个），可以第二个参数传递一个true，则只会删除一个
			- db.collection.deleteOne()
				- 删除集合中的一个文档
			- db.collection.deleteMany()
				- 删除集合中的多个文档
			- 清空一个集合
				db.collection.remove({})
			- 删除一个集合
				db.collection.drop()
			- 删除一个数据库
				db.dropDatabase()	
			注意：一般数据库数据中添加一个字段，来表示数据是否被删除
				如：db.stus.insert([
					{
						name:"zbj",
						isDel:0
						},
						{
						name:"shs",
						isDel:0
						},
					{
					name:"ts",
						isDel:0
					}

				]);
				db.stus.updateOne({name:"ts"},{$set:{isDel:1}});	
				db.stus.find({isDel:0});
	文档关系：一对一（one to one），内嵌文档的形式
			  一对多（one to many）/多对一(many to one)，内嵌文档的形式
			  多对多(many to many)
			  
					  
					  
					  
					  
					  
					  
					  
					  
					  
					  
					  
					  
					  
					  
					  
					  
					  
					  
					  
		    
	
	
	
	
	
	
	
	