
######################################################## 正则表达式(Regular Expression) ##################################################################
在不同的开发语言中，正则表达式的基本语法都是一样的，只是在使用方式上有所差别：
本篇以JavaScript的使用方式为例
正则表达式通配符 ：（通配符区分大小写）
 
 通配符	说明
.	匹配除「\n」外的任意一个字符
\b	匹配一个字边界，即字与空格间的位置。
\B	匹配「\b」之外的任意字符。
\d	匹配0-9的任意一个数字。
\D	匹配「\d」之外的任意字符。
\f	匹配换页符。
\n	匹配换行符。
\r	匹配回车符。
\s	匹配任何空白字符(包括空格、制表符、换页符、换行符等)
\S	匹配任何非空白字符。
\t	匹配制表符。
\v	匹配垂直制表符。
\w	匹配包括下划线在内的任意单词字符(包括A-Z、a-z、0-9、_)。
\W	匹配「\w」之外的所有字符。
^	匹配字符串开始的位置。
$	匹配字符串结束的位置。

例如 ：<1-- 判断字符为数字 -->
	<script type="text/javascript">
		var inputText = "1";    //输出的字符串
		var regex = /\d/;   //表示包含一个数字的正则表达式，使用格式：/正则表达式内容/
		//var regex = /^\d$/; 表示一个数字的正则表达式
		
		if(regex.test(inputText)){  //调用Javascript正则表达式对象的test()函数，验证输入的内容是否与正则表达式匹配
			alert("输入正确!");
		}else{
			alert("输入错误!");
		}
	</script>
	<1-- 判断输入单词字符(A-Z、a-z、0-9、_)组成 -->
	<script type="text/javascript">
		var inputText = "B";    //输出的字符串
		var regex = /\w/;   //表示包含一个单词字符的正则表达式
		var regex = /^\w{6,16}$/; //表示6-16位字母、数字、下划线的正则表达式
		if(regex.test(inputText)){  //调用Javascript正则表达式对象的test()函数，验证输入的内容是否与正则表达式匹配
			alert("输入正确!");
		}else{
			alert("输入错误!");
		}
	</script>
	
扩展：
	元字符	说明
{n,m}	m和n是非负整数，其中 n <= m。匹配至少 n 次，至多 m 次。
例如，「a{5,8}」匹配5-8个a。
注意：逗号和数字之间不能有空格。
{n,}	n 是非负整数。至少匹配n次。
例如，「c{5,}」匹配5到无限个c。
{n}	n 是非负整数。正好匹配 n 次。
例如，「123{3}」匹配「12333」；「(456){2}」匹配「456456」
*	零次或多次匹配前面的字符或子表达式。
例如，「zx*」 可以匹配「z」后面跟0到无数个「x」(「z」或「zxx」皆可)。
*等效于{0,}。
?	零次或一次匹配前面的字符或子表达式。
?等效于{0,1}。
+	一次或多次匹配前面的字符或子表达式。
+等效于{1,}。
x|y	匹配 x 或 y。
例如，「g|food」 匹配「z」或「food」。「(g|f)ood」 匹配「good」或「food」。
[xyz]	字符集。匹配包含的任一字符。
例如，「[abc]」匹配「a」、「b」、「c」之中的任何一个字符。
[^xyz]	反向字符集。匹配未包含的任何字符。
例如，「[^abc]」匹配开头除「a」「b」「c」之外的任何字符。
[a-z]	字符范围。匹配指定范围内的任何字符。
例如，「[a-z]」匹配a到z范围内的任何小写字母；「[A-G]」匹配A到G范围内的任何大写字母。「[0-9]」匹配0到9之间的任意数字(相当于「\d」)。
[^a-z]	反向范围字符。匹配不在指定的范围内的任何字符。
例如，「[^a-z]」匹配任何不在「a」到「z」范围内的任何字符。

比较 ：
	-- REGEXP 运算符（正则表达式）
# 规则
# '^'匹配以该字符后面的字符开头的字符串
# '$'匹配以该字符后面的字符结尾的字符串
# '.'匹配任何一个单字符
# '[...]'匹配在方括号内的任何字符。例如，“[abc]" 匹配a、b或c。字符的范围可以使用一个'-'，“[a-z]”匹配任何字母，而“[0-9]”匹配任何数字	
# '*' 匹配零个或多个在他前面的字符。例如，“x*”匹配任何数量的'*'字符，“[0-9]*”匹配任何数量的数字，而“.*”匹配任何数量的任何字符
# '+' 匹配至少一个在他前面的字符。
# '|' 匹配指定字符串，匹配多个字符串，多个字符串之间使用分隔符“|”隔开
# '[]' 字符集合，只匹配其中任何一个字符
# '[^字符集合]' “[^字符集合]”匹配不在指定集合中的任何字符，如： '[^a-e1-2]'表示开头不在a-e  1-2字母的记录
# '{n,}'或'{n,m}' “字符串{n,}”，表示前面的字符至少匹配n次；“字符串{n,m}”表示匹配前面的字符串不少于n次，不多于m次