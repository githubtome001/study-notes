----------------------------------------------NoSQL缓存技术Redis技术篇-----------------------------------------------------------------------------------------------------								
	一、NoSQL入门：
			时代背景[架构演变]：
				单机MySQL:APP->DAL（数据访问层）->MySQL Instance （读写混合）
				Memcached(缓存)+MySQL：（原因：数据量上升，复杂的数据结构[B+Tree]），引入了Memcached分布式缓存技术，为web服务提供缓存（弊端：hash的一致性引发缓存失效），
												APP->DAL（数据访问层）->cache
				Mysql主从复制读写分离：（原因：Memcached(缓存)解决了数据库读的问题，而写的问题依然严重），出现了Mysql的master-slave模式
																				  ->S（Read）
												APP->DAL（数据访问层）->cache -> M（Write）
																				  ->S（Read）
				分表分库+水平拆分+MySQL集群：（原因：流量数据，Mysql主从复制读写分离写的问题日趋严重），出现了MySQL Cluster集群
				Mysql扩展瓶颈：大文本字段效率低
				NOSQL：处理大数据运用而生				
																																								中间件
				当今架构流程：					企业级防火墙/负载均衡Nginx设备										DAL											  ------------>实时通讯/流媒体/移动信息/电子邮件等服务器					
								客户请求  --------------------------------------->  APP服务器（多台） ------------------------------> Mysql Cluster集群数据库 ------------>缓存服务器
																																							  ------------>文件（图片）服务器																
			扩展：高性能架构思路，对于高性能网站，请求量大，如何支撑?				
				1）必要减少请求
				   对于开发人员，提高开发质量（合并css，处理背景图片，优化mysql查询等），对于运维人员善用缓存，如：nginx的expires，利用浏览器缓存等,减少查询
				2）利用cdn技术来响应请求，CDN加速技术
				   CDN：Content Delivery Network，即内容分发网络。
				   CDN是构建在网络之上的内容分发网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。
				   CDN的关键技术主要有内容存储和分发技术。
				3）对请求的处理：服务器集群+负载均衡来支撑，这一步思考如何更好的响应高并发请求，既然请求是不可避免的，我们要做的是把工作内容”平均”分给每台服务器，最理想的状态每台服务器的性能都被充分利用

			含义：NoSQL(NoSQL = Not Only SQL )，意即“不仅仅是SQL”，泛指非关系型的数据库
			特点：易扩展、大数据量高性能、多样灵活的数据模型（适合于查询、增删字段是一件非常麻烦的事情）。
			比较：
				RDBMS vs NoSQL
				RDBMS
				- 高度组织化结构化数据
				- 结构化查询语言（SQL）
				- 数据和关系都存储在单独的表中。
				- 数据操纵语言，数据定义语言
				- 严格的一致性
				- 基础事务
				NoSQL
				- 代表着不仅仅是SQL
				- 没有声明性查询语言
				- 没有预定义的模式
				- 键值对存储，列存储，文档存储，图形数据库
				- 最终一致性，而非ACID属性（数据库事务四个基本要素，原子性[Atomicity]、一致性[Consistency]、隔离性/独立性[Isolation]、持久性[Durability]）
				- 非结构化和不可预知的数据
				- CAP定理（指的是在一个分布式系统中，Consistency（一致性）、 Availability（可用性）、Partition tolerance（分区容错性），三者不可兼得）
				- 高性能，高可用性和可伸缩性
			基础产品：Redis、memcache、Mongdb
			大数据时代的特点：
				3V + 3高
					3V：海量Volume、多样Variety、实时Velocity
					3高：高并发、高可扩、高性能
			经典案例：以阿里巴巴的商品信息存放为例
					  架构演变：Orcale -> Java Servlet -> EJB（将编写的软件中那些需要执行制定的任务的类，不放到客户端软件上了，而是给他打成包放到一个服务器上了） -> 去EJB重构（Ibatis）-> 海量数据：Memcached 集群，分布式存储，Mysql数据拆分 -> 安全、镜像（敏捷、开放[网站开放，允许第三方接入]、体验）
					  数据源数据类型存储问题（数据层）：关系数据库MySQL、搜索引擎、缓存Memcached、KV、文档数据库、外部数据接口（银行）、列数据库...
					  商品信息存放：
						基础信息：存储关系型数据库（MySQL，去Oracle），如：商品价格、名称；
						描述性、评价详情信息（多文字类）：文档数据库MongDB中，多文字信息，关系型数据库IO读写性能变差；
						图片：分布式的文件存储系统，如：TFS（淘宝）、GFS（Google）、HDFS（Hadoop）；
						商品关键字：搜索引擎；
						商品的波段性的热点高频信息：缓存数据库；
						计算类：外部系统，外部第3方支付接口。
						
			大数据时代数据DAL的解决方案：UDSL（统一数据服务层）
				统一数据服务层的特征：
					映射：传统的ORM框架是不能实现跨多数据源与类型的映射，UDSL提供了解决方案；
					API：UDSL提供了统一的查询与更新API，类似JPA；
					热点缓存：二级缓存，实现流程：
							  网站 ->UDSL ->缓存（设置规则） ->查询/更新（根据索引、Key）。
			
			NoSQL的数据模型：
				对比关系型与非关系型数据库设计：RDBMS使用ER图，NoSQL常用的BSON（是一种类似json的一种二进制形式的存储格式，				
				简称Binary JSON，支持内嵌的文档对象和数组对象）结构
				
			聚合模型：
				KV键值、bson、列族（方便数据压缩）、图形
				
			NoSQL分类：
					KV键值对：阿里、百度：memcache+redis，美团：redis+tair，新浪：BerkeleyDB+redis
					文档型数据库(bson格式比较多)：MongoDB（基于分布式文件存储的数据库）、CouchDB
					列存储数据库：分布式文件系统（Cassandra, HBase）
					图关系数据库：它不是放图形的，放的是关系比如:朋友圈社交网络、广告推荐系统，如：Neo4J, InfoGrid
			
			分布式数据库中CAP原理CAP+BASE[重点]：
				ACID：数据库事务四个基本要素，原子性[Atomicity]、一致性[Consistency]、隔离性/独立性[Isolation]、持久性[Durability]
						  原子性：说的是事务里的所有操作要么全部做完，要么都不做，事务成功的条件是事务里的所有操作都成功，只要有一个操作失败，整个事务就失败，需要回滚
						  一致性：数据库要一直处于一致的状态，事务的运行不会改变数据库原本的一致性约束，也即在事务开始之前和事务结束以后，数据库的完整性没有被破坏
						  独立性：指并发的事务之间不会互相影响，如果一个事务要访问的数据正在被另外一个事务修改，只要另外一个事务未提交，它所访问的数据就不受未提交事务的影响
						  持久性：一旦事务提交后，它所做的修改将会永久的保存在数据库上，即使出现宕机也不会丢失
						  
				CAP：指的是在一个分布式系统中，Consistency（一致性）、 Availability（可用性）、Partition tolerance（分区容错性），三者不可兼得（三选二）
					 说明：由于当前的网络硬件肯定会出现延迟丢包等问题，所以分区容忍性是我们必须需要实现的，所以只能在一致性和可用性之间进行权衡。
						对比：   
								产品				   		原则 	特点
							传统关系型数据库RDBMS			AC    	单点集群，满足一致性，可用性的系统，通常在可扩展性上不太强大
							大多数网站架构					AP		满足可用性，分区容忍性的系统，通常可能对一致性要求低一些
							Redis、Mongodb、HBase			CP		满足一致性，分区容忍性的系统，通常性能不是特别高
						   
						结论：强一致性和可用性之间取一个平衡。大多数web应用，其实并不需要强一致性（尤其是读的一致性）。因此牺牲C换取A，这是目前分布式数据库产品的方向。
				BASE：
					为了解决分布式系统中强一致性引起的问题而引起的可用性降低而提出的解决方案
					BASE其实是下面三个术语的缩写：
					基本可用（Basically Available）
					软状态（Soft state）
					最终一致（Eventually consistent）
					它的思想是通过让系统放松对某一时刻数据一致性的要求（实时性）来换取系统整体伸缩性和性能上改观。
					因为在于大型系统往往由于地域分布和极高性能的要求，不可能采用分布式事务来完成这些指标，
					要想获得这些指标，我们必须采用另外一种方式来完成，这里BASE就是解决这个问题的办法。
				分布式与集群：
					分布式系统：由多台计算机和通信的软件组件通过计算机网络连接组成，具有高度的内聚性和透明性。
					分布式：不同的多台服务器上面部署不同的服务模块（工程），他们之间通过Rpc/Rmi（Remote Method Invocation,远程方法调用，仅支持Java语言）之间通信和调用，对外提供服务和组内协作
					集群：不同的多台服务器上面部署相同的服务模块，通过分布式调度软件进行统一的调度，对外提供服务和访问。
	一、Redis:
			含义：REmote DIctionary Server(远程字典服务器)，是完全开源免费的，用C语言编写的，遵守BSD开源协议，是一个高性能的(key/value)分布式内存数据库，
			      基于内存运行，并支持持久化的NoSQL数据库，是当前最热门的NoSql数据库之一，也称为数据结构服务器
			与其他的KV缓存产品对比优势：
				1、Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用
				2、Redis不仅仅支持简单的Key-Value类型的数据，同时还提供string，list，set，zset，hash等数据结构的存储
				3、Redis支持数据的备份，即Master-Slave模式的数据备份
			作用：
				1、内存存储和持久化RDB/AOF：Redis支持异步将内存中的数据写到硬盘上，同时不影响继续服务
				2、发布、订阅消息系统
				3、取最新N个数据的操作，如：可以将最新的10条评论的ID放在Redis的List集合里面；模拟类似于HttpSession这种需要设定过期时间的功能；定时器、计数器
			官网：
				http://redis.io/           
				http://www.redis.cn/
				
			安装使用：
				Windows: 安装路径下执行：redis-server.exe redis.conf
				Linux：企业级开发
					主要步骤：
						1、下载压缩包，下载获得redis-3.0.4.tar.gz后将它放入Linux目录/opt
						2、解压进入，/opt目录下，解压命令:tar -zxvf redis-3.0.4.tar.gz，得到redis-3.0.4文件
						3、安装，cd redis-3.0.4，在redis-3.0.4目录下执行make命令，注意：可能报错，可能原因：缺少gcc库（一款支持c语言的编译工具）的支持，下载yum install gcc-c++
						   再次安装，若报“jemalloc/jemalloc.h：没有那个文件或目录”错误，运行make distclean之后再make，测试环境：macke test（需要TCL环境支持，http://www.linuxfromscratch.org/blfs/view/cvs/general/tcl.html）
						   make完成后继续执行make install-安装
					默认安装目录：/usr/local/bin
						目录结构或文件：
							redis-benchmark：性能测试工具
							redis-check-aof：修复有问题的AOF文件
							redis-check-dump：修复有问题的dump.rdb文件
							redis-cli：客户端，操作入口
							redis-sentinel：redis集群使用[哨兵]
							redis-server：Redis服务器启动命令
					启动：	
						回到解压目录redis-3.0.4/下，主要目录或文件：redis.conf、sentinel.conf、src
						1）修改redis.conf文件将里面的daemonize no 改成 yes，让服务在后台启动
						2）备份配置文件redis.conf，如：redis.conf.bak
						3）启动：
							   安装路径下执行：redis-server [解压路径下]/redis-3.0.4/redis.conf
						   客户端测试：redis-cli（测试是否连通：ping 出现PONG说明服务通的）或 redis-cli -h 127.0.0.1 -p 6379
					关闭：
						单实例关闭：redis-cli shutdown
						多实例关闭，指定端口关闭:redis-cli -p 6379 shutdown
					基础知识：
						单进程模型：单进程模型来处理客户端的请求。对读写RW等事件的响应是通过对epoll函数的包装来做到的。
									Redis的实际处理速度完全依靠主进程的执行效率。
									epoll是Linux内核为处理大批量文件描述符而作了改进的epoll，是Linux下多路复用IO接口select/poll的增强版本，
									它能显著提高程序在大量并发连接中的系统CPU利用率。
						数据库：默认16个数据库，类似数组下标从零开始，初始默认使用零号库，切换库：select 数据库Id
								dbsize：查看当前数据库的key的数量，查看所有key： Keys *；keys 支持ANT风格，如：keys k？
								flushdb：清空当前库
								Flushall；通杀全部库
								统一密码管理：16个库都是同样密码，要么都OK要么一个也连接不上，Redis索引都是从零开始
			数据类型[重点]：
				string：是redis最基本的类型，可以理解成与Memcached一模一样的类型，一个key对应一个value。
						string类型是二进制安全的。意思是redis的string可以包含任何数据。比如jpg图片或者序列化的对象。一个redis中字符串value最多可以是512M。
				hash：哈希无序，类似java里的Map；Redis hash 是一个键值对集合。hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。
				list：列表，是简单的字符串列表，按照插入顺序排序元素可以重复。你可以添加一个元素导列表的头部（左边）或者尾部（右边）。它的底层实际是个链表。
				set：集合，Redis的Set是string类型的无序不可重复集合，它是通过HashSet实现实现的。
				zset：sorted set有序集合，Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。
					  不同的zset是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。zset的成员是唯一的,但分数(score)却可以重复。
				使用：参考http://redisdoc.com/
			基本操作：
				Key：
					查看所有key： keys *
					判断某个key是否存在：exists key的名字，1表示存在，-1表示不存在
					移除key：move key db   --->当前库就没有了，被移除了
					给key设置过期时间：expire key 秒钟
					查看还剩多少秒过期：ttl key ，-1表示永不过期，-2表示已过期
					查看key的类型：type key
				String[单值单value]：
					 set/get/del/append/strlen：
					 Incr/decr/incrby/decrby：只有数字才能进行加减
					 getrange/setrange：
						 getrange：获取指定区间范围内的值，类似between......and的关系;从零到负一表示全部,如：getrange key 0 -1
						 setrange：设置指定区间范围内的值，格式是setrange key值 具体值，如：setrange key 1 xxx，1索引
					 setex(set with expire) 键 秒 值/setnx(set if not exist) 键 秒 值
						setex：设置带过期时间的key，动态设置。setex 键 秒值 真实值，如：setex k1 15 v1
						setnx：setnx:只有在key不存在时设置 key 的值，如：setnx k1 v1
				List[单值多value]：		
					 lpush/rpush/lrange：如：lrange list1 0 -1 	
					 lpop/rpop key：取元素[出栈]
					 lindex：通过索引获取列表中的元素，语法：lindex key index，如：lindex k1 5
					 llen：
					 lrem key 删N个value： * 从left往right删除2个值等于v1的元素，返回的值为实际删除的数量，如：LREM list1 2 v1
										   * LREM list1 0 value1，表示删除全部给定的值，零个就是全部值
					 ltrim key 开始索引 结束索引，截取指定范围的值后再赋值给key，如： ltrim key1 0 3
					 rpoplpush 源列表 目的列表：移除列表的最后一个元素，并将该元素添加到另一个列表并返回，如：rpoplpush l1 l2
					 lset key index value：指定索引位置添加元素
					 linsert key  before/after 值1 值2：插入元素，如：linsert k1 after 3 5
					总结：
						它是一个字符串链表，left、right都可以插入添加；
						如果键不存在，创建新的链表；如果键已存在，新增内容；如果值全移除，对应的键也就消失了。
						链表的操作无论是头和尾效率都极高，但假如是对中间元素进行操作，效率就很惨淡了。
				Set[单值多value，底层是hashSet]：		
					sadd/smembers/sismember：如：sadd set1 v1 v2 v3
					scard：获取集合里面的元素个数，如：scard set1
					srem key value：删除集合中元素，如：srem set1 v1
					srandmember key 某个整数：随机出几个指定个数的元数，如：srandmember set1 2
					spop key ：随机出栈，如：spop set1
					smove key1 key2 在key1里某个值：作用是将key1里的某个值赋给key2，如：smove set1 set2 v1
					数学集合类：
						差集：sdiff，在第一个set里面而不在后面任何一个set里面的项
						交集：sinter
						并集：sunion
				Hash[KV模式不变，但V是一个键值对，类似Java中的Map<String,Object>]：
					 hset/hget/hmset/hmget/hgetall/hdel：如：hmset hash1 id 1 name lisi age 20
					 hlen：
					 hexists key 在key里面的某个值的key：如：hexists hash1 id
					 hkeys/hvals key：如：hkeys hash1  ----->结果：id name age
					 hincrby/hincrbyfloat：给key里面的某个key的值增加整数/浮点数
					 hsetnx：给key里面的某个key不存在才赋值，如：hsetnx hash1 k1 44
				Zset[sorted set有序集合]：	 
					在set基础上，加一个score值。之前set是k1 v1 v2 v3，现在zset是k1 score1 v1 score2 v2	
					zadd/zrange：如：zadd z1 70 v1 80 v2 90 v3，zrange z1 0 -1 withscores
					zrangebyscore key 开始score 结束score [withscores] [limit]：如：zrangebyscore z1 (60 90 withscores			-(不包含，limit 开始下标步 多少步
					删除元素：zrem key 某score下对应的value值，如：zrem z1 v1
					zcard/zcount key score区间/zrank key 下标值/zscore key 对应值，获得分数
						zcard：获取集合中元素个数，如：zcard z1
						zcount：获取分数区间内元素个数，zcount key 开始分数区间 结束分数区间，如：zcount z1 60 80 
						zrank： 获取下标位置，如：zrank z1 v1
						zscore：按照key获得对应的分数，如：zscore z1 v1
					zrevrank key values值，作用是逆序获得下标，如：zrerank z1 v1
					zrevrange：与zrange相反
					zrevrangebyscore  key 结束score 开始score：与zrangebyscore相反					
			配置文件[redis.conf]：
				位置：指定的配置文件目录下
				解析：
					units[单位]：
					如：
					# 1k => 1000 bytes
					# 1kb => 1024 bytes
					# 1m => 1000000 bytes
					# 1mb => 1024*1024 bytes
					# 1g => 1000000000 bytes
					# 1gb => 1024*1024*1024 bytes
						1  配置大小单位,开头定义了一些基本的度量单位，只支持bytes，不支持bit
						2  对大小写不敏感					
					INCLUDES[包含]：
						通过includes包含，redis.conf可以作为总闸，包含其他的配置信息
						如：
						# include /path/to/local.conf
						# include /path/to/other.conf					
					GENERAL[通用]:
						daemonize：是否开启守护进程模式，默认没有开启
						pidfile：进程ID所在文件，默认位置：pidfile /var/run/redis.pid
						port：监听端口，默认6379，如果设为0，禁用监听TCP socket
						tcp-backlog：
							设置tcp的backlog，backlog其实是一个连接队列，backlog队列总和=未完成三次握手队列 + 已经完成三次握手队列。
							在高并发环境下你需要一个高backlog值来避免慢客户端连接问题。
							注意Linux内核会将这个值减小到/proc/sys/net/core/somaxconn的值，所以需要确认增大somaxconn和tcp_max_syn_backlog两个值来达到想要的效果。
						timeout：超时断开连接，默认0，表示关闭
						bind：绑定IP/域名，非必配项
						tcp-keepalive：单位为秒，如果设置为0，则不会进行Keepalive检测，建议设置60，长链接保持心跳，超出设置的数值，会断开socket连接
						loglevel：日志级别，默认有4种，默认是：verbose
							# debug (a lot of information, useful for development/testing)
							# verbose (many rarely useful info, but not a mess like the debug level)
							# notice (moderately verbose, what you want in production probably)
							# warning (only very important / critical messages are logged)
						logfile：日志文件名，默认：stdout # output for logging but daemonize, logs will be sent to /dev/null
						syslog-enabled：是否把日志输出到syslog中，默认NO
						syslog-ident：指定syslog里的日志标志，默认redis
							# Specify the syslog identity.
							# syslog-ident redis
						syslog-facility：指定syslog设备，值可以是USER或LOCAL0-LOCAL7，默认为local0
						databases：数据库，默认16个库，切换库：select dbid # dbid is a number between 0 and 'databases'-1
					SNAPSHOTTING[快照]：RDB是整个内存的压缩过的Snapshot，RDB的数据结构，可以配置复合的快照触发条件！
						Save：# Save the DB on disk 将数据保存到磁盘，语法：save <秒钟> <写操作次数> 或 save <seconds> <changes>
							默认：
							#   after 900 sec (15 min) if at least 1 key changed
							#   after 300 sec (5 min) if at least 10 keys changed
							#   after 60 sec if at least 10000 keys changed
							save 900 1 						 -15分钟内改了1次                      
							save 300 10						 -5分钟内改了10次
							save 60 10000					 -1分钟内改了1万次						
						    注意：如果想禁用RDB持久化的策略，只要不设置任何save指令，或者给save传入一个空字符串参数也可以，如：save ""						
						stop-writes-on-bgsave-error：默认yes，快照关闭了导致不能持久化的问题
													 即当bgsave快照操作出错时停止写数据到磁盘，这样后面写错做均会失败，为了不影响后续写操作，故需将该项值改为no。
						rdbcompression：默认开启yes，
										对于存储到磁盘中的快照，可以设置是否进行压缩存储。如果是的话，redis会采用LZF算法进行压缩。
										如果你不想消耗CPU来进行压缩的话，可以设置为关闭此功能
						rdbchecksum：在存储快照后，还可以让redis使用CRC64算法来进行数据校验，但是这样做会增加大约
									 10%的性能消耗，如果希望获取到最大的性能提升，可以关闭此功能
						dbfilename：默认：dump.rdb # The filename where to dump the DB
						dir：本地数据库存放的路径，redis的路径目录，默认./					
					REPLICATION[复制]:	# Master-Slave replication 主从复制，默认关闭该功能
										主从复制含义：主机数据更新之后，根据配置和策略，自动同步到备机的机制。Master以写为主，Slave以读为主。实现了读写分离与容灾恢复。
										Redis 支持简单易用的主从复制（master-slave replication）功能， 该功能可以让从服务器(slave server)成为主服务器(master server)的精确复制品
						语法：
							方式一：配置从服务器，只需在配置文件中增加一行：slaveof <masterip> <masterport>，如果主机有密码，需要配置访问密码：masterauth <master-password>
							方式二：通过redis客户端工具连接到从（slave）服务器，输入主服务器的IP和端口，然后同步就会开始：SLAVEOF [masterip] [masterport]						
						参数：
							slave-serve-stale-data：默认yes，表示主从复制中，从服务器可以响应客户端请求；
					SECURITY[安全]:	访问密码的查看、设置和取消
						# Require clients to issue AUTH <PASSWORD> before processing any other commands.This might be useful in environments in which you do not trust
						# others with access to the host running redis-server.
						使用[客户端连接工具设置]：
							config get requirepass												-获取
							config set requirepass "123456"										-设置，设置成功后，下次操作需要Auth
							auth 123456															-认证					
					LIMITS[限制]:
						maxclients：客户端最大连接数限制，设置redis允许同时可以与多少个客户端进行连接。默认情况下为10000个客户端。
									如果达到了此限制，redis则会拒绝新的连接请求，并且向这些连接请求方发出“max number of clients reached”以作回应。
						maxmemory：设置redis可以使用的最大内存量。一旦到达内存使用上限，redis将会试图移除内部数据，移除规则可以通过maxmemory-policy来指定。
								   如果redis无法根据移除规则来移除内存中的数据，或者设置了“不允许移除”，那么redis则会针对那些需要申请内存的指令返回错误信息，比如SET、LPUSH等。							   
								   但是对于无内存申请的指令，仍然会正常响应，比如GET等。如果你的redis是主redis（说明你的redis有从redis），
								   那么在设置内存使用上限时，需要在系统中留出一些内存空间给同步队列缓存，只有在你设置的是“不移除”的情况下，才不用考虑这个因素。
							使用：maxmemory <bytes>
							# maxmemory can be a good idea mainly if you want to use Redis as a 'state' server or cache, not as a real DB.
						maxmemory-policy[设置内存使用上限策略]：
							1）volatile-lru：使用LRU算法移除key，只对设置了过期时间的键，volatile：易发辉的意思
							2）allkeys-lru：使用LRU算法移除key
							3）volatile-random：在过期集合中移除随机的key，只对设置了过期时间的键
							4）allkeys-random：移除随机的key
							5）volatile-ttl：移除那些TTL值最小的key，即那些最近要过期的key
							6）noeviction：不进行移除。针对写操作，只是返回错误信息
						maxmemory-samples：设置样本数量，LRU算法和最小TTL算法都并非是精确的算法，而是估算值，所以你可以设置样本的大小，	redis默认会检查这么多个key并选择其中LRU的那个。					   
					APPEND ONLY MODE[追加]：默认关闭no，是否开启aof持久化
						appendonly：no
						appendfilename：append only 文件名，默认：appendonly.aof
						appendfsync：是否同步，默认有3中配置
							1）always：同步持久化，每次发生数据变更会被立即记录到磁盘，性能较差但数据完整性比较好
							2）everysec：出厂默认推荐，异步操作，每秒记录，如果一秒内宕机，有数据丢失
							3）no 从不同步
						no-appendfsync-on-rewrite：重写时是否可以运用Appendfsync，用默认no即可，保证数据安全性。
						auto-aof-rewrite-min-size：设置重写的基准值，当文件大于基准值时触发
						auto-aof-rewrite-percentage：设置重写的基准值
				详细参数说明[附]：
					1. Redis默认不是以守护进程的方式运行，可以通过修改该配置项，使用yes启用守护进程
					   daemonize no
					2. 当Redis以守护进程方式运行时，Redis默认会把pid写入/var/run/redis.pid文件，可以通过pidfile指定
					   pidfile /var/run/redis.pid
					3. 指定Redis监听端口，默认端口为6379，因为6379在手机按键上MERZ对应的号码，而MERZ取自意大利歌女Alessia Merz的名字
					   port 6379
					4. 绑定的主机地址
					   bind 127.0.0.1
					5. 当客户端闲置多长时间后关闭连接，超时断开连接，如果指定为0，表示关闭该功能
					   timeout 300
					6. 指定日志记录级别，Redis总共支持四个级别：debug、verbose、notice、warning，默认为verbose
					   loglevel verbose
					7. 日志记录方式，默认为标准输出，如果配置Redis为守护进程方式运行，而这里又配置为日志记录方式为标准输出，则日志将会发送给/dev/null
					   logfile stdout
					8. 设置数据库的数量，默认数据库为0，可以使用SELECT 命令切换数据库，SELECT dbid
					   databases 16
					9. 指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合
						  save[快照保存] 
						  Redis默认配置文件中提供了三个条件，来保存数据：
						  save 900 1
						  save 300 10
						  save 60 10000
						  分别表示900秒（15分钟）内有1个更改，300秒（5分钟）内有10个更改以及60秒内有10000个更改。
					10. 指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，可以关闭该选项，但会导致数据库文件变的巨大
					    rdbcompression yes
					11. 指定本地数据库文件名，默认值为dump.rdb
					    dbfilename dump.rdb
					12. 指定本地数据库存放目录
					    dir ./
					13. 设置当本机为slave服务时，设置master的IP及端口，在Redis启动时，它会自动从master进行数据同步
					    slaveof 
					14. 当master服务设置了密码保护时，slave服务连接master的密码
					    masterauth 
					15. 设置Redis连接密码，如果配置了连接密码，客户端在连接Redis时需要通过AUTH命令提供密码，默认关闭
					    requirepass foobared
					16. 设置同一时间最大客户端连接数，默认无限制，如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis会关闭新的连接并向客户端返回max number of clients reached错误信息
					    maxclients 128
					17. 指定Redis最大内存限制，Redis在启动时会把数据加载到内存中，达到最大内存后，Redis会先尝试清除已到期或即将到期的Key，当此方法处理后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis新的vm机制，会把Key存放内存，Value会存放在swap区（磁盘）
					    maxmemory 
					18. 指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为 redis本身同步数据文件是按上面save条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为no
					    appendonly no
					19. 指定aof文件名，默认为appendonly.aof
					    appendfilename appendonly.aof
					20. 指定更新日志条件，共有3个可选值： 
					    appendfsync:
							no：表示等操作系统进行数据缓存同步到磁盘（快） 
							always：表示每次更新操作后手动调用fsync()将数据写到磁盘（慢，安全） 
							everysec：表示每秒同步一次（折中，默认值），appendfsync everysec
					21. 指定是否启用虚拟内存机制，默认值为no，VM机制将数据分页存放，由Redis将访问量较少的页即冷数据swap到磁盘上，访问多的页面由磁盘自动换出到内存中
					    vm-enabled no
					22. 虚拟内存文件路径，默认值为/tmp/redis.swap，注意：不可多个Redis实例共享
					    vm-swap-file /tmp/redis.swap
					23. 将所有大于vm-max-memory的数据存入虚拟内存,无论vm-max-memory设置多小,所有索引数据都是内存存储的(Redis的索引数据就是keys),也就是说,当vm-max-memory设置为0的时候,其实是所有value都存在于磁盘。默认值为0
					    vm-max-memory 0
					24. Redis swap文件[redis.swap]分成了很多的page，一个对象可以保存在多个page上面，但一个page上不能被多个对象共享，vm-page-size是要根据存储的数据大小来设定的，建议如果存储很多小对象，page大小最好设置为32或者64 bytes；如果存储很大的数据对象，则可以使用更大的page，如果不确定，就使用默认值
					    vm-page-size 32						
					25. 设置swap文件中的page数量，由于页表（一种表示页面空闲或使用的bitmap）是在放在内存中的，在磁盘上每8个pages将消耗1byte的内存。
					    vm-pages 134217728
						# The total swap size is vm-page-size * vm-pages
					26. 设置访问swap文件[redis.swap]的线程数,最好不要超过机器的核数,如果设置为0，那么所有对swap文件的操作都是串行的，可能会造成比较长时间的延迟。默认值为4
					    vm-max-threads 4
					27. 设置在向客户端应答时，是否把较小的包合并为一个包发送，默认为开启
					    glueoutputbuf yes
					28. 指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法
					    hash-max-zipmap-entries 64
					    hash-max-zipmap-value 512
					29. 指定是否激活重置哈希，默认为开启
					    activerehashing yes
					30. 指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件
					    include /path/to/local.conf				
			持久化：
				RDB（Redis DataBase）：SNAPSHOTTING[快照]的使用
					含义：在指定的时间间隔内将内存中的数据集快照写入磁盘[save]，也就是行话讲的Snapshot快照，它恢复时是将dump.rdb快照文件直接读到内存里，
						  Redis会单独创建（fork）一个子进程来进行持久化，会先将数据写入到一个临时文件中，待持久化过程都结束了，再用这个临时文件替换上次持久化好的文件。					
						  整个过程中，主进程是不进行任何IO操作的，这就确保了极高的性能，如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，
						  但是RDB方式要比AOF方式更加的高效。RDB的缺点是最后一次持久化后的数据可能丢失。						  
					
										子进程								  持久化结束
						  fork ---------------------------> 临时文件	----------------------> 临时文件替换上次持久化好的文件dump.rdb
					
					Fork的作用：fork的作用是复制一个与当前进程一样的进程。新进程的所有数据（变量、环境变量、程序计数器等）
								数值都和原进程一致，但是是一个全新的进程，并作为原进程的子进程			
					保存文件名：dump.rdb
					触发RDB快照：
						默认配置位置：安装目录/usr/local/bin/dump.rdb，备份后再使用：cp dump.rdb dump.bak.rdb
						save或者是bgsave：
							Save：save时只管保存，其它不管，全部阻塞
							BGSAVE[后台保存]：Redis会在后台异步进行快照操作，快照同时还可以响应客户端请求，可以通过lastsave命令获取最后一次成功执行快照的时间。
							注意：执行flushall命令，也会产生dump.rdb文件，但里面是空的，无意义；	  
					恢复数据：
						将备份文件 (dump.rdb) 移动到 redis 安装目录并启动服务即可；提示：如何获取安装目录？CONFIG GET dir
					优势与劣势：
						优势：适合大规模的数据恢复，对数据完整性和一致性要求不高；
						劣势：fork的时候，内存中的数据被克隆了一份，大致2倍的膨胀性需要考虑；
					禁用RDB：动态停止RDB保存规则：redis-cli config set save ""
				AOF（Append Only File）：
					含义：以日志的形式来记录每个写操作，将Redis执行过的所有写指令记录下来(读操作不记录)，只许追加文件但不可以改写文件，
						  redis启动之初会读取该文件重新构建数据，换言之，redis重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作。						  
					保存文件名：appendonly.aof
					AOF启动/修复/恢复：
						正常恢复：
							启动：设置Yes，配置文件修改默认的appendonly no，改为yes
							恢复：将有数据的aof文件复制一份保存到对应安装目录(config get dir)，重启redis然后重新加载
						异常恢复：
							启动：设置Yes，修改默认的appendonly no，改为yes，然后备份被写坏的AOF文件，注：appendonly.aof文件损坏后重新加载启动会报错
							修复：redis-check-aof --fix
							恢复：重启redis然后重新加载
					rewrite：
						含义：AOF采用文件追加的方式，文件会越来越大为避免出现此种情况，新增了重写机制，
							  当AOF文件的大小超过所设定的阈值时，redis就会启动AOF文件的内容压缩，只保留可以恢复数据的最小指令集，可以使用bgrewriteaof。
						原理：AOF文件持续增长而过大时，会fork出一条新进程来将文件重写(也是先写临时文件最后再rename)，遍历新进程的内存中的数据，
						      每条记录有一条set语句。重写aof文件的操作，并没有读取旧的aof文件，而是将整个内存中的数据库内容用命令方式重写了一个新的aof文件，这点和快照有点类似。
						触发机制：redis会记录上次重写时的AOF大小，默认配置是当AOF文件大小是上次rewrite后大小的一倍且文件大于64M时触发。
						优势与劣势：
							优势：appendfsync always  [每修改同步]同步持久化，每次发生数据变更会被立即记录到磁盘，性能较差但数据完整性比较好
								  appendfsync everysec [每秒同步]异步操作，每秒记录，如果一秒内宕机，有数据丢失
								  appendfsync no 从不同步
							劣势：相同数据集的数据而言aof文件要远大于rdb文件，恢复速度慢于rdb；
								  aof运行效率要慢于rdb，每秒同步策略效率较好，不同步效率和rdb相同
				总结：
					官方建议：
						1）RDB持久化方式能够在指定的时间间隔能对你的数据进行快照存储
						2）AOF持久化方式记录每次对服务器写的操作，当服务器重启的时候会重新执行这些命令来恢复原始的数据，
						   AOF命令以redis协议追加保存每次写的操作到文件末尾，Redis还能对AOF文件进行后台重写,使得AOF文件的体积不至于过大；	
						3）只做缓存，如果只希望数据在服务器运行的时候存在，你也可以不使用任何持久化方式  
					同时开启两种持久化方式：
						在这种情况下，当redis重启的时候会优先载入AOF文件来恢复原始的数据，因为在通常情况下AOF文件保存的数据集要比RDB文件保存的数据集要完整
						RDB的数据不实时，同时使用两者时服务器重启也只会找AOF文件。
						那要不要只使用AOF呢？建议不要，因为RDB更适合用于备份数据库(AOF在不断变化不好备份)，
						快速重启，而且不会有AOF可能潜在的bug，留着作为一个万一的手段。						
					建议：
						因为RDB文件只用作后备用途，建议只在Slave上持久化RDB文件，而且只要15分钟备份一次就够了，只保留save 900 1这条规则。
						如果开启AOF，好处是在最恶劣情况下也只会丢失不超过两秒数据，启动脚本较简单只load自己的AOF文件就可以了。
						代价一是带来了持续的IO，二是AOF rewrite的最后将rewrite过程中产生的新数据写到新文件造成的阻塞几乎是不可避免的。
						只要硬盘许可，应该尽量减少AOF rewrite的频率，AOF重写的基础大小默认值64M太小了，可以设到5G以上。默认超过原大小100%大小时重写可以改到适当的数值。
						如果不开启AOF，仅靠Master-Slave Replication 实现高可用性也可以。能省掉一大笔IO也减少了rewrite时带来的系统波动。
						代价是如果Master/Slave同时倒掉，会丢失十几分钟的数据，启动脚本也要比较两个Master/Slave中的RDB文件，载入较新的那个。						
			事务[区分于RDBMS中的事务ACID]：
				含义：可以一次执行多个命令，本质是一组命令的集合。一个事务中的所有命令都会序列化，按顺序地串行化执行而不会被其它命令插入，不许加塞。
				作用：一个队列中，一次性、顺序性、排他性的执行一系列命令。
				命令：
					discard：取消事务
					exec：执行事务块内的命令
					multi：事务块的开始
					unwatch：取消对key的监视
					watch：监视key
				使用：
					正常执行，语法：multi 命令块 exec
					放弃事务，语法：multi 命令块 discard
					全体连坐，语法：multi 命令块[含有错误指令] exec ，结果一个出错，都不执行
					冤头债主，语法：multi 命令块[含有错误执行结果] exec ，抛出错误信息
					监视[监控]：
						悲观锁/乐观锁/CAS(Check And Set)：
							悲观锁：顾名思义，就是很悲观，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会block直到它拿到锁。
									传统的关系型数据库里边就用到了很多这种锁机制，比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁。
							乐观锁(Optimistic Lock)：顾名思义，就是很乐观，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号等机制。乐观锁适用于多读的应用类型，这样可以提高吞吐量，乐观锁策略:提交版本必须大于记录当前版本才能执行更新。
						语法：
							watch key -监控了key，如果key被修改了，后面一个事务的执行失效;一旦执行了exec之前加的监控锁后面执行会被取消掉了							
						结论：
							1）Watch指令，类似乐观锁，事务提交时，如果Key的值已被别的客户端改变，比如某个list已被别的客户端push/pop过了，整个事务队列都不会被执行
							2）通过WATCH命令在事务执行之前监控了多个Keys，倘若在WATCH之后有任何Key的值发生了变化，EXEC命令执行的事务都将被放弃，同时返回Nullmulti-bulk应答以通知调用者事务执行失败							
							3）单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。
							4）没有隔离级别的概念：队列中的命令没有提交之前都不会实际的被执行，因为事务提交前任何指令都不会被实际执行，
												   也就不存在”事务内的查询要看到事务里的更新，在事务外查询不能看到”这个让人万分头痛的问题。
							5）不保证原子性：redis同一个事务中如果有一条命令执行结果失败，其后的命令仍然会被执行，没有回滚					   						
						事务执行流程：
							1）开启：以MULTI开始一个事务
							2）入队：将多个命令入队到事务中，接到这些命令并不会立即执行，而是放到等待执行的事务队列里面[QUEUED]
							3）执行：由EXEC命令触发事务						
			发布与订阅[注意与jMS的区别]：
				含义：
					进程间的一种消息通信模式：发送者(pub)发送消息，订阅者(sub)接收消息。
				流程图：
					
												订阅SUBSCRIBE						发布消息PUBLISH
					客户端（支持多个）	---------------------------->channel <------------------------- 服务端
										<---------------------------
												消息MESSAGE
				结论：
					先订阅后发布后才能收到消息，可以一次性订阅多个，如：SUBSCRIBE c1 c2 c3；订阅支持通配符*，如：PSUBSCRIBE new*
					发息发布，PUBLISH c2 xxxxx；PUBLISH new1 xxxxx
 			REPLICATION[复制，(Master/Slave)]：
				含义：
					也就是我们所说的行话主从复制，主机数据更新后根据配置和策略，自动同步到备机的master/slaver机制，Master以写为主，Slave以读为主。
				作用：
					读写分离 容灾恢复
				使用：
					原则：坚持配从(库)不配主(库)
					从库配置：slaveof <masterip> <masterport>，注意：每次与master断开之后，都需要重新连接[客户端操作]，除非你配置进redis.conf文件；查看Master-Slaves复制信息：info replication
					细节[修改配置文件]:
						1）需要拷贝多份[redis.conf]配置文件；如：cp redis.conf [自定义配置路径]/redis6379.conf；
																 cp redis.conf [自定义配置路径]/redis6380.conf；
																 cp redis.conf [自定义配置路径]/redis6381.conf；
						2）开启守护进程[配置文件]：
							如：
								daemonize yes							-开启守护进程
								pidfile /var/run/redis6379.pid			-指定进程ID
								port 6379								-指定端口号
								logfile	"log6379.log"					-指定日志文件
								dbfilename dump6379.rdb					-指定RDB文件名
					3种方案：
						一主二仆[一个Master两个Slave]：
							开启Master和Slave服务：
							   启动服务主SERVER：安装路径下执行redis-server [自定义配置路径]/redis6379.conf，客户端连接：redis-client -p 6379
							   启动服务从SERVER：安装路径下执行redis-server [自定义配置路径]/redis6380.conf，客户端连接：redis-client -p 6380，配置从服务器：SLAVEOF 127.0.0.1 6379
							   启动服务从SERVER：安装路径下执行redis-server [自定义配置路径]/redis6381.conf，客户端连接：redis-client -p 6381，配置从服务器：SLAVEOF 127.0.0.1 6379
							观察日志：
							   主机日志：观察控制台数据同步到从服务器成功！
							   备机日志：Master-Slaver数据同步成功！
							   查看Master-Slaves复制信息：info replication
							问题：
								1）切入点问题？slave1、slave2是从头开始复制还是从切入点开始复制?比如从k4进来，那之前的K123是否也可以复制?全量复制/增量复制
								2）从机是否可以写W？set可否？可以
								3）主机shutdown后情况如何？从机是上位还是原地待命？投票选举新的Master
								4）主机又回来了后，主机新增记录，从机还能否顺利复制？可以
								5）其中一台从机down后情况如何？重启后它能跟上大部队吗？可以
						薪火相传：
							结论：
								1）上一个Slave可以是下一个slave的Master，Slave同样可以接收其他slaves的连接和同步请求，
								   那么该slave作为了链条中下一个的master，可以有效减轻master的写压力
								2）中途变更转向:会清除之前的数据，重新建立拷贝最新的数据；slaveof 新主库IP 新主库端口
						反客为主：配置文件中或客户端工具添加一行：SLAVEOF no one					-使当前数据库停止与其他数据库的同步，转成主数据库						
				原理分析：
					1）slave启动成功连接到master后会发送一个同步[sync]命令；
					2）Master接到同步[sync]命令启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令，在后台进程执行完毕之后，
					   master将传送整个数据文件到slave,以完成一次完全同步；
					3）全量复制：而slave服务在接收到数据库文件数据后，将其存盘并加载到内存中
					4）增量复制：Master继续将新的所有收集到的修改命令依次传给slave，完成同步；但是只要是重新连接master,一次完全同步（全量复制)将被自动执行				
				哨兵模式：
					含义：反客为主的自动版，能够后台监控主机Master是否故障，如果故障了根据投票数自动将从库Slaver转换为主库；
					使用：
						1）[自定义配置文件目录下]/新建文件：sentinel.conf
						2）配置内容：sentinel monitor 被监控数据库名字[自定义，如：host6379] 127.0.0.1 6379 1 
									 上面最后一个数字1，表示Master主机挂掉后Salve投票看让谁接替成为主机，得票数多少后成为主机;
						3）启动哨兵：redis-sentinel [自定义配置文件目录下]/sentinel.conf，在启动一主二从；
					结论：
						1）当Master服务宕机后，所有的Slaver进行投票选举推出新的Master
						2）当主机重启后，只能以Slaver的角色加入队伍当中
						3）一组sentinel能同时监控多个Master	
					缺点：
						由于所有的写操作都是先在Master上操作，然后同步更新到Slave上，所以从Master同步到Slave机器有一定的延迟，
						当系统很繁忙的时候，延迟问题会更加严重，Slave机器数量的增加也会使这个问题更加严重。				
			Redis对应Java客户端：Jedis、Spring-data-redis