----------------------------------------------SpringCloud技术栈篇---------------------------------------------------------------------------------------------------						  
	基础概念：
	    微服务：强调的是服务的大小，它关注的是某一个点，是具体解决某一个问题/提供落地对应服务的一个服务应用
		-最早提出：马丁福勒
				微服务化的核心是将传统的一站式应用，根据业务拆分成一个一个的服务，彻底
		地去耦合,每一个微服务提供单个业务功能的服务，一个服务做一件事，
		从技术角度看就是一种小而独立的处理过程，类似进程概念，能够自行单独启动
		或销毁，拥有自己独立的数据库。
		微服务架构：架构模式，微服务之间互相协调、互相配合，每个服务运行在其独立的进程中，
			服务与服务间采用轻量级的通信机制互相协作（通常是基于HTTP协议的RESTful API），包括一些环境，有机构成的整体。
		优点缺点：
		-优点：内聚小，松耦合，拥有独立的进程，开发简单；
			   易于与第三方集成，如：与持续自动化构建部署（Jenkins, Hudson）
			   微服务只是业务逻辑的代码，不会和HTML,CSS 或其他界面组件混合（前后端分离思想）。
		-缺点：开发人员要处理分布式系统的复杂性
			   多服务运维难度，随着服务的增加，运维的压力也在增大
			   系统部署依赖
			   服务间通信成本、数据一致性、系统集成测试、性能监控……
		微服务技术栈：
			微服务条目			落地技术											备注			               			
			服务开发			Springboot、Spring、SpringMVC
			服务配置与管理		Netflix公司的Archaius、阿里Diamond等
			服务注册与发现		Eureka、Consul、Zookeeper、AliBabaNacos等
			服务调用			Rest、RPC、gRPC
			服务熔断器			Hystrix、Envoy等
			负载均衡			Ribbon、Feign Nginx等
			服务接口调用(客户端调用服务的简化工具)
								Feign等
			消息队列			Kafka、RabbitMQ、ActiveMQ等
			服务配置中心管理  	SpringCloudConfig、Chef等
			服务路由（API网关） Zuul、Spring Cloud Gateway等
			服务监控			Zabbix、Nagios、Metrics、Spectator等
			全链路追踪			Zipkin，Brave、Dapper、Sleuth等
			服务部署			Docker、OpenStack、Kubernetes等
			数据流操作开发包	SpringCloud Stream（封装与Redis,Rabbit、Kafka等发送接收消息）
			事件消息总线    	Spring Cloud Bus
			......
    SpringCloud入门介绍：
		含义：SpringCloud=分布式微服务架构下的一站式解决方案，是各个微服务架构落地技术的集合体，俗称微服务全家桶
		与springboot的比较：SpringBoot可以离开SpringCloud独立使用开发项目，
							  但是SpringCloud离不开SpringBoot，属于依赖的关系.
							  SpringBoot专注于快速、方便的开发单个微服务个体，SpringCloud关注全局的服务治理框架。
		与Dubbo的比较： 最大区别：SpringCloud抛弃了Dubbo的RPC通信，采用的是基于HTTP的REST方式。
						REST相比RPC更为灵活，服务提供方和调用方的依赖只依靠一纸契约，这在强调快速演化的微服务环境下，显得更加合适。
						品牌机与组装机的区别
						Spring Cloud的功能比DUBBO更加强大，涵盖面更广，而且作为Spring的拳头项目，它也能够与Spring Framework、Spring Boot、Spring Data、Spring Batch等其他Spring项目完美融合，这些对于微服务而言是至关重要的。
						使用Dubbo构建的微服务架构就像组装电脑，各环节我们的选择自由度很高；
						而Spring Cloud就像品牌机，在Spring Source的整合下，做了大量的兼容性测试，保证了机器拥有更高的稳定性。
						社区支持与更新力度
						最为重要的是，DUBBO停止了5年左右的更新，虽然2017.7重启了(刘军)。对于技术发展的新需求，需要由开发者自行拓展升级（比如当当网弄出了DubboX），这对于很多想要采用微服务架构的中小软件组织，显然是不太合适的，中小公司没有这么强大的技术能力去修改Dubbo源码+周边的一整套解决方案，并不是每一个公司都有阿里的大牛+真实的线上生产环境测试过。
	简单服务调用：
			-RestTemplate + API 使用方式： 
			 RestTemplate提供了多种便捷访问远程Http服务的方法，是一种简单便捷的访问restful服务模板类，是Spring提供的用于访问Rest服务的客户端模板工具集 
			使用步骤：
			1，注入Bean：
			如：@Configuration
				public class ConfigBean
				{
				@Bean
				public RestTemplate getRestTemplate()
					{
				return new RestTemplate();
					}
				}
			2，声明使用：
			@Autowired
			private RestTemplate restTemplate;			
			方法中：
			restTemplate.postForObject(REST_URL_PREFIX+"/dept/add", dept, Boolean.class); - 参数：REST请求地址、请求参数、HTTP响应转换被转换成的对象类型
	服务注册与发现：
			-Eureka(C/S)：
				简介：Netflix公司的子模块，是一个基于REST的服务，用于定位服务，以实现云端中间层服务发现和故障转移。Netflix在设计Eureka时遵守的就是AP原则；
				CAP原则：CAP原则又称CAP定理，指的是在一个分布式系统中，Consistency（一致性）、 Availability（可用性）、Partition tolerance（分区容错性），三者不可兼得
				三大角色：1、Eureka Server 提供服务注册和发现；2、Service Provider服务提供方将自身服务注册到Eureka，从而使服务消费方能够找到；3、Service Consumer服务消费方从Eureka获取注册服务列表，从而能够消费服务；
			使用注册中心：
				服务端：
				1,引用模块：POM.XML
					<dependency>
					<groupId>org.springframework.cloud<groupId>
					<artifactId>spring-cloud-starter-eureka-server<artifactId>
					</dependency>
				2,配置参数：application.properties或YML文件的配置
				格式：eureka.instance.hostname=localhost
					  #不要向注册中心注册自己
					  eureka.client.register-with-eureka=false
					  #禁止检索服务
					  eureka.client.fetch-registry=false
					  eureka.client.service-url.defaultZone=http://${eureka.instance.hostname}:${server.port}/eureka	
				3,申明使用：程序main入口，添加@EnableEurekaServer注解，来开启服务注册中心
				客户端：
				1,引用模块：POM.XML
					 <dependency>
						<groupId>org.springframework.cloud</groupId>
						<artifactId>spring-cloud-starter-eureka</artifactId>
					</dependency>
				2,配置参数：application.properties或YML文件的配置
				格式：
					#设置服务名
					spring:
					  application:
						name: 服务名
					eureka:
						  client: #客户端注册进eureka服务列表内
							service-url: 
							  defaultZone: http://localhost:7001/eureka
							  instance:
								instance-id: 服务实例名 #设置后可以隐藏主机名
							  prefer-ip-address: true #访问路径可以显示IP地址
							  #链接点击显示
							  info:
								  app.name: 服务程序名
								  company.name: 公司名
								  build.artifactId: $project.artifactId$
								  build.version: $project.version$
							  
				3,申明使用：主类上添加@EnableEurekaClient注解以实现Eureka中的DiscoveryClient实现，可以使用@EnableDiscoveryClient代替
			使用服务发现：
				申明使用，主启动类添加@EnableDiscoveryClient
			    使用时注入， @Autowired
							 private DiscoveryClient client; //注：DiscoveryClient是spring clould对治理体系的一个抽象；
			自我保护机制：某时刻某一个微服务不可用了，eureka不会立刻清理，依旧会对该微服务的信息进行保存！
			怎么禁止自我保护：配置文件中添加：eureka.server.enbale-self-preservation=false
			集群处理：
				在Eureka服务器中添加配置：
				eureka: 
					instance:
						hostname: eureka1.com #eureka服务端的实例名称
					client: 
						register-with-eureka: false #false表示不向注册中心注册自己。
						fetch-registry: false #false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务
					service-url: 
					#单机 defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/       #设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址（单机）。
					defaultZone: http://eureka1.com:7002/eureka/,http://eureka3.com:7003/eureka/
			与Dubbo的Zookeeper的比较：
				著名的CAP理论指出，一个分布式系统不可能同时满足C(一致性)、A(可用性)和P(分区容错性)。由于分区容错性P在是分布式系统中必须要保证的，因此我们只能在A和C之间进行权衡。
				CAP理论关注粒度是数据，而不是整体系统设计；
				因此,Zookeeper保证的是CP,Eureka则是AP。因此，Eureka可以很好的应对因网络故障导致部分节点失去联系的情况。
			-Zookeeper：
				简介：由于Eureka停止更新了，Zookeeper可以作为替代品；Zookeeper是一个分布式协调工具，可以实现注册中心功能；
				使用：
				1,引用模块：POM.XML
				 <!--SpringBoot整合Zookeeper客户端-->
				<dependency>
					<groupId>org.springframework.cloud</groupId>
					<artifactId>spring-cloud-starter-zookeeper-discovery</artifactId>
					<exclusions>
						<!--先排除自带的zookeeper3.5.3-->
						<exclusion>
							<groupId>org.apache.zookeeper</groupId>
							<artifactId>zookeeper</artifactId>
						</exclusion>
					</exclusions>
				</dependency>
				<!--添加zookeeper3.4.14版本-->
				<dependency>
					<groupId>org.apache.zookeeper</groupId>
					<artifactId>zookeeper</artifactId>
					<version>3.4.14</version>
				</dependency>
				<!-- 说明：spring-cloud默认引用的是zookeeper3.5.3版本的ZK，所以需要检查是否与服务端ZK版本一致 -->
				2,配置参数：application.properties或YML文件的配置
				server:
				  port: 8004
				#服务别名，注册zookeeper到注册中心名称
				spring:
				  application:
					name: cloud-provider-payment
				  cloud:
					zookeeper:
					  connect-string: 120.79.219.152:2181 #ZK服务端地址
				3,申明使用：程序main入口，添加@EnableDiscoveryClient注解，开启服务治理	  
				4,临时节点：不像Eureka有自我保护机制；
			-Consul：
				简介：Spring Cloud Consul是分布式的、高可用、横向扩展(CP原则)，它包含多个组件，但是作为一个整体，在微服务架构中为我们的基础设施提供服务发现和服务配置的工具，提供全方位网格解决方案。它包含了下面几个特性：
					  服务发现（service discovery）、提供HTTP和DNS两种发现方式
					  健康检查（health checking）、支持多种方式、Http、Tcp、Docker、Shell脚本定制
					  Key/Value存储（一个用来存储动态配置的系统）
					  多数据中心（multi-datacenter）
					  可视化Web界面
				使用-客户端：
				1,引用模块：POM.XML
					<dependency>
					  <groupId>org.springframework.cloud</groupId>
					  <artifactId>spring-cloud-starter-consul-discovery</artifactId>
					</dependency>
				2,配置参数：application.properties或YML文件的配置
				格式：
					  spring.cloud.consul.host=localhost #域名
					  spring.cloud.consul.port=8500 #端口
				或：
					server:
					  port: 8006
					spring:
					  application:
						name: consul-provider-payment
					#consul注册中心地址
					  cloud:
						consul:
						  host: localhost
						  port: 8500
						  discovery:
							service-name: ${spring.application.name}
				3,申明使用：程序main入口，添加@EnableDiscoveryClient注解，开启服务治理
				注意：consul不需要创建类似eureka-server的服务端吗？由于Consul自身提供了服务端，所以我们不需要像之前实现Eureka的时候创建服务注册中心，直接通过下载consul的服务端程序就可以使用。
				启动consul服务：$consul agent -dev； 查看版本：	$consul --version；			
			-Nocas：
				参考Spring Cloud Alibaba 技术站的Nocas相关内容；		
				详情参考：https://blog.csdn.net/qq_38765404/article/details/89521124
	负载均衡：
			-Ribbon（结合Eureka以及RestTemplate使用）：	官网已经进入维护模式；
			 简介：基于Netflix实现的一套客户端负载均衡的工具，主要功能是提供客户端的软件负载均衡算法。
			 负载均衡：将用户的请求基于某种规则平摊的分配到多个服务上，从而达到系统的HA，常见的负载均衡有软件Nginx，LVS，Haproxy，硬件F5等
				分类：集中式LB-即在服务的消费方和提供方之间使用独立的LB设施(可以是硬件，如F5, 也可以是软件，如nginx), 由该设施负责把访问请求通过某种策略转发至服务的消费方；
					  进程内LB-将LB逻辑集成到消费方，消费方从服务注册中心获知有哪些地址可用，然后自己再从这些地址中选择出一个合适的服务器。Ribbon就属于进程内LB。
			 使用：
				1,引用模块：POM.XML
					 <dependency>
						<groupId>org.springframework.cloud</groupId>
						<artifactId>spring-cloud-starter-ribbon</artifactId>
					</dependency>
					<dependency>
						<groupId>org.springframework.cloud</groupId>
						<artifactId>spring-cloud-starter-eureka</artifactId>
					</dependency>
				2,配置参数：application.properties或YML文件的配置
				格式：（eureka配置）
					server:
						port: 80
						eureka:
							client:
							register-with-eureka: false
							service-url: 
							defaultZone: http://eureka1.com:7001/eureka/,http://eureka2.com:7002/eureka/,http://eureka3.com:7003/eureka/	
				3,申明使用：1、程序main入口，添加@EnableDiscoveryClient注解，开启服务治理；2、在配置文件ConfigBean中添加@LoadBalanced注解
				  -》结论：Ribbon和Eureka整合后服务消费方可以直接调用服务而不用再关心地址和端口号
			    4,策略IRule：简单轮询负载均衡RoundRobinRule，区别于RetryRule，随机负载均衡，加权响应时间负载均衡，区域感知轮询负载均衡；
			 自定义Ribbon：	
				主启动类添加@RibbonClient注解，格式：@RibbonClient(name="MICROSERVICECLOUD",configuration=MySelfRule.class)，注意：这个自定义配置类不能放在@ComponentScan所扫描的当前包下以及子包下，
					否则我们自定义的这个配置类就会被所有的Ribbon客户端所共享，也就是说我们达不到特殊化定制的目的了。
				在配置文件ConfigBean中添加@LoadBalanced注解；			
			-Feign（声明式服务调用，WebService客户端）：它的使用方法是定义一个接口，然后在上面添加注解，同时也支持JAX-RS（Java API for RESTful Web Services）标准的注解。
			 Feign 是一个声明式的Web服务客户端，让编写Web服务客户端变得非常容易，只需创建一个接口并在接口上申明注解；
			 特性：
				可插拔式的注解支持，包括Feign注解和JAX-RS注解;
				支持可插拔的HTTP编码器和解码器;
				支持Hystrix和它的Fallback;
				支持Ribbon的负载均衡;
				支持HTTP请求和响应的压缩
			 使用：
				1,引用模块：POM.XML
					 <dependency>
						<groupId>org.springframework.cloud</groupId>
						<artifactId>spring-cloud-starter-feign</artifactId>
					</dependency>
					　<dependency>
						<groupId>org.springframework.cloud</groupId>
						<artifactId>spring-cloud-starter-eureka</artifactId>
						<version>1.3.5.RELEASE</version>
					</dependency>
				2,配置参数：application.properties或YML文件的配置
				格式：（整合eureka配置）
					server:
						port: 80
						eureka:
							client:
							register-with-eureka: false
							service-url: 
							defaultZone: http://eureka1.com:7001/eureka/,http://eureka2.com:7002/eureka/,http://eureka3.com:7003/eureka/	
				3,申明使用：1、程序main入口，添加@EnableDiscoveryClient注解，开启服务治理；同时添加@EnableFeignClients来开启feign
			                2, 定义接口：
							   格式：value=“服务名称”,configuration = xxx.class 这个类配置Hystrix的一些精确属性
			                   @FeignClient(value = "serviceName",fallback = FeignFallBack.class)
							    public interface FeignService {
									@RequestMapping(value = "/ml", method= RequestMethod.GET)
									String method1(@RequestParam("name") String name) ;
								}
								@Component
								public class FeignFallBack implements FeignService{
							　　//实现的方法是服务调用的降级方法
								@Override
								public String method1() {
									return "error";
								}
			-OpenFeign：
				介绍：由于Feign停止更新，将由OpenFeign取代，可以解析SpringMVC下的@requestMapping注解下的接口；
				超时控制：服务提供方与服务消费方允许的服务调用时间不一致就会导致出错，所以需要进行超时控制；
				日志记录：
				使用：
				1,引用模块：POM.XML
					  <!-- openfeign -->
					<dependency>
						<groupId>org.springframework.cloud</groupId>
						<artifactId>spring-cloud-starter-openfeign</artifactId>
					</dependency>
				2,配置参数：application.properties或YML文件的配置
					server:
					  port: 80
					#设置feign客户端超时时间（OpenFeign默认支持ribbon）
					ribbon:
					  ReadTimeout: 5000 #指的是建立连接后从服务器读取到可用资源所用的时间
					  ConnectTimeout: 5000 #指的是建立连接所用的时间，适用于网络状况正常的情况下，两端连接所用的实际
					logging:
					  level:
						#feign日志以什么级别监控那个接口
						com.eiletxie.springcloud.service.PaymentFeignService: debug
				3,申明使用：1、程序main入口，添加@EnableDiscoveryClient注解，开启服务治理；同时添加@EnableFeignClients来开启feign；
							2、定义接口：
							@Component
							@FeignClient(value = "CLOUD-PAYMENT-SERVICE")
							public interface PaymentFeignService {
								@GetMapping(value="/payment/get/{id}")
								public CommonResult<Payment> getPaymentById(@PathVariable("id") Long id);
							}
							3、控制层调用；
							4、配置日志bean：
							@Configuration 
							public class FeignConfig {
							@Bean 
							Logger.Level feignLoggerLevel() { 
								return  Logger.Level.FULL; #设置日志级别
								}
							} 
							}}
	服务熔断器（断路器）：		 
			-Hystrix：停更进维，将被Sentinel取代；
			 概念来源：服务雪崩：
				服务扇出：多个微服务之间调用的时候，假设微服务A调用微服务B和微服务C，微服务B和微服务C又调用其它的微服务，这就是所谓的“扇出”效应。
				解决方案：熔断模式（容错处理机制）、隔离模式（容错处理机制）、限流模式（预防模式）
			 简介：Hystrix是一个用于处理分布式系统的延迟和容错的开源库，在分布式系统（SOA面向服务架构）里，许多依赖不可避免的会调用失败，比如超时、异常等，Hystrix能够保证在一个依赖出问题的情况下，不会导致整体服务失败，避免级联故障，以提高分布式系统的弹性。
				   “断路器”本身是一种开关装置，当某个服务单元发生故障之后，通过断路器的故障监控（类似熔断保险丝），
				   向调用方返回一个符合预期的、可处理的备选响应（FallBack），而不是长时间的等待或者抛出调用方无法处理的异常，这样就保证了服务调用方的线程不会被长时间、不必要地占用，从而避免了故障在分布式系统中的蔓延，乃至雪崩。
			 服务熔断
				使用：
					概念：当扇出链路的某个微服务不可用或者响应时间太长时，会进行服务的降级，进而熔断该节点微服务的调用，快速返回"错误"的响应信息。 
						  SpringCloud框架里熔断机制通过Hystrix实现。Hystrix会监控微服务间调用的状况，当失败的调用到一定阈值，缺省是5秒内20次调用失败就会启动熔断机制。熔断机制的注解是@HystrixCommand。
					1,引用模块：POM.XML
						 <dependency>
							<groupId>org.springframework.cloud</groupId>
							<artifactId>spring-cloud-starter-hystrix</artifactId>
						</dependency>
					2,配置参数：application.properties或YML文件的配置
					格式：（配合eureka配置）
						server:
							port: 80
							eureka:
								client:
								register-with-eureka: false
								service-url: 
								defaultZone: http://eureka1.com:7001/eureka/,http://eureka2.com:7002/eureka/,http://eureka3.com:7003/eureka/		
					3,申明使用：1、程序main入口，添加@EnableCircuitBreaker注解，开启熔断支持；
								2、在控制层申明使用
									格式示例：fallbackMethod 快速应急的处理方法，进行服务降级处理
									@RequestMapping(value="/dept/get/{id}",method=RequestMethod.GET)
									@HystrixCommand(fallbackMethod = "processHystrix_Get")
									public Dept get(@PathVariable("id") Long id){
									    Dept dept =  this.service.get(id);
										if(null == dept){
										throw new RuntimeException("该ID："+id+"没有没有对应的信息");
									    }
										return dept;	
									}
									public Dept processHystrix_Get(@PathVariable("id") Long id){ 
										return new Dept().setDeptno(id)
											   .setDname("该ID："+id+"没有没有对应的信息,null--@HystrixCommand")
											   .setDb_source("no this database in MySQL");
									}			 
			 服务降级Fallback
				使用： 
					概念：整体资源快不够了，忍痛将某些服务先关掉，待渡过难关，再开启回来。服务降级处理是在客户端实现完成的，与服务端没有关系。
				    申明使用（与Feign结合使用）：	
						格式示例：
						@FeignClient(value = "MICROSERVICECLOUD",fallbackFactory=DeptClientServiceFallbackFactory.class)
						public interface DeptClientService{
							@RequestMapping(value = "/dept/get/{id}",method = RequestMethod.GET)
							public Dept get(@PathVariable("id") long id);
			            }
						@Component
						public class DeptClientServiceFallbackFactory implements FallbackFactory{
						
							@Override
							public Dept get(@PathVariable("id") long id){
								...
							}  
						}
						注意：在application.properties或YML文件的配置添加一行配置
						      feign: 
								hystrix: 
									enabled: true //开启			 
			 服务监控HystrixDashboard
			    使用：
				    概念：Hystrix还提供了准实时的监控（Hystrix Dashboard），Spring Cloud也提供了Hystrix Dashboard的整合，对监控内容转化成可视化界面。
					1,引用模块：POM.XML
						 <dependency>
							<groupId>org.springframework.cloud</groupId>
							<artifactId>spring-cloud-starter-hystrix</artifactId>
						</dependency>
						<dependency>
							<groupId>org.springframework.cloud</groupId>
							<artifactId>spring-boot-starter-actuator</artifactId>
						</dependency>						
						#在服务的监控一方添加如下配置
						<dependency>
							<groupId>org.springframework.cloud</groupId>
							<artifactId>spring-cloud-starter-hystrix-dashboard</artifactId>
						</dependency>
					2,配置参数：application.properties或YML文件的配置
					格式：
						server:
							port: 9901		
					3,申明使用：1、程序main入口，添加@EnableHystrixDashboard注解，开启熔断监控的支持；	
	路由网关：
			-Zuul 1.X：
			 概念：代理+路由+过滤三大功能，可以与Eureka整合并注册到注册中心里面；
			 缺点：Netflix公司的Zuul 1.X是阻塞的I/O的API GATEWAY，采用的是传统的Servlet与Tomcat容器框架，Zuul 2.X迟迟未发布；
			 使用：
				1,引用模块：POM.XML
					<dependency>
						<groupId>org.springframework.cloud</groupId>
						<artifactId>spring-cloud-starter-eureka</artifactId>
					</dependency>
					<dependency>
						<groupId>org.springframework.cloud</groupId>
						<artifactId>spring-cloud-starter-zuul</artifactId>
					</dependency>
				2,配置参数：application.properties或YML文件的配置
				格式：
					zuul: 
					    prefix: /pre //前缀
						ignored-services: 服务名  //多个指定微服务以半角逗号分隔，所有可以用"*"通配符代替
						routes: 
							serverName.path: /serverName/**
							serverName.serviceId: 服务名 //给微服务起别名
							//或使用：serverName.url: http://${IP}:${PORT}/  //基于未使用服务注册中心的
				3,申明使用：1、程序main入口，添加@EnableZuulProxy注解，开启Zuul的支持；
			- Spring Cloud Gateway：
			    概念：新一代网关配置，目标是替代Netflix ZUUL，其不仅提供统一的路由方式，并且基于Filter链的方式提供了网关基本的功能，例如：安全，监控/埋点，和限流等。				
				优势：底层采用的是新一代的webflux框架，它是异步非阻塞的支持Netty通讯的框架；
				作用: 反向代理、鉴权、流量控制、熔断、日志监控；
				功能：路由、断言、过滤；核心：路由转发+执行过滤器链；
				使用-客户端：
				1,引用模块：POM.XML	
				<!--gateway依赖-->
				<dependency>
					<groupId>org.springframework.cloud</groupId>
					  <artifactId>spring-cloud-starter-gateway</artifactId>
				</dependency>
				2,配置参数：创建bootstrap.yml或创建bootstrap.properties文件
				格式：
					spring:
						  application:
							name: gateway-server
						  cloud:
							gateway:
							  routes:
								- id: nacos-discovery-provider
								  uri: lb://nacos-discovery-provider #动态路由
								 #uri: http://localhost:8001
								  predicates: #断言
									- Path=/provider/**
									- After=2020-03-12T15:44:15.064+08:00[Asia/Shanghai]
								   #- Cookie=username,eiletxie   #带Cookie，并且username的值为eiletxie
								   #- Header=X-Request-Id,\d+ #请求头要有 X-Request-Id属性并且值为整数的正则表达式
								  filters:
									- StripPrefix=1
							  discovery:
								locator:
								  enabled: true  #表明gateway开启服务注册和发现的功能，并且spring cloud gateway自动根据服务发现为每一个服务创建了一个router，这个router将以服务名开头的请求路径转发到对应的服务。
								  lowerCaseServiceId: true   #是将请求路径上的服务名配置为小写（因为服务注册的时候，向注册中心注册时将服务名转成大写的了），比如以/service-hi/*的请求路径被路由转发到服务名为service-hi的服务上。
								  filters:
									- StripPrefix=1									
						server:
						  port: 9093
				3、申明使用：程序main入口，添加@EnableDiscoveryClient注解，开启服务调用
						使用示例：http://localhost:9093/provider/hello?name=zhansan
				4、支持自定义路由与过滤：
				   如：@Configuration
						public class GatewayConfig {
							/**
							 * 配置了一个id为route-name的路由规则
							 * 当访问地址 http://localhost:9527/guonei时会自动转发到地址： http://news.baidu.com/guonei
							 * @param builder
							 * @return
							 */
							@Bean
							public RouteLocator customRouteLocator(RouteLocatorBuilder builder) {
								RouteLocatorBuilder.Builder routes = builder.routes();
								routes.route("path_route_eiletxie",
										r -> r.path("/guonei")
												.uri("http://news.baidu.com/guonei")).build();
								return routes.build();
							}
							@Bean
							public RouteLocator customRouteLocator2(RouteLocatorBuilder builder) {
								RouteLocatorBuilder.Builder routes = builder.routes();
								routes.route("path_route_eiletxie2",
										r -> r.path("/guoji")
												.uri("http://news.baidu.com/guoji")).build();
								return routes.build();
							}
						}
					//自定义过滤链
					@Component
					@Slf4j
					public class MyLogGatewayFilter implements GlobalFilter, Ordered {
						@Override
						public Mono< Void > filter(ServerWebExchange exchange, GatewayFilterChain chain) {
							log.info("****** come in MyLogGateWayFilter: " + new Date());
							String uname = exchange.getRequest().getQueryParams().getFirst("uname");
							if(uname == null) {
							  log.info("*****用户名为null，非法用户，o(╥﹏╥)o");
							  exchange.getResponse().setStatusCode(HttpStatus.NOT_ACCEPTABLE);
							  return exchange.getResponse().setComplete();
							}
							return chain.filter(exchange);
						}
						/**
						 * 加载过滤器的顺序，数字越小，优先级越高
						 * @return
						 */
						@Override
						public int getOrder() {
							return 0;
						}
					}				
	分布式配置中心：
				 -SpringCloud Config（与Git、SVN整合使用）
				 概念来源：分布式系统面临的---配置问题
				 概念：为微服务架构中的微服务提供集中化的外部配置支持，配置服务器为各个不同微服务应用的所有环境提供了一个中心化的外部配置
				    分类：服务端和客户端
						  服务端也称为分布式配置中心，它是一个独立的微服务应用，用来连接配置服务器并为客户端提供获取配置信息，加密/解密信息等访问接口
						  客户端则是通过指定的配置中心来管理应用资源，以及与业务相关的配置内容，并在启动的时候从配置中心获取和加载配置信息配置服务器默认采用git来存储配置信息，这样就有助于对环境配置进行版本管理，并且可以通过git客户端工具来方便的管理和访问配置内容。
					规则：1、不同环境不同配置，动态化的配置更新
						  2、运行期间动态调整配置，不再需要在每个服务部署的机器上编写配置文件，服务会向配置中心统一拉取配置自己的信息
						  3、当配置发生变动时，服务不需要重启即可感知到配置的变化并应用新的配置
						  4、将配置信息以REST接口的形式暴露
				 流程图：  Client （客户端、bootstrap.yml）
							  |
						Config Server <-------------->Git / GitHub 仓库
				 使用：
					 1、用自己的Github账户建一个统一配置中心仓库，并克隆到本地；
					 2、新建配置文件application.yml（保存格式必须为UTF-8）
					    格式参考示例：
						spring:
						  profiles:
							active:
							- dev
						---
						spring:
						  profiles: dev     #开发环境
						  application: 
							name: microservicecloud-config-dev
						---
						spring:
						  profiles: test   #测试环境
						  application: 
							name: microservicecloud-config-test
						#  请保存为UTF-8格式
					 3、push到git仓库
					 服务端配置使用：
						1,引用模块：POM.XML
							<dependency>
								<groupId>org.springframework.cloud</groupId>
								<artifactId>spring-cloud-config-server</artifactId>
							</dependency>
						2,配置参数：application.properties或YML文件的配置
									格式：	
									spring:
										application:
											name: microservicecloud-config
										cloud:
											config:
												server:
													git:
														uri: git@github.com***.git #GitHub上面的git仓库名字
						3,申明使用：1、程序main入口，添加@EnableConfigServer注解，开启Config的支持；		
						配置读取规则：
						  1、/{application}-{profile}.yml 如：http://config-3344.com:3344/application-dev.yml
						  2、/{application}/{profile}[/{label}] 如：http://config-3344.com:3344/application/dev/master
						  3、/{label}/{application}-{profile}.yml 如：http://config-3344.com:3344/master/application-dev.yml
					 客户端配置使用：
					      前提准备：
							本地仓库新建配置文件yml并提交到git仓库里，如：microservicecloud-config-client.yml
								参考示例：
									spring:
										profiles:
											active:
												- dev
									---
									server: 
										port: 8201 
									spring:
										profiles: dev
										application: 
											name: microservicecloud-config-client
									eureka: 
										client: 
											service-url: 
												defaultZone: http://eureka-dev.com:7001/eureka/   
									---
									server: 
										port: 8202 
									spring:
										profiles: test
										application: 
											name: microservicecloud-config-client
									eureka: 
										client: 
											service-url: 
												defaultZone: http://eureka-test.com:7001/eureka/
						  1,引用模块：POM.XML
							<dependency>
								<groupId>org.springframework.cloud</groupId>
								<artifactId>spring-cloud-starter-config</artifactId>
							</dependency>
						  2,配置参数：bootstrap.yml配置文件的配置（系统级），而application.yml是用户级
									格式：	
									spring:
										cloud:
											config:
												name: microservicecloud-config-client #需要从github上读取的资源名称，注意没有yml后缀名
												profile: dev #本次访问的配置项
												label: master   
												uri: http://config-3344.com:3344  #本微服务启动后先去找3344号服务（链接Config服务端），通过SpringCloudConfig获取GitHub的服务地址
						  3,申明使用：
							测试：在控制层使用，如：
							@Value("${spring.application.name}")
							private String applicationName;
						  4,客户端之动态刷新
						  1,引用模块：POM.XML
						  <dependency>
								<groupId>org.springframework.cloud</groupId>
								<artifactId>spring-boot-starter-actuator</artifactId>
						  </dependency>
						  2,配置参数：bootstrap.yml
						  #暴露监控端点
						   management:
							  endpoints:
								web:
								  exposure:
									include: "*"
						  3,业务类Controller修改，添加@RefreshScope，同时需要运维人员手动发送post请求刷新客户端服务，如：curl -X POST “http://localhost:3355/actuator/refresh”；
						  缺点：客户端很多的时候，需要手动一个个去刷新，能不能广播、一次通知处处生效？
	SpringCloud Bus消息总线：
		含义：分布式自动刷新配置功能；Spring Cloud Bus配合Spring Cloud Config使用可以实现配置的动态刷新；Bus支持两种消息代理： RabbitMQ和Kafka；
			  微服务架构中，利用消息代理机制管理各个微服务订阅一个消息主题，该主题消息会被订阅消费，则称为消息总线；
		基本使用：
			安装消息代理服务：如：RabbitMQ；安装完成后默认用户名/密码为：guest
		动态刷新全局广播：
			设计思想：1、利用消息总线触发一个客户端/bus/refresh,而刷新所有客户端的配置；2、利用消息总线触发一个服务端ConfigServer的/bus/refresh断电，而刷新所有客户端的配置；
			方案选择后者：因为前者打破了微服务的职责单一性，因为微服务本身是业务模块，它不应该承担配置刷新的职责；破坏了微服务各节点的对等性；
			配置中心服务端添加消息总线支持：
				1,引用模块：POM.XML
				<!-- 添加消息总线RabbitMQ支持 -->
				<dependency>
					<groupId>org.springframework.cloud</groupId>
					<artifactId>spring-cloud-starter-bus-amqp</artifactId>
				</dependency>
				2,配置参数：application.yml
				#rabbit相关配置 15672是web管理界面的端口，5672是MQ访问的端口
				spring:  
				  rabbitmq:
					host: localhost
					port: 5672
					username: guest
					password: guest
				#rabbitmq相关设置 ，暴露 bus刷新配置的端点
				management:
				  endpoints:
					web:
					  exposure:
						include: 'bus-refresh'
			客户端添加消息总线支持：	
				1,引用模块：POM.XML
				<!-- 添加消息总线RabbitMQ支持 -->
				<dependency>
					<groupId>org.springframework.cloud</groupId>
					<artifactId>spring-cloud-starter-bus-amqp</artifactId>
				</dependency>
				2,配置参数：bootstrap.yml
				#rabbit相关配置 15672是web管理界面的端口，5672是MQ访问的端口
				spring:  
				  rabbitmq:
					host: localhost
					port: 5672
					username: guest
					password: guest
				#rabbitmq相关设置 ，暴露 bus刷新配置的端点
				management:
				  endpoints:
					web:
					  exposure:
						include: '*'
			运维人员：发送POST请求：curl -X POST "http://服务配置中心服务端：端口号/actuator/bus-refresh"；
			结论：一次修改，广播通知，处处生效；
		动态刷新定点通知：	
			公式：http://服务配置中心服务端：端口号/actuator/bus-refresh/{destination}；/bus/refresh请求不再发送客户端服务实例上，而是发给config server并通过destination参数类指定需要更新配置的服务或实例
			      其中的destination：客户端服务名:端口；
	SpringCloud Stream消息驱动：
		基本介绍：屏蔽底层消息中间件的差异，降低切换成本，统一消息的编程模型；通过定义绑定器Binder，实现应用程序与消息中间件细节的隔离；目前仅支持RabbitMQ和Kafka；
		Binder绑定器：INPUT对应消费者；OUTPUT对应生产者；Stream中的消息通信方式遵循了发布-订阅模式，Topic主题进行广播，在RabbitMQ就是Exchange，在Kafka中就是Topic；
		SpringCloud Stream标准流程套路：
			Binder：很方便的连接中间件，屏蔽差异；
			Channel：通道，是队列Queue的一种抽象，在消息通讯系统中就是实现存储和转发的媒介，通过Channel对队列进行配置；	  
			Source和Sink：简单的可理解为参照对象是Spring Cloud Stream自身，从Stream发布消息就是输出（Source），接受消息就是输入（Sink）
		基本使用：
		生产者发布消息
			1,引用模块：POM.XML
			<!--stream rabbit -->
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-starter-stream-rabbit</artifactId>
			</dependency>
			2,配置参数：application.yml
			spring:
			  application:
				name: cloud-stream-provider
			  cloud:
				stream:
				  binders: #在此处配置要绑定的rabbitmq的服务信息
				   defaultRabbit: #表示定义的名称，用于binding整合
					 type: rabbit #消息组件类型
					 environment: #设置rabbitmq的相关环境配置
					   spring:
						 rabbitmq:
						   host: localhost
						   port: 5672
						   username: guest
						   password: guest
				  bindings: #服务的整合处理
					output: #这个名字是一个通道的名称，生产者
					  destination: studyExchange #表示要使用的Exchange名称定义
					  content-type: application/json #设置消息类型，本次为json，本文要设置为“text/plain”
					  binder: defaultRabbit #设置要绑定的消息服务的具体设置
			3,生产者消息业务层处理：
			接口：
			public interface IMessageProvider {
				public String send();
			}
			接口实现：
			@EnableBinding(Source.class) //定义消息的推送管道
			public class MessageProviderImpl implements IMessageProvider {
				@Resource
				private MessageChannel output; // 消息发送管道
				@Override
				public String send() {
					String serial = UUID.randomUUID().toString();
					output.send(MessageBuilder.withPayload(serial).build());
					System.out.println("*****serial: "  +serial);
					return null;
				}
			}
			控制器：
			@RestController
			public class SendMessageController {
				@Resource
				private IMessageProvider messageProvider;
				@GetMapping("/sendMessage")
				public String sendMessage() {
					return messageProvider.send();
				}
			}
		消费者消费消息	
			1,引用模块：POM.XML
				<!--stream rabbit -->
				<dependency>
					<groupId>org.springframework.cloud</groupId>
					<artifactId>spring-cloud-starter-stream-rabbit</artifactId>
				</dependency>
			2,配置参数：application.yml
			spring:
			  application:
				name: cloud-stream-provider
			  cloud:
				stream:
				  binders: #在此处配置要绑定的rabbitmq的服务信息
				   defaultRabbit: #表示定义的名称，用于binding整合
					 type: rabbit #消息组件类型
					 environment: #设置rabbitmq的相关环境配置
					   spring:
						 rabbitmq:
						   host: localhost
						   port: 5672
						   username: guest
						   password: guest
				  bindings: #服务的整合处理
					input: #这个名字是一个通道的名称，消费者
					  destination: studyExchange #表示要使用的Exchange名称定义
					  content-type: application/json #设置消息类型，本次为json，本文要设置为“text/plain”
					  binder: defaultRabbit #设置要绑定的消息服务的具体设置
					  group：defalutGroup #设置所属的组
			3,消费者消费消息业务：
			@Component
			@EnableBinding(Sink.class)
			public class ReceiverMessageListenerController {
				@Value("${server.port}")
				private  String serverPort;
				@StreamListener(Sink.INPUT)
				public void input(Message<String> message) {
					System.out.println("消费者1号， -----> 接受到的消息： " + message.getPayload()+ "\t port: " + serverPort);					
				}
			}
		分组消费与持久化：
			问题：消息的消费者存在重复消费的问题；方案：分组和持久化属性group；将消费者规定在同一组里；
			结论：不同组的消息会被重复消费，同一组里面的消息只会被一个消费者消费；
	SpringCloud Sleuth分布式请求链路跟踪：
		基本介绍：在分布式系统中，客户端的请求可能会经历一个服务调用的链路，当中任何一个服务节点出错，都会导致调用失败，为了便于监控管理问题定位，出现了分布式请求链路跟踪；
			在分布式系统中提供追踪解决方案并兼容支持了zipkin；
		基本使用：
			1、zipkin：SpringCloud从F版起已不需要自己构建Zipkin Server了，只需调用jar包即可，即：java -jar zipkin-server-2.12.9-exec.jar；
			2、术语：Trace：类似于树结构的Span集合，表示一条调用链路，存在唯一标识Trace ID；Span：表示调用链路来源，通俗的理解span就是一次请求信息；
			3、服务提供者、服务消费者添加使用：
			1,引用模块：POM.XML
			 <!-- 包含了sleuth zipkin 数据链路追踪-->
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-starter-zipkin</artifactId>
			</dependency>
			2,配置参数：application.yml
			spring:
			  application:
				name: cloud-payment-service
			  zipkin:
				base-url: http://localhost:9411 #zipkin监控后端服务
			  sleuth:
				sampler:
				  #采样取值介于 0到1之间，1则表示全部收集
				  probability: 1