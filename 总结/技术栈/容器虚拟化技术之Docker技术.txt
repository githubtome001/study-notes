----------------------------------------------容器虚拟化技术之Docker技术-------------------------------------------------------------------------------------------- 
	一、容器虚拟化技术Docker，参考：https://blog.csdn.net/qq_43371556/article/details/102631158#_565
		定义：解决了运行环境和配置问题软件容器，方便做持续集成并有助于整体发布的容器虚拟化技术。
		特点:一次构建、随处运行，DevOps，内核虚拟化，依赖于宿主机内核（不同于传统的虚拟机技术VM）
		基本组成：镜像、容器、仓库
		docker安装：
		docker启动：centos 6+ 命令：service docker start
					centos 7+ 命令：systemctl start docker 
		docker关闭重启：centos 7+ 命令：systemctl restart docker  systemctl stop docker systemctl enable docker //开机自启
	二、常用命令：
		帮助命令：docker version/docker info/docker --help
		镜像命令：docker images 
				  docker search XXX镜像名，可选参数：
				  docker pull XXX镜像名
				  docker rmi -f XXX镜像名ID
				  移除所有镜像：docker rmi -f $(docker images -qa)
		容器命令：docker run [OPTIONS] IMAGE [COMMAND] [ARG...]
				   OPTIONS说明（常用）：有些是一个减号，有些是两个减号
					--name="容器新名字": 为容器指定一个名称；
					-d: 后台运行容器，并返回容器ID，也即启动守护式容器；
					-i：以交互模式运行容器，通常与 -t 同时使用；
					-t：为容器重新分配一个伪输入终端，通常与 -i 同时使用；
					-P: 随机端口映射；
					-p: 指定端口映射，有以下四种格式
						  ip:hostPort:containerPort
						  ip::containerPort
						  hostPort:containerPort
						  containerPort 
				当前所有正在运行的容器：docker ps [OPTIONS] 
										OPTIONS说明（常用）：
										-a :列出当前所有正在运行的容器+历史上运行过的
										-l :显示最近创建的容器。
										-n：显示最近n个创建的容器。
										-q :静默模式，只显示容器编号。
										--no-trunc :不截断输出。
				退出容器：容器停止退出exit
						  容器不停止退出ctrl+P+Q
				启动/停止/重启/强制停止容器：docker start/stop/restart/kill 容器ID或者容器名
				删除已停止的容器：docker rm -f 容器ID 
				删除所有容器：docker rm -f $(docker ps -a -q) 或docker ps -a -q | xargs docker rm
				启动守护式容器：docker run -d 容器名
				查看容器日志：docker logs -f -t --tail n 容器ID
				查看容器内运行的进程：docker top 容器ID
				查看容器内部细节：docker inspect 容器ID
				进入正在运行的容器并以命令行交互：docker exec -it 容器ID bashShell
				重新进入：docker attach 容器ID
				从容器内拷贝文件到主机上：docker cp 容器ID:容器内路径 目的主机路径
	三、Docker镜像
		镜像加速原理：bootfs(加载kernel) / rootfs(不同的操作系统发行版)			
		分层的联合文件系统：最大的一个好处就是 - 共享资源
		Docker镜像commit操作补充：docker commit -m=“提交的描述信息” -a=“作者” 容器ID 要创建的目标镜像名:[标签名]
	四、Docker容器数据卷VOLUME
		作用：容器间继承+共享数据、容器的持久化
		卷的设计目的就是数据的持久化，完全独立于容器的生存周期，因此Docker不会在容器删除时删除其挂载的数据卷
		特点：
			1：数据卷可在容器之间共享或重用数据
			2：卷中的更改可以直接生效
			3：数据卷中的更改不会包含在镜像的更新中
			4：数据卷的生命周期一直持续到没有容器使用它为止
		直接命令添加：
			docker run -it -v /宿主机绝对路径目录:/容器内目录[:ro] [--privileged=true] 镜像名
		查看数据卷是否挂载成功
			docker inspect 容器ID
		容器和宿主机之间数据共享				  
		容器停止退出后，宿主机修改后数据是否同步-同步				  
		DockerFile添加-生成镜像：
			使用方式：在Dockerfile中使用VOLUME指令来给镜像添加一个或多个数据卷，格式：VOLUME["/dataVolumeContainer1","/dataVolumeContainer2","/dataVolumeContainer3"]
			构建：docker build -f Dockerfile路径 -t 新的镜像名
		数据卷容器(容器间继承+传递共享数据)：
			语法：--volumes-from，例如：docker run -it --name doc2 --volumes-from doc01 zzyy/centos
	五、DockerFile解析
		定义：Dockerfile是用来构建Docker镜像的构建文件，是由一系列命令和参数构成的脚本。
		构建三步骤：编写Dockerfile文件、docker build、docker run
		关系：
			Dockerfile面向开发，Docker镜像成为交付标准，Docker容器则涉及部署与运维，三者缺一不可，合力充当Docker体系的基石
		保留字:
	六、Docker发布
		aliyun镜像的使用：
		登录阿里云Docker Registry：$ sudo docker login --username=ali域逸诚 registry.cn-hangzhou.aliyuncs.com
		从Registry中拉取镜像：$ sudo docker pull registry.cn-hangzhou.aliyuncs.com/ali_yuyicheng/redis_test:[镜像版本号]				  
		将镜像推送到Registry：				  
						$ sudo docker login --username=ali域逸诚 registry.cn-hangzhou.aliyuncs.com
						$ sudo docker tag [ImageId] registry.cn-hangzhou.aliyuncs.com/ali_yuyicheng/redis_test:[镜像版本号]
						$ sudo docker push registry.cn-hangzhou.aliyuncs.com/ali_yuyicheng/redis_test:[镜像版本号]  