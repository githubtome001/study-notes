-------------------------------------------------------------------- Activi 工作流框架 ---------------------------------------------------------------------------------------------------
一、基本介绍
	1、含义：
		    工作流（(Workflow），工作的一个流程，事物发展的一个业务过程；如：员工申请-部门经理-总经理-人事存档；实现方式：传统方式下？ 请假条的传递来实现，无纸化办公？ 线上申请-线上审批-一条请假记录；
			在计算机的帮助下，能够实现流程的自动化控制，就称为工作流；
	2、工作流引擎：为了实现自动化控制，Acitviti引擎就产生了
	3、作用：实现流程自动化控制；
	4、工作流系统：具有工作流的系统，如果一个系统具备流程的自动化管理功能，这个系统就可以称为工作流系统；实现手段：程序员编码来实现或使用工作流框架，如：Activiti；实现业务流程变化后，程序代码不需要改动；
    5、试用行业：金融行业、物流行业、消费行业、集团公司等；
	6、原理：
二、Activi 7 基础
	1、前身：jbpm；官方网站：https://www.activiti.org/；作者：Tom Baeyens；
	2、BPM：（Business Process Management），即业务流程管理，常见商业管理教育如 EMBA、MBA等均将 BPM 包含在内；目的：缩短流程周期、节约运作资本、提高效益；
	   BPMN：（Business Process Model And Notation），即业务流程模型和符号，BPM 软件，一套标准的业务流程建模符号；Bpmn 图形：通过 xml 表示业务流程，上边的.bpmn 文件使用文本编辑器打开：
	3、Activi 使用：
	   基本步骤：
		   流程定义（使用 activiti 流程建模工具 activity-designer 定义业务流程.bpmn 文件）；
		   流程定义部署（使用 activiti 提供的 api 向 activiti 中部署.bpmn 文件，生成png文件）；
		   启动一个流程实例（ProcessInstance）：类似Java的一个对象；
		   用户查询待办任务（Task）
	       用户办理任务
		   流程结束
	   环境准备：
		   Jdk1.8 或以上版本，Mysql 5 及以上的版本，Mysql 客户端连接工具Sqlyog 或其它，文本编辑器 EditPlus或其它，Java 开发工具 IDEA 或 Eclipse 工具；
	   下载：
	       Activiti7.0.0.Beta1默认支持 spring5，Activiti 下载地址：http://activiti.org/download.html；
	       Maven引入：
		   <dependency>
			 <groupId>org.activiti</groupId>
			 <artifactId>activiti-dependencies</artifactId>
			 <version>7.0.0.Beta1</version>
			 <scope>import</scope>
			 <type>pom</type>
		   </dependency>
	4、Activiti Designer 流程设计器：
	   安装：
	       Eclipse 工具安装：
			   在线安装：
			   Name: Activiti BPMN 2.0 designer
			   Location: http://activiti.org/designer/update/
			   补充说明：打开菜单 Windows->Preferences->Activiti->Save 下流程图片的生成方式设置；
			   压塑包安装：
		   IDEA 工具安装：在 IDEA 的 File 菜单中找到子菜单”Settings”,后面我们再选择左侧的“plugins”菜单，搜索到 actiBPM 插件；
	   Activiti 支持的数据库：h2 、mysql、oracle、db2、postgres、mssql
	       环境准备：创建 mysql 数据库 activiti；CREATE DATABASE activiti DEFAULT CHARACTER SET utf8;
	   使用（Maven工程）：
	   1、POM.XML引入依赖
	      <dependency>
			 <groupId>org.activiti</groupId>
			 <artifactId>activiti-engine</artifactId>
			 <version>7.0.0.Beta1</version>
		  </dependency>
		  <dependency>
			 <groupId>org.activiti</groupId>
			 <artifactId>activiti-spring</artifactId>
			 <version>7.0.0.Beta1</version>
		  </dependency>
		  <dependency>
			 <groupId>org.activiti</groupId>
			 <artifactId>activiti-bpmn-model</artifactId>
			 <version>7.0.0.Beta1</version>
		  </dependency>
		  <dependency>
			 <groupId>org.activiti</groupId>
			 <artifactId>activiti-bpmn-converter</artifactId>
			 <version>7.0.0.Beta1</version>
		  </dependency>
		  <dependency>
			 <groupId>org.activiti</groupId>
			 <artifactId>activiti-json-converter</artifactId>
			 <version>7.0.0.Beta1</version>
		  </dependency>
		  <dependency>
			 <groupId>org.activiti</groupId>
			 <artifactId>activiti-bpmn-layout</artifactId>
			 <version>7.0.0.Beta1</version>
		  </dependency>
	      <dependency>
			 <groupId>org.activiti.cloud</groupId>
			 <artifactId>activiti-cloud-services-api</artifactId>
			 <version>7.0.0.Beta1</version>
		  </dependency>
	   2、在 classpath 下创建 activiti.cgf.xml 文件；配置datasource和 processEngineConfiguration；
	   #数据源
	   <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
			<property name="driverClassName" value="com.mysql.jdbc.Driver" />
			<property name="url" value="jdbc:mysql://localhost:3306/activiti" />
			<property name="username" value="root" />
			<property name="password" value="root" />
			<property name=" maxActive" value="3" />
			<property name="maxIdle" value="1" />
	   </bean>
	   #流程引擎配置
	   <bean id="processEngineConfiguration" class="org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration">
			<!-- 数据源 -->
			<property name="dataSource" ref="dataSource" />
			<!-- activiti数据库表处理策略 -->
			<property name="databaseSchemaUpdate" value="true"/>
			<!--参数
			false（默认）：检查数据库表的版本和依赖库的版本， 如果版本不匹配就抛出异常。
			true: 构建流程引擎时，执行检查，如果需要就执行更新，如果表不存在，就创建。
			create-drop: 构建流程引擎时创建数据库表，关闭流程引擎时删除这些表。
			drop-create：先删除表再创建表。
			create: 构建流程引擎时创建数据库表， 关闭流程引擎时不删除这些表。
			-->
       </bean>
	   #或共同配置
	   <bean id="processEngineConfiguration" class="org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration">
			 <property name="jdbcDriver" value="com.mysql.jdbc.Driver"/>
			 <property name="jdbcUrl" value="jdbc:mysql://localhost:3306/activiti"/>
			 <property name="jdbcUsername" value="root"/>
			 <property name="jdbcPassword" value="root"/>
			 <property name="databaseSchemaUpdate" value="true"/>
       </bean>
	   #运行程序，创建数据库表
		ProcessEngineConfiguration configuration = ProcessEngineConfiguration.createProcessEngineConfigurationFromResource("activiti.cfg.xml");
		ProcessEngine processEngine = configuration.buildProcessEngine();
		System.out.println(processEngine);
	   结论：查看数据库，创建了 25 张表，表的命名规则：
	         以ACT_开头；ACT_RE_*: 'RE'表示 repository，表包含了流程定义和流程静态资源 （图片，规则，等等）。
			 ACT_RU_*: 'RU'表示 runtime。包含流程实例，任务，变量，异步任务，等运行中的数据。
			 ACT_HI_*: 'HI'表示 history。 些表包含历史数据。
			 ACT_GE_*: GE 表示 general。通用数据。
	   结构图：
					ProcessEngineConfiguration <----- activiti.cfg.xml
							   |
							ProcessEngine
							   |
						各种Service（RepositoryService、TaskService、RuntimeService、ManagementService、HistoryService、IdentityService、FormService）
			注：在新Activi 7版本中，IdentityService，FormService 两个 Serivce 都已经删除了。
	   3、ProcessEngineConfiguration配置2种方式：
	      一、StandaloneProcessEngineConfiguration（单独创建）
		  二、SpringProcessEngineConfiguration（与Spring整合）
		  POM.XML配置
		  <!-- 工作流引擎配置bean -->
		  <bean id="processEngineConfiguration" class="org.activiti.spring.SpringProcessEngineConfiguration">
			<!-- 数据源 -->
			<property name="dataSource" ref="dataSource" />
			<!-- 使用spring事务管理器 -->
			<property name="transactionManager" ref="transactionManager" />
			<!-- 数据库策略 -->
			<property name="databaseSchemaUpdate" value="drop-create" />
			<!-- activiti的定时任务关闭 -->
			<property name="jobExecutorActivate" value="false" />
		  </bean>
          <!-- 流程引擎 -->
		  <bean id="processEngine" class="org.activiti.spring.ProcessEngineFactoryBean">
		    <property name="processEngineConfiguration" ref="processEngineConfiguration" />
		  </bean>
		  <!-- 资源服务service -->
		  <bean id="repositoryService" factory-bean="processEngine" factory-method="getRepositoryService" />
		  <!-- 流程运行service -->
		  <bean id="runtimeService" factory-bean="processEngine" factory-method="getRuntimeService" />
		  <!-- 任务管理service -->
		  <bean id="taskService" factory-bean="processEngine" factory-method="getTaskService" />
		  <!-- 历史管理service -->
		  <bean id="historyService" factory-bean="processEngine" factory-method="getHistoryService" />
		  <!-- 用户管理service -->
		  <bean id="identityService" factory-bean="processEngine" factory-method="getIdentityService" />
		  <!-- 引擎管理service -->
		  <bean id="managementService" factory-bean="processEngine" factory-method="getManagementService" />
		  <!-- 事务管理器 -->
		  <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		     <property name="dataSource" ref="dataSource" />
		  </bean>
          <!-- 通知 -->
		  <tx:advice id="txAdvice" transaction-manager="transactionManager">
		  <tx:attributes>
		    <!-- 传播行为 -->
		    <tx:method name="save*" propagation="REQUIRED" />
		    <tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="find*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="get*" propagation="SUPPORTS" read-only="true" />
		  </tx:attributes>
		  </tx:advice>
      4、创建processEngineConfiguration；
			 ProcessEngineConfiguration configuration = ProcessEngineConfiguration.createProcessEngineConfigurationFromResource("activiti.cfg.xml") 
			 ProcessEngineConfiguration.createProcessEngineConfigurationFromResource(String resource, String beanName);//更改 bean 的名称；
         创建ProcessEngine；
			 #一般创建方式：ProcessEngine processEngine = processEngineConfiguration.buildProcessEngine();
			 #简单创建方式：ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();//使用classpath下的activiti.cfg.xml中的配置创建processEngine，且 activiti.cfg.xml 文件中有 processEngineConfiguration 的配置；
		 创建Service；
			 RuntimeService runtimeService = processEngine.getRuntimeService();
			 RepositoryService repositoryService = processEngine.getRepositoryService();
			 TaskService taskService = processEngine.getTaskService();
			 ……
	  Activiti-Designer 使用：
		  Palette（画板）：Connection—连接，Event-事件，Task-任务，Gateway-网关，Container—容器，Boundary event—边界事件，Intermediate event-中间事件，流程图设计完毕保存生成.bpmn 文件。
      流程定义：
		  PNG文件生成
		  Eclipse中Contrl + S 保存即可；
		  IDEA 工具中操作，.bpmn 文件改为扩展名 xml的文件名称，选中文件右键并选择 Diagrams 菜单，再选择 Show BPMN2.0 Designer…，点击 Export To File 的小图标，保存文件；
		  中文乱码的解决：打开 IDEA 安装路径，找到如下文件 idea64.exe.vmoptions 或 idea.exe.vmoptions，行追加一条命令： -Dfile.encoding=UTF-8；
	  流程部署：
		  RepositoryService repositoryService = processEngine.getRepositoryService();
		  Deployment deployment = repositoryService.createDeployment().addClasspathResource("diagram/holiday.bpmn").addClasspathResource("diagram/holiday.png").name("请假申请流程").deploy();
		  System.out.println("流程部署id:" + deployment.getId());
		  System.out.println("流程部署名称:" + deployment.getName());
		  #完善-单个文件部署
		  RepositoryService repositoryService = processEngine.getRepositoryService();
		  InputStream inputStream_bpmn = this.getClass().getClassLoader().getResourceAsStream("diagram/holiday.bpmn");
          InputStream inputStream_png = this.getClass().getClassLoader().getResourceAsStream("diagram/holiday.png");
		  Deployment deployment = repositoryService.createDeployment().addInputStream("holiday.bpmn", inputStream_bpmn).addInputStream("holiday.png", inputStream_png).deploy();
		  #压缩包部署方式，将 .bpmn 和 .png 压缩成 zip 包
		  InputStream inputStream = this.getClass().getClassLoader().getResourceAsStream("diagram/holiday.zip");
		  ZipInputStream zipInputStream = new ZipInputStream(inputStream);
		  RepositoryService repositoryService = processEngine.getRepositoryService();
		  Deployment deployment = repositoryService.createDeployment().addZipInputStream(zipInputStream).deploy();
	      #结论：执行此操作后 activiti 会将上边代码中指定的 bpm 文件和图片文件保存在 activiti 数据库；
	      #操作的表
		   act_re_deployment #流程定义部署表
		   act_re_procdef #流程定义表
		   act_ge_bytearray #资源表
	  流程定义查询：
	      String processDefinitionKey = "holiday";
		  RepositoryService repositoryService = processEngine.getRepositoryService();
		  ProcessDefinitionQuery processDefinitionQuery = repositoryService.createProcessDefinitionQuery();
	      List<ProcessDefinition> list = processDefinitionQuery.processDefinitionKey(processDefinitionKey).orderByProcessDefinitionVersion().desc().list();
		  for (ProcessDefinition processDefinition : list) {
			  System.out.println(" 流 程 部 署 id ： " + processDefinition.getDeploymentId());
			  System.out.println("流程定义id：" + processDefinition.getId());
			  System.out.println("流程定义名称：" + processDefinition.getName());
			  System.out.println("流程定义key：" + processDefinition.getKey());
			  System.out.println("流程定义版本：" + processDefinition.getVersion());
		  }
	  流程定义删除：
		  String deploymentId = "8801";
          RepositoryService repositoryService = processEngine.getRepositoryService();
          //删除流程定义，如果该流程定义已有流程实例启动则删除时出错
          repositoryService.deleteDeployment(deploymentId);
          //设置true 级联删除流程定义，即使该流程有流程实例启动也可以删除，设置为false非级别删除方式，如果流程
		  //repositoryService.deleteDeployment(deploymentId, true)；
	  流程定义资源查询：
          ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();
          RepositoryService repositoryService = processEngine.getRepositoryService();
          ProcessDefinitionQuery processDefinitionQuery = repositoryService.createProcessDefinitionQuery();
          processDefinitionQuery.processDefinitionKey("holiday");
          ProcessDefinition processDefinition = processDefinitionQuery.singleResult();
          String deploymentId = processDefinition.getDeploymentId();
          InputStream pngIs = repositoryService.getResourceAsStream(deploymentId,processDefinition.getDiagramResourceName());//获取png图片资源的名称    
          InputStream bpmnIs = repositoryService.getResourceAsStream(deploymentId,processDefinition.getResourceName());//获取bpmn文件的名称
          OutputStream pngOs = new FileOutputStream("G:\\Activiti7\\dowunload\\"+processDefinition.getDiagramResourceName());      
          OutputStream bpmnOs = new FileOutputStream("G:\\Activiti7\\dowunload\\"+processDefinition.getResourceName());
          IOUtils.copy(pngIs,pngOs);//commons-io-xx.jar中的方法
          IOUtils.copy(bpmnIs,bpmnOs);
          pngOs.close();
          bpmnOs.close();
          pngIs.close();
          bpmnIs.close();
	  流程历史信息的查看：
	      HistoryService historyService = processEngine.getHistoryService();
          HistoricActivityInstanceQuery query = historyService.createHistoricActivityInstanceQuery();
          query.processInstanceId("1501");
		  List<HistoricActivityInstance> list = query.list();
		  for(HistoricActivityInstance ai :list){
			 System.out.println(ai.getActivityId());
			 System.out.println(ai.getActivityName());
			 System.out.println(ai.getProcessDefinitionId());
			 System.out.println(ai.getProcessInstanceId());
		  }
	  启动一个流程实例：
		  RuntimeService runtimeService = processEngine.getRuntimeService();
		  ProcessInstance processInstance = runtimeService.startProcessInstanceByKey("holiday01");
		  System.out.println(" 流程定义 id ： " + processInstance.getProcessDefinitionId());
		  System.out.println("流程实例id：" + processInstance.getId());
		  System.out.println(" 当前活动 Id ： " + processInstance.getActivityId());
	  任务查询（查待办任务）：
		  #任务负责人
          String assignee = "zhangsan";
		  TaskService taskService = processEngine.getTaskService();
		  List<Task> list = taskService.createTaskQuery().processDefinitionKey("holiday01").taskAssignee(assignee).list();
		  for (Task task : list) {
				System.out.println(" 流 程 实 例 id ： " + task.getProcessInstanceId());
				System.out.println("任务id：" + task.getId());
				System.out.println("任务负责人：" + task.getAssignee());
				System.out.println("任务名称：" + task.getName());
          }
	  任务处理（完成任务）：
	      #任务id
		  String taskId = "8305";
          TaskService taskService = processEngine.getTaskService();
		  #完成任务
		  taskService.complete(taskId);
三、Activi 7 进阶
	  1、流程实例
		 含义：按照流程定义内容发起一个流程，这就是一个流程实例，是动态的；
		 启动一个流程实例：
		 String processDefinitionKey = "";
		 RuntimeService runtimeService = processEngine.getRuntimeService();
		 ProcessInstance processInstance = runtimeService.startProcessInstanceByKey(processDefinitionKey);
		 System.out.println(" 流 程 定 义 id ： " + processInstance.getProcessDefinitionId());
		 System.out.println("流程实例id：" + processInstance.getId());
		 System.out.println("当前活动Id：" + processInstance.getActivityId());
		 #业务标识：Businesskey
		 ProcessInstance processInstance = runtimeService.startProcessInstanceByKey(processDefinitionKey,businessKey);
		 #影响表
		 act_ru_execution #流程实例执行表；
		 act_ru_task #任务执行表；
		 act_ru_identitylink #任务参与者，记录当前参与任务的用户或组；
		 act_hi_procinst #流程实例历史表；
		 act_hi_taskinst #任务历史表；
		 act_hi_actinst #活动历史表；
	  2、查询流程实例
		 String processDefinitionKey = "holiday";
		 RuntimeService runtimeService = processEngine.getRuntimeService();
		 List<ProcessInstance> list = runtimeService.createProcessInstanceQuery().processDefinitionKey(processDefinitionKey).list();
		 for (ProcessInstance processInstance : list) {
			System.out.println("流程实例id：" + processInstance.getProcessInstanceId());
			System.out.println("所属流程定义id：" + processInstance.getProcessDefinitionId());
			System.out.println("是否执行完成：" + processInstance.isEnded());
			System.out.println("是否暂停：" + processInstance.isSuspended());
			System.out.println("当前活动标识： " + processInstance.getActivityId());
			System.out.println("业务标识Key： " + processInstance.getBusinessKey(); 
		 }
	  3、挂起、激活流程实例
		 #全部流程实例挂起、激活
		 String processDefinitionId = "";
		 RepositoryService repositoryService = processEngine.getRepositoryService();
		 ProcessDefinition processDefinition = repositoryService.createProcessDefinitionQuery().processDefinitionId(processDefinitionId).singleResult();
		 boolean suspend = processDefinition.isSuspended();
		 if(suspend){
			 repositoryService.activateProcessDefinitionById(processDefinitionId,true, null);
			 System.out.println("流程定义："+processDefinitionId+"激活");
		 }else{
			 repositoryService.suspendProcessDefinitionById(processDefinitionId,true, null);
			 System.out.println("流程定义："+processDefinitionId+"挂起");
		 }
		 #单个流程实例挂起、激活
		 String processInstanceId = "";
		 RuntimeService runtimeService = processEngine.getRuntimeService();
		 ProcessInstance processInstance = runtimeService.createProcessInstanceQuery().processInstanceId(processInstanceId).singleResult();
		 boolean suspend = processInstance.isSuspended();
		 if(suspend){
			 runtimeService.activateProcessInstanceById(processInstanceId);
			 System.out.println("流程实例："+processInstanceId+"激活");
		 }else{
			 runtimeService.suspendProcessInstanceById(processInstanceId);
			 System.out.println("流程实例："+processInstanceId+"挂起");
		 }
	  4、个人任务
		 #分配任务负责人
		 固定分配：在进行业务流程建模时，在 properties 视图中，填写 Assignee 项为任务负责人。
		 表达式分配：
			 UEL表达式：Activiti 使用 UEL 表达式，UEL 是 java EE6 规范的一部分，UEL（Unified Expression Language）即统一表达式语言，activiti 支持两个 UEL 表达式：UEL-value 和 UEL-method。
			 UEL-value 格式如：${order.price}或${price}；UEL-method 格式如：${ldapService.findManagerForEmployee(emp)} ；
		 #使用流程变量分配任务：
			#启动流程实例时设计流程变量
			Map<String, Object> variables = new HashMap<String, Object>();
			variables.put("assignee", "zhangsan");
			ProcessInstance processInstance = runtimeService.startProcessInstanceByKey(processDefinitionKey, variables);
		 监听器分配:
			任务监听器是发生对应的任务相关事件时执行自定义 java 逻辑 或 表达式。任务相当事件包括：Create：任务创建后触发，Assignment：任务分配后触发，Delete：任务完成后触发，All：所有事件发生都触发；
			定义任务监听类，如：
			public class MyTaskListener implements TaskListener {
				@Override
				public void notify(DelegateTask delegateTask) {
				delegateTask.setAssignee("zhangsan");
				}
			}
		 #查询代办任务
			String processDefinitionKey = "holiday";
			String assignee = "zhangsan";
			TaskService taskService = processEngine.getTaskService();
			List<Task> list = taskService.createTaskQuery().processDefinitionKey(processDefinitionKey).includeProcessVariables().taskAssignee(assignee).list();
			for (Task task : list) {
				System.out.println("流程实例id：" + task.getProcessInstanceId());
				System.out.println("任务id：" + task.getId());
				System.out.println("任务负责人：" + task.getAssignee());
				System.out.println("任务名称：" + task.getName());
			}
		 #关联业务标识
			 Task task = taskService.createTaskQuery().processDefinitionKey(processDefinitionKey).includeProcessVariables().taskAssignee(assignee).singleResult();
			 ProcessInstance processInstance = runtimeService.createProcessInstanceQuery().processInstanceId(task.getProcessInstanceId).singleResult();
			 System.out.println("业务标识Key： " + processInstance.getBusinessKey(); 
		 #办理任务
			 taskService.complete(taskId);
			 注意：在实际应用中，完成任务前需要校验任务的负责人是否具有该任务的办理权限。
	  5、流程变量
		 流程变量类型：String、Integer、Short、Long、Double、Boolean、Date、Binary、POJO；注意：如果将 pojo 存储到流程变量中，必须实现序列化接口 serializable，为了防止由于新增字段无法反序列化，需要生成 serialVersionUID；
		 说明：流程变量的作用域默认是一个流程实例(processInstance)，也可以是一个任务(task)或一个执行实例(execution)，这三个作用域流程实例的范围最大，可以称为 global 变量，任务和执行实例仅仅是针对一个任务和一个执行实例范围，范围没有流程实例大，称为 local 变量。
		 使用：
		 需求：员工创建请假申请单，由部门经理审核，部门经理审核通过后请假 3 天及以下由人事经理直接审核，3 天以上先由总经理审核，总经理审核通过再由人事经理存档；
		 #使用 Global 变量控制流程
		 启动流程时设置编码：
			 String processDefinitionKey = "";
			 Holiday holiday = new Holiday();
			 holiday.setNum(3);
			 Map<String, Object> variables = new HashMap<String, Object>();
			 variables.put("num", holiday.getNum());
			 RuntimeService runtimeService = processEngine.getRuntimeService();
			 ProcessInstance processInstance = runtimeService.startProcessInstanceByKey(processDefinitionKey, variables);
			 System.out.println(" 流 程 实 例 id:" + processInstance.getProcessInstanceId());
			 流程定义Condition设置：${num>=3} / ${num<3}
		 任务办理时设置编码：
			 String taskId = "";
			 TaskService taskService = processEngine.getTaskService();
			 Holiday holiday = new Holiday();
			 holiday.setNum(4);
			 Map<String, Object> variables = new HashMap<String, Object>();
			 variables.put("holiday", holiday);
			 taskService.complete(taskId,variables); 
		 通过当前流程实例设置编码：
			 String executionId="2601";
			 RuntimeService runtimeService = processEngine.getRuntimeService();
			 Holiday holiday = new Holiday();
			 holiday.setNum(3);
			 runtimeService.setVariable(executionId, "holiday",holiday);
			 //runtimeService.setVariables(executionId, variables);
		 通过当前任务设置：
			 String taskId="1404";
			 TaskService taskService = processEngine.getTaskService();
			 Holiday holiday = new Holiday();
			 holiday.setNum(3);
			 taskService.setVariable(taskId, "holiday", holiday);
			 //taskService.setVariable(taskId, variables);
		 #影响数据库
			 act_ru_variable #当前流程变量表；
			 act_hi_varinst #历史流程变量表；
		 #设置 local 流程变量
		 任务办理时设置：
			 taskService.setVariablesLocal(taskId, variables);
			 taskService.complete(taskId); 
		 通过当前任务设置：
			 String taskId="1404";
			 TaskService taskService = processEngine.getTaskService();
			 Holiday holiday = new Holiday ();
			 holiday.setNum(3);
			 taskService.setVariableLocal(taskId, "holiday", holiday);
			 //taskService.setVariablesLocal(taskId, variables);
		 历史任务：
			 HistoricTaskInstanceQuery historicTaskInstanceQuery = historyService.createHistoricTaskInstanceQuery();
			 historicTaskInstanceQuery.includeTaskLocalVariables();
			 for (HistoricTaskInstance historicTaskInstance : list) {
				System.out.println(" 任 务 id ： " + historicTaskInstance.getId());
				System.out.println(" 任 务 名 称 ： " + historicTaskInstance.getName());
				System.out.println(" 任 务 负 责 人 ： " + historicTaskInstance.getAssignee());
				System.out.println(" 任 务 local 变 量 ： "+ historicTaskInstance.getTaskLocalVariables());
			 }
	  6、组任务
		 候选人：Candidate-users，
		 组任务办理流程：
			 查询组任务，查询该候选人当前的待办任务，候选人不能办理任务；
			 拾取(claim)任务，原来候选人就变成了该任务的负责人，如果拾取后不想办理该任务，则要将已经拾取的个人任务归还到组里边，将个人任务变成了组任务；
			 查询个人任务，根据 assignee 查询用户负责的个人任务；
			 办理个人任务；
		 #根据候选人查询组任务
			 String processDefinitionKey = "holiday4";
			 String candidateUser = "zhangsan";
			 TaskService taskService = processEngine.getTaskService();
			 List<Task> list = taskService.createTaskQuery().processDefinitionKey(processDefinitionKey).taskCandidateUser(candidateUser)//根据候选人查询
							   .list();
			 for (Task task : list) {
				System.out.println("流程实例id：" + task.getProcessInstanceId());
				System.out.println("任务id：" + task.getId());
				System.out.println("任务负责人：" + task.getAssignee());
				System.out.println("任务名称：" + task.getName());
			 }			
		 #用户拾取组任务
			 TaskService taskService = processEngine.getTaskService();
			 String taskId = "6302";
			 String userId = "lisi";
			 Task task = taskService.createTaskQuery().taskId(taskId).taskCandidateUser(userId)//根据候选人查询
						 .singleResult();
			 if(task!=null){
				taskService.claim(taskId, userId);
				System.out.println("任务拾取成功");
			 }
			 #说明：即使该用户不是候选人也能拾取，建议拾取时校验是否有资格组任务拾取后，该任务已有负责人，通过候选人将查询不到该任务；
		 #用户查询个人待办任务
			 String processDefinitionKey = "holiday4";
			 String assignee = "zhangsan";
			 TaskService taskService = processEngine.getTaskService();
			 List<Task> list = taskService.createTaskQuery().processDefinitionKey(processDefinitionKey).taskAssignee(assignee).list();
			 for (Task task : list) {
				System.out.println(" 流 程 实 例 id ： " + task.getProcessInstanceId());
				System.out.println("任务id：" + task.getId());
				System.out.println("任务负责人：" + task.getAssignee());
				System.out.println("任务名称：" + task.getName());
			 }
		 #用户办理个人任务
			 String taskId = "12304";
			 processEngine.getTaskService().complete(taskId);
			 System.out.println("完成任务："+ taskId);
		 #归还组任务
			 TaskService taskService = processEngine.getTaskService();
			 String taskId = "6004";
			 String userId = "zhangsan";
			 Task task = taskService.createTaskQuery().taskId(taskId).taskAssignee(userId).singleResult();
			 if (task != null) {
				taskService.setAssignee(taskId,null);
			 } 
		 #任务交接
			 TaskService taskService = processEngine.getTaskService();
			 String taskId = "6004";
			 String userId = "zhangsan";
			 String candidateuser = "zhangsan";
			 Task task = taskService.createTaskQuery().taskId(taskId).taskAssignee(userId).singleResult();
			 if (task != null) {
				taskService.setAssignee(taskId, candidateuser);
			 }
		 #影响数据库
			 act_ru_task #任务执行表 
			 act_ru_identitylink #任务参与者
	  7、网关
		 排他网关：排他网关（也叫异或（XOR）网关，或叫基于数据的排他网关），用来在流程中实现决策，排他网关只会选择一个为 true 的分支执行。(即使有两个分支条件都为 true，排他网关也会只
				   选择一条分支去执行)；
		 并行网关：fork 分支- join 汇聚，并行网关不会解析条件，即使顺序流中定义了条件，也会被忽略；		   
		 包含网关：可以看做是排他网关和并行网关的结合体，在分支时，需要判断条件，符合条件的分支，将会执行，符合条件的分支最终才进行汇聚；
四、Activi 7 新特性
	1、测试 Activiti 与 Spring 整合
		@RunWith(SpringJUnit4ClassRunner.class)
		@ContextConfiguration(locations = "classpath:activiti-spring.xml")
		public class ActivitiTest {
			 @Autowired
			 private RepositoryService repositoryService;
			 @Test
			 public void test01(){
				System.out.println("部署对象:"+repositoryService);
			 }
		}
	2、现状分析
		Activiti 现在已经分成两个不同的部分，Activiti Core 作为 Activiti 的核心部分，Activiti Cloud 主要是利用云服务来实现分布式业务流程开发；
		提供ProcessRuntime 接口与TaskRuntime 接口，对原先接口的进一步封装；
	3、Activiti7 与 SpringBoot 整合开发
		引入 SpringBoot 整合 Activti7 的坐标，POM.XML
		application.yml 文件配置，
		spring:
			 datasource:
			 url:
				 jdbc:mysql://localhost:3306/activiti?useUnicode=true&characterEncoding=utf8&serverT
				 imezone=GMT
				 username : root
				 password : 123456
				 driver-class-name: com.mysql.jdbc.Driver
		默认情况下，Activiti7 与 SpringBoot 整合后，集成了 SpringSecurity 安全框架，所以需要准备 SpringSecurity 整合进来的相关用户权限配置信息。
		#登录配置类
		@Component
		public class SecurityUtil {
		private Logger logger = LoggerFactory.getLogger(SecurityUtil.class);
		@Autowired
		@Qualifier("myUserDetailsService")
		private UserDetailsService userDetailsService;
		public void logInAs(String username) {
		UserDetails user = userDetailsService.loadUserByUsername(username);
		if (user == null) {
		throw new IllegalStateException("User " + username + " doesn't exist, please
		provide a valid user");
		}
		logger.info("> Logged in as: " + username);
		SecurityContextHolder.setContext(new SecurityContextImpl(new Authentication() {
		@Override
		public Collection<? extends GrantedAuthority> getAuthorities() {
		return user.getAuthorities();
		}
		@Override
		public Object getCredentials() {
		return user.getPassword();
		}
		@Override
		public Object getDetails() {
		return user;
		}
		@Override
		public Object getPrincipal() {
		return user;
		}
		@Override
		public boolean isAuthenticated() {
		return true;
		}
		@Override
		public void setAuthenticated(boolean isAuthenticated) throws
		IllegalArgumentException {
		}
		@Override
		public String getName() {
		return user.getUsername();
		}
		}));
		org.activiti.engine.impl.identity.Authentication.setAuthenticatedUserId(username);
		}
		}
		#用户权限信息配置，DEMO，也可从数据库中取
		@Configuration
		public class DemoApplicationConfiguration {
			private Logger logger = LoggerFactory.getLogger(DemoApplicationConfiguration.class);
			@Bean
			public UserDetailsService myUserDetailsService() {
				InMemoryUserDetailsManager inMemoryUserDetailsManager = new InMemoryUserDetailsManager();
				String[][] usersGroupsAndRoles = {
					 {"salaboy", "password", "ROLE_ACTIVITI_USER", "GROUP_activitiTeam"},
					 {"ryandawsonuk", "password", "ROLE_ACTIVITI_USER", "GROUP_activitiTeam"},
					 {"erdemedeiros", "password", "ROLE_ACTIVITI_USER", "GROUP_activitiTeam"},
					 {"other", "password", "ROLE_ACTIVITI_USER", "GROUP_otherTeam"},
					 {"system", "password", "ROLE_ACTIVITI_USER"},
					 {"admin", "password", "ROLE_ACTIVITI_ADMIN"},
				};
			for (String[] user : usersGroupsAndRoles) {
			List<String> authoritiesStrings = Arrays.asList(Arrays.copyOfRange(user, 2, user.length));
				logger.info("> Registering new user: " + user[0] + " with the following
				Authorities[" + authoritiesStrings + "]");
				inMemoryUserDetailsManager.createUser(new User(user[0],
				passwordEncoder().encode(user[1]),
				authoritiesStrings.stream().map(s -> new 
				SimpleGrantedAuthority(s)).collect(Collectors.toList())));
			}
			return inMemoryUserDetailsManager;
			}
			@Bean
			public PasswordEncoder passwordEncoder() {
				return new BCryptPasswordEncoder();
			}
		}
		#测试
		@Autowired
		private ProcessRuntime processRuntime;
		@Autowired
		private TaskRuntime taskRuntime;
		@Autowired
		private SecurityUtil securityUtil;	
		#查看流程定义信息
		@Test
		public void contextLoads() {
			securityUtil.logInAs("system");
			Page<ProcessDefinition> processDefinitionPage =  processRuntime.processDefinitions(Pageable.of(0, 10));
			System.out.println(" 可 用 的 流 程 定 义 数 量 ： " + processDefinitionPage.getTotalItems());
			for (org.activiti.api.process.model.ProcessDefinition pd : processDefinitionPage.getContent()) {
				System.out.println("流程定义：" + pd);
			}
		}	
		#启动流程实例
		 @Test
		 public void testStartProcess() {
			securityUtil.logInAs("system");
			ProcessInstance pi = processRuntime.start(ProcessPayloadBuilder.start().withProcessDefinitionKey("myProcess").build());
			System.out.println("流程实例 ID：" + pi.getId());
		 }
		#查询并完成任务
		@Test
		public void testTask() {
			securityUtil.logInAs("ryandawsonuk");
			Page<Task> taskPage=taskRuntime.tasks(Pageable.of(0,10));
			if (taskPage.getTotalItems()>0){
			for (Task task:taskPage.getContent()){
				taskRuntime.claim(TaskPayloadBuilder.claim().withTaskId(task.getId()).build());
				System.out.println("任务："+task);
				taskRuntime.complete(TaskPayloadBuilder.complete().withTaskId(task.getId()).build());
			}
			}
			Page<Task> taskPage2=taskRuntime.tasks(Pageable.of(0,10));
			if (taskPage2.getTotalItems()>0){
				System.out.println("任务："+taskPage2.getContent());
			}
		}
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		   




		
	
	