-------------------------------------------------------------------- Activi 工作流框架 ---------------------------------------------------------------------------------------------------
一、基本介绍
	1、含义：
		    工作流（(Workflow），工作的一个流程，事物发展的一个业务过程；如：员工申请-部门经理-总经理-人事存档；实现方式：传统方式下？ 请假条的传递来实现，无纸化办公？ 线上申请-线上审批-一条请假记录；
			在计算机的帮助下，能够实现流程的自动化控制，就称为工作流；
	2、工作流引擎：为了实现自动化控制，Acitviti引擎就产生了
	3、作用：实现流程自动化控制；
	4、工作流系统：具有工作流的系统，如果一个系统具备流程的自动化管理功能，这个系统就可以称为工作流系统；实现手段：程序员编码来实现或使用工作流框架，如：Activiti；实现业务流程变化后，程序代码不需要改动；
    5、试用行业：金融行业、物流行业、消费行业、集团公司等；
	6、原理：
二、Activi 7
	1、前身：jbpm；官方网站：https://www.activiti.org/；作者：Tom Baeyens；
	2、BPM：（Business Process Management），即业务流程管理，常见商业管理教育如 EMBA、MBA等均将 BPM 包含在内；目的：缩短流程周期、节约运作资本、提高效益；
	   BPMN：（Business Process Model And Notation），即业务流程模型和符号，BPM 软件，一套标准的业务流程建模符号；Bpmn 图形：通过 xml 表示业务流程，上边的.bpmn 文件使用文本编辑器打开：
	3、Activi 使用：
	   基本步骤：
		   流程定义（使用 activiti 流程建模工具 activity-designer 定义业务流程.bpmn 文件）；
		   流程定义部署（使用 activiti 提供的 api 向 activiti 中部署.bpmn 文件，生成png文件）；
		   启动一个流程实例（ProcessInstance）：类似Java的一个对象；
		   用户查询待办任务（Task）
	       用户办理任务
		   流程结束
	   环境准备：
		   Jdk1.8 或以上版本，Mysql 5 及以上的版本，Mysql 客户端连接工具Sqlyog 或其它，文本编辑器 EditPlus或其它，Java 开发工具 IDEA 或 Eclipse 工具；
	   下载：
	       Activiti7.0.0.Beta1默认支持 spring5，Activiti 下载地址：http://activiti.org/download.html；
	       Maven引入：
		   <dependency>
			 <groupId>org.activiti</groupId>
			 <artifactId>activiti-dependencies</artifactId>
			 <version>7.0.0.Beta1</version>
			 <scope>import</scope>
			 <type>pom</type>
		   </dependency>
	4、Activiti Designer 流程设计器：
	   安装：
	       Eclipse 工具安装：
			   在线安装：
			   Name: Activiti BPMN 2.0 designer
			   Location: http://activiti.org/designer/update/
			   补充说明：打开菜单 Windows->Preferences->Activiti->Save 下流程图片的生成方式设置；
			   压塑包安装：
		   IDEA 工具安装：在 IDEA 的 File 菜单中找到子菜单”Settings”,后面我们再选择左侧的“plugins”菜单，搜索到 actiBPM 插件；
	   Activiti 支持的数据库：h2 、mysql、oracle、db2、postgres、mssql
	       环境准备：创建 mysql 数据库 activiti；CREATE DATABASE activiti DEFAULT CHARACTER SET utf8;
	   使用（Maven工程）：
	   1、POM.XML引入依赖
	      <dependency>
			 <groupId>org.activiti</groupId>
			 <artifactId>activiti-engine</artifactId>
			 <version>7.0.0.Beta1</version>
		  </dependency>
		  <dependency>
			 <groupId>org.activiti</groupId>
			 <artifactId>activiti-spring</artifactId>
			 <version>7.0.0.Beta1</version>
		  </dependency>
		  <dependency>
			 <groupId>org.activiti</groupId>
			 <artifactId>activiti-bpmn-model</artifactId>
			 <version>7.0.0.Beta1</version>
		  </dependency>
		  <dependency>
			 <groupId>org.activiti</groupId>
			 <artifactId>activiti-bpmn-converter</artifactId>
			 <version>7.0.0.Beta1</version>
		  </dependency>
		  <dependency>
			 <groupId>org.activiti</groupId>
			 <artifactId>activiti-json-converter</artifactId>
			 <version>7.0.0.Beta1</version>
		  </dependency>
		  <dependency>
			 <groupId>org.activiti</groupId>
			 <artifactId>activiti-bpmn-layout</artifactId>
			 <version>7.0.0.Beta1</version>
		  </dependency>
	      <dependency>
			 <groupId>org.activiti.cloud</groupId>
			 <artifactId>activiti-cloud-services-api</artifactId>
			 <version>7.0.0.Beta1</version>
		  </dependency>
	   2、在 classpath 下创建 activiti.cgf.xml 文件；配置datasource和 processEngineConfiguration；
	   #数据源
	   <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
			<property name="driverClassName" value="com.mysql.jdbc.Driver" />
			<property name="url" value="jdbc:mysql://localhost:3306/activiti" />
			<property name="username" value="root" />
			<property name="password" value="root" />
			<property name=" maxActive" value="3" />
			<property name="maxIdle" value="1" />
	   </bean>
	   #流程引擎配置
	   <bean id="processEngineConfiguration" class="org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration">
			<!-- 数据源 -->
			<property name="dataSource" ref="dataSource" />
			<!-- activiti数据库表处理策略 -->
			<property name="databaseSchemaUpdate" value="true"/>
			<!--参数
			false（默认）：检查数据库表的版本和依赖库的版本， 如果版本不匹配就抛出异常。
			true: 构建流程引擎时，执行检查，如果需要就执行更新，如果表不存在，就创建。
			create-drop: 构建流程引擎时创建数据库表，关闭流程引擎时删除这些表。
			drop-create：先删除表再创建表。
			create: 构建流程引擎时创建数据库表， 关闭流程引擎时不删除这些表。
			-->
       </bean>
	   #或共同配置
	   <bean id="processEngineConfiguration" class="org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration">
			 <property name="jdbcDriver" value="com.mysql.jdbc.Driver"/>
			 <property name="jdbcUrl" value="jdbc:mysql://localhost:3306/activiti"/>
			 <property name="jdbcUsername" value="root"/>
			 <property name="jdbcPassword" value="root"/>
			 <property name="databaseSchemaUpdate" value="true"/>
       </bean>
	   #运行程序，创建数据库表
		ProcessEngineConfiguration configuration = ProcessEngineConfiguration.createProcessEngineConfigurationFromResource("activiti.cfg.xml");
		ProcessEngine processEngine = configuration.buildProcessEngine();
		System.out.println(processEngine);
	   结论：查看数据库，创建了 25 张表，表的命名规则：
	         以ACT_开头；ACT_RE_*: 'RE'表示 repository，表包含了流程定义和流程静态资源 （图片，规则，等等）。
			 ACT_RU_*: 'RU'表示 runtime。包含流程实例，任务，变量，异步任务，等运行中的数据。
			 ACT_HI_*: 'HI'表示 history。 些表包含历史数据。
			 ACT_GE_*: GE 表示 general。通用数据。
	   结构图：
					ProcessEngineConfiguration <----- activiti.cfg.xml
							   |
							ProcessEngine
							   |
						各种Service（RepositoryService、TaskService、RuntimeService、ManagementService、HistoryService、IdentityService、FormService）
			注：在新Activi 7版本中，IdentityService，FormService 两个 Serivce 都已经删除了。
	   3、ProcessEngineConfiguration配置2种方式：
	      一、StandaloneProcessEngineConfiguration（单独创建）
		  二、SpringProcessEngineConfiguration（与Spring整合）
		  POM.XML配置
		  <!-- 工作流引擎配置bean -->
		  <bean id="processEngineConfiguration" class="org.activiti.spring.SpringProcessEngineConfiguration">
			<!-- 数据源 -->
			<property name="dataSource" ref="dataSource" />
			<!-- 使用spring事务管理器 -->
			<property name="transactionManager" ref="transactionManager" />
			<!-- 数据库策略 -->
			<property name="databaseSchemaUpdate" value="drop-create" />
			<!-- activiti的定时任务关闭 -->
			<property name="jobExecutorActivate" value="false" />
		  </bean>
          <!-- 流程引擎 -->
		  <bean id="processEngine" class="org.activiti.spring.ProcessEngineFactoryBean">
		    <property name="processEngineConfiguration" ref="processEngineConfiguration" />
		  </bean>
		  <!-- 资源服务service -->
		  <bean id="repositoryService" factory-bean="processEngine" factory-method="getRepositoryService" />
		  <!-- 流程运行service -->
		  <bean id="runtimeService" factory-bean="processEngine" factory-method="getRuntimeService" />
		  <!-- 任务管理service -->
		  <bean id="taskService" factory-bean="processEngine" factory-method="getTaskService" />
		  <!-- 历史管理service -->
		  <bean id="historyService" factory-bean="processEngine" factory-method="getHistoryService" />
		  <!-- 用户管理service -->
		  <bean id="identityService" factory-bean="processEngine" factory-method="getIdentityService" />
		  <!-- 引擎管理service -->
		  <bean id="managementService" factory-bean="processEngine" factory-method="getManagementService" />
		  <!-- 事务管理器 -->
		  <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		     <property name="dataSource" ref="dataSource" />
		  </bean>
          <!-- 通知 -->
		  <tx:advice id="txAdvice" transaction-manager="transactionManager">
		  <tx:attributes>
		    <!-- 传播行为 -->
		    <tx:method name="save*" propagation="REQUIRED" />
		    <tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="find*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="get*" propagation="SUPPORTS" read-only="true" />
		  </tx:attributes>
		  </tx:advice>
      4、创建processEngineConfiguration；
			 ProcessEngineConfiguration configuration = ProcessEngineConfiguration.createProcessEngineConfigurationFromResource("activiti.cfg.xml") 
			 ProcessEngineConfiguration.createProcessEngineConfigurationFromResource(String resource, String beanName);//更改 bean 的名称；
         创建ProcessEngine；
			 #一般创建方式：ProcessEngine processEngine = processEngineConfiguration.buildProcessEngine();
			 #简单创建方式：ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();//使用classpath下的activiti.cfg.xml中的配置创建processEngine，且 activiti.cfg.xml 文件中有 processEngineConfiguration 的配置；
		 创建Service；
			 RuntimeService runtimeService = processEngine.getRuntimeService();
			 RepositoryService repositoryService = processEngine.getRepositoryService();
			 TaskService taskService = processEngine.getTaskService();
			 ……
	  Activiti-Designer 使用：
		  Palette（画板）：Connection—连接，Event-事件，Task-任务，Gateway-网关，Container—容器，Boundary event—边界事件，Intermediate event-中间事件，流程图设计完毕保存生成.bpmn 文件。
      流程定义：
		  PNG文件生成
		  Eclipse中Contrl + S 保存即可；
		  IDEA 工具中操作，.bpmn 文件改为扩展名 xml的文件名称，选中文件右键并选择 Diagrams 菜单，再选择 Show BPMN2.0 Designer…，点击 Export To File 的小图标，保存文件；
		  中文乱码的解决：打开 IDEA 安装路径，找到如下文件 idea64.exe.vmoptions 或 idea.exe.vmoptions，行追加一条命令： -Dfile.encoding=UTF-8；
	  流程部署：
		  RepositoryService repositoryService = processEngine.getRepositoryService();
		  Deployment deployment = repositoryService.createDeployment().addClasspathResource("diagram/holiday.bpmn").addClasspathResource("diagram/holiday.png").name("请假申请流程").deploy();
		  System.out.println("流程部署id:" + deployment.getId());
		  System.out.println("流程部署名称:" + deployment.getName());
		  #完善-单个文件部署
		  RepositoryService repositoryService = processEngine.getRepositoryService();
		  InputStream inputStream_bpmn = this.getClass().getClassLoader().getResourceAsStream("diagram/holiday.bpmn");
          InputStream inputStream_png = this.getClass().getClassLoader().getResourceAsStream("diagram/holiday.png");
		  Deployment deployment = repositoryService.createDeployment().addInputStream("holiday.bpmn", inputStream_bpmn).addInputStream("holiday.png", inputStream_png).deploy();
		  #压缩包部署方式，将 .bpmn 和 .png 压缩成 zip 包
		  InputStream inputStream = this.getClass().getClassLoader().getResourceAsStream("diagram/holiday.zip");
		  ZipInputStream zipInputStream = new ZipInputStream(inputStream);
		  RepositoryService repositoryService = processEngine.getRepositoryService();
		  Deployment deployment = repositoryService.createDeployment().addZipInputStream(zipInputStream).deploy();
	      #结论：执行此操作后 activiti 会将上边代码中指定的 bpm 文件和图片文件保存在 activiti 数据库；
	      #操作的表
		   act_re_deployment #流程定义部署表
		   act_re_procdef #流程定义表
		   act_ge_bytearray #资源表
	  流程定义查询：
	      String processDefinitionKey = "holiday";
		  RepositoryService repositoryService = processEngine.getRepositoryService();
		  ProcessDefinitionQuery processDefinitionQuery = repositoryService.createProcessDefinitionQuery();
	      List<ProcessDefinition> list = processDefinitionQuery.processDefinitionKey(processDefinitionKey).orderByProcessDefinitionVersion().desc().list();
		  for (ProcessDefinition processDefinition : list) {
			  System.out.println(" 流 程 部 署 id ： " + processDefinition.getDeploymentId());
			  System.out.println("流程定义id：" + processDefinition.getId());
			  System.out.println("流程定义名称：" + processDefinition.getName());
			  System.out.println("流程定义key：" + processDefinition.getKey());
			  System.out.println("流程定义版本：" + processDefinition.getVersion());
		  }
	  流程定义删除：
		  String deploymentId = "8801";
          RepositoryService repositoryService = processEngine.getRepositoryService();
          //删除流程定义，如果该流程定义已有流程实例启动则删除时出错
          repositoryService.deleteDeployment(deploymentId);
          //设置true 级联删除流程定义，即使该流程有流程实例启动也可以删除，设置为false非级别删除方式，如果流程
		  //repositoryService.deleteDeployment(deploymentId, true)；
	  流程定义资源查询：
	      
	  启动一个流程实例：
		  RuntimeService runtimeService = processEngine.getRuntimeService();
		  ProcessInstance processInstance = runtimeService.startProcessInstanceByKey("holiday01");
		  System.out.println(" 流程定义 id ： " + processInstance.getProcessDefinitionId());
		  System.out.println("流程实例id：" + processInstance.getId());
		  System.out.println(" 当前活动 Id ： " + processInstance.getActivityId());
	  任务查询（查待办任务）：
		  #任务负责人
          String assignee = "zhangsan";
		  TaskService taskService = processEngine.getTaskService();
		  List<Task> list = taskService.createTaskQuery().processDefinitionKey("holiday01").taskAssignee(assignee).list();
		  for (Task task : list) {
				System.out.println(" 流 程 实 例 id ： " + task.getProcessInstanceId());
				System.out.println("任务id：" + task.getId());
				System.out.println("任务负责人：" + task.getAssignee());
				System.out.println("任务名称：" + task.getName());
          }
	  任务处理（完成任务）：
	      #任务id
		  String taskId = "8305";
          TaskService taskService = processEngine.getTaskService();
		  #完成任务
		  taskService.complete(taskId);

   



		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		   




		
	
	