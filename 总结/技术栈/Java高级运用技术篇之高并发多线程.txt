----------------------------------------------Java高级运用技术篇之高并发多线程-------------------------------------------------------------------------------------------------------		
	JAVA特性：
		封装性：为了数据的安全，避免用户直接接触到数据，增加程序的安全性。封装隐藏类的内部属性，并且对用户隐藏了数据的访问方式，这样可以保护类的内部状态。封装可以防止类中的方法访问属性，防止对象间的交互，提高Java程序的安全性。
		继承性：继承可以减少代码量，方法重写。
		多态性：三个必要条件是存在继承、重写、父类对象引用子类对象，如：Animal animal = new Cat()。	
	一、多线程JDK1.5以前版本，参考：https://www.runoob.com/java/java-multithreading.html
		基本概念：
			进程：一个进程包括由操作系统分配的内存空间，包含一个或多个线程。线程不能独立的存在，它必须是进程的一部分。一个进程一直运行，直到所有的非守护线程都结束运行后才能结束，多线程-多任务并发执行；
		作用：多线程能满足高效率的程序来达到充分利用CPU的目的；
		生命周期：线程是一个动态执行的过程，它也有一个从产生到死亡的过程；		
- ->使用new关键字和Thread类或其子类建立一个线程对象后	                                                                                  ---->执行run()方法					-->运行状态的线程最为复杂，它可以变为阻塞状态、就绪状态和死亡状态			
		---------------------------------------------->	新建状态 ----------------------------------------------------------->就绪状态 -------------------------------->运行状态 -------------------------------------------------------------------> 死亡状态
																 -->执行start()方法，就绪队列中，要等待JVM里线程调度器的调度		-->就绪状态的线程成功获取 CPU 资源			-->调用stop()或destory()函数强制终止
		
		名词解释：
			阻塞状态:如果一个线程执行了sleep（睡眠）、suspend（挂起）等方法，失去所占用CPU资源之后，该线程就从运行状态进入阻塞状态。可以分为三种：
				等待阻塞：运行状态中的线程执行 wait() 方法，使线程进入到等待阻塞状态
				同步阻塞：线程在获取synchronized同步锁失败(因为同步锁被其他线程占用)
				其他阻塞：通过调用线程的 sleep() 或 join() 发出了 I/O 请求时，线程就会进入到阻塞状态，当sleep() 状态超时，join() 等待线程终止或超时，或者 I/O 处理完毕，线程重新转入就绪状态
			死亡状态:一个运行状态的线程完成任务或者其他终止条件发生时，该线程就切换到终止状态		
		优先级：线程的优先级是一个整数，其取值范围是 1 （Thread.MIN_PRIORITY ） - 10 （Thread.MAX_PRIORITY ）
		创建线程的方法[4种]：
			通过继承 Thread 类本身，重写Run()方法，新建实例调用它的 start() 方法
			实例：
			class ThreadDemo1 extends Thread {
			   //关联关系，关联其他对象
			   public void run() {
					//业务逻辑
			   }			  
			}
			//使用
			new ThreadDemo1( "Thread-1").start();
			通过实现 Runnable 接口，重写Run()方法，新建实例调用它的 start() 方法
			实例：
			class ThreadDemo2 implements Runnable  {
			   //关联关系，关联其他对象
			   public void run() {
					//业务逻辑
			   }			  
			}
			//使用
			new ThreadDemo2( "Thread-2").start();
			通过 Callable 和 Future 接口创建线程，实现Callable接口，重写 call() 方法，创建 Callable 实现类的实例，使用 FutureTask 类来包装 Callable 对象，新建Thread实例（传入FutureTask对象）调用它的 start() 方法，注意与实现Runable的区别：多了一个接收的结果。
			案列说明：
			如：public class TestCallable {
					public static void main(String[] args) {
						ThreadDemo td = new ThreadDemo();		
						//1.执行 Callable 方式，需要 FutureTask实现类的支持，用于接收运算结果。
						FutureTask<Integer> result = new FutureTask<>(td);		
						new Thread(result).start();		
						//2.接收线程运算后的结果
						try {
							Integer sum = result.get();  //FutureTask可用于闭锁
							System.out.println(sum);
							System.out.println("------------------------------------");
						} catch (InterruptedException | ExecutionException e) {
							e.printStackTrace();
						}
					}
				}
				class ThreadDemo implements Callable<Integer>{
					@Override
					public Integer call() throws Exception {
						int sum = 0;		
						for (int i = 0; i <= 100000; i++) {
							sum += i;
						}		
						return sum;
					}	
				}	
			通过线程池来创建
			案列说明：
			public class TestThreadPool {				
					public static void main(String[] args) throws Exception {
						//1. 创建线程池，固定5个线程
						ExecutorService pool = Executors.newFixedThreadPool(5);						
						List<Future<Integer>> list = new ArrayList<>();						
						for (int i = 0; i < 10; i++) {
							Future<Integer> future = pool.submit(new Callable<Integer>(){
								@Override
								public Integer call() throws Exception {
									int sum = 0;									
									for (int i = 0; i <= 100; i++) {
										sum += i;
									}									
									return sum;
								}								
							});
							list.add(future);
						}
						//关闭线程池
						pool.shutdown();						
						for (Future<Integer> future : list) {
							System.out.println(future.get());//查看结果
						}																		
						/*ThreadPoolDemo tpd = new ThreadPoolDemo();						
						//2. 为线程池中的线程分配任务
						for (int i = 0; i < 10; i++) {
							pool.submit(tpd);
						}						
						//3. 关闭线程池
						pool.shutdown();*/
					}					
				//	new Thread(tpd).start();
				//	new Thread(tpd).start();
				}
				class ThreadPoolDemo implements Runnable{
					private int i = 0;					
					@Override
					public void run() {
						while(i <= 100){
							System.out.println(Thread.currentThread().getName() + " : " + i++);
						}
					}					
				}	
				public class TestScheduledThreadPool {
					public static void main(String[] args) throws Exception {
						ScheduledExecutorService pool = Executors.newScheduledThreadPool(5);						
						for (int i = 0; i < 5; i++) {
							Future<Integer> result = pool.schedule(new Callable<Integer>(){
								@Override
								public Integer call() throws Exception {
									int num = new Random().nextInt(100);//生成随机数
									System.out.println(Thread.currentThread().getName() + " : " + num);
									return num;
								}								
							}, 1, TimeUnit.SECONDS);							
							System.out.println(result.get());
						}
						//关闭线程池
						pool.shutdown();
					}					
				}			
		关键类：Thread
		接口：Runable
		主要方法：start()，run()，sleep()，destory()，setName()，setPriority()，setDaemon(true)，yield()（暂停）...
		关键字：synchronized，同步代码块，同步是一种高开销的操作，因此应该尽量减少同步的内容；
		线程死锁：
			含义：线程死锁是指两个或两个以上的线程互相持有对方所需要的资源，由于synchronized的特性，一个线程持有一个资源，
				  或者说获得一个锁，在该线程释放这个锁之前，其它线程是获取不到这个锁的，而且会一直死等下去，因此这便造成了死锁；
			产生条件：
				互斥条件：一个资源，或者说一个锁只能被一个线程所占用；
				占有且等待：一个线程已经获取到一个锁，再获取另一个锁的过程中，即使获取不到也不会释放已经获得的锁；
				不可剥夺条件：任何一个线程都无法强制获取别的线程已经占有的锁；
				循环等待条件：线程A拿着线程B的锁，线程B拿着线程A的锁；
		如何避免死锁：加锁顺序；加锁时限；
	二、JUC[java.utils.current]多线程高级JDK1.5以后版本。
		内存可见性：
			含义：当多个线程共享内存数据时，彼此不可见。
			解决办法：
				1、同步锁，使用synchronized关键字。但是缺点是效率低，加锁每次线程进来需要先判断锁的状态。
				2、使用volatile关键字。即当多个线程操作共享内存数据时，保证内存中的数据可见，相对于synchronized较为轻量级的同步策略。
				   但是它不能保证"互斥性"以及变量的"原子性"。		
			JVM线程原理：
													1线程一[main线程]、JVM分配一些缓存；读的是FLAG=false[变量不同步]
				假设主存[堆]一变量FLAG=false	--------------->
													1线程二、JVM分配一些缓存；写主存中的变量FLAG=true[在缓存中进行]
											<-------------------	
													2改主存变量值
				解决办法：
					加锁：synchronized锁，即每次线程进来需要先判断锁的状态是否符合条件，当符合条件才能拿到FLAG=true的值
					使用volatile关键字，原理大意如下：
													线程一[main线程]；读的是FLAG=true
				假设主存[堆]一变量FLAG=false	--------------->
													线程二；写主存中的变量FLAG=true[在主存中进行，实时刷新主存变量值]
													
				如：public class TestVolatile {	
						public static void main(String[] args) {
							ThreadDemo td = new ThreadDemo();
							new Thread(td).start();							
							while(true){//JVM底层支持优化
								if(td.isFlag()){
									System.out.println("------------------");
									break;
								}
							}							
						}
					}
					class ThreadDemo implements Runnable {
						private volatile boolean flag = false;
						@Override
						public void run() {							
							try {
								Thread.sleep(200);
							} catch (InterruptedException e) {
							}
							flag = true;							
							System.out.println("flag=" + isFlag());
						}
						public boolean isFlag() {
							return flag;
						}
						public void setFlag(boolean flag) {
							this.flag = flag;
						}
					}
		原子性问题：
			i++的操作在JVM底层实际上分三步“读-改-写”操作；这样多线程无法保证原子性问题；
			原子变量：JDK1.5后，java.utils.concurrent.atomic包下提供了常用的原子变量，如：AtomicInteger、AtomicBoolean等
					  特点：一、保证了内存可见性[volatile];二、CAS（Compare and Swap）算法保证了原子性；
					  CAS算法：硬件对并发操作共享数据的支持，包含三个操作数：
							   内存值V
							   预估值A
							   更新至B
							   当且仅当V==A，V=B，否则不进行任何操作；
			如：public class TestAtomicDemo {
					public static void main(String[] args) {
						AtomicDemo ad = new AtomicDemo();						
						for (int i = 0; i < 10; i++) {
							new Thread(ad).start();
						}
					}					
				}
				class AtomicDemo implements Runnable{					
				//	private volatile int serialNumber = 0;					
					private AtomicInteger serialNumber = new AtomicInteger(0);
					@Override
					public void run() {						
						try {
							Thread.sleep(200);
						} catch (InterruptedException e) {
						}						
						System.out.println(getSerialNumber());
					}					
					public int getSerialNumber(){
						return serialNumber.getAndIncrement();
					}										
				}
		ConcurrentHashMap：
			JDK1.5版本以前，主要容器类HashMap[是非synchronized，是线程不安全的]与HashTable[是synchronized，是线程安全的，表锁，多个线程可以共享一个Hashtable，效率低，串行]
			JDK1.5版本以后，提供了多种容器类，如：ConcurrentHashMap采用的是“锁分段”机制[concurrentLevel->Segment->链表，并行，是HashTable的替代]			
		CopyOnWriteArrayList/CopyOnWriteArraySet写入并复制，注意：添加操作多时，效率低，因为每次添加后都需要复制Copy，但适用于并发迭代效率高；
			如：public class TestCopyOnWriteArrayList {
					public static void main(String[] args) {
						HelloThread ht = new HelloThread();						
						for (int i = 0; i < 10; i++) {
							new Thread(ht).start();
						}
					}					
				}
				class HelloThread implements Runnable{					
				//	private static List<String> list = Collections.synchronizedList(new ArrayList<String>());					
					private static CopyOnWriteArrayList<String> list = new CopyOnWriteArrayList<>();					
					static{
						list.add("AA");
						list.add("BB");
						list.add("CC");
					}
					@Override
					public void run() {						
						Iterator<String> it = list.iterator();						
						while(it.hasNext()){
							System.out.println(it.next());							
							list.add("AA");
						}						
					}					
				}
		CountDownLatch[倒时计数思想]：闭锁-在完成某些运算时，只有当其他所有线程的运算全部完成时，当前运算才继续执行；主要方法有：countDown()、wait()
			如：public class TestCountDownLatch {
					public static void main(String[] args) {
						final CountDownLatch latch = new CountDownLatch(50);
						LatchDemo ld = new LatchDemo(latch);
						long start = System.currentTimeMillis();
						for (int i = 0; i < 50; i++) {
							new Thread(ld).start();
						}
						try {
							latch.await();
						} catch (InterruptedException e) {
						}
						long end = System.currentTimeMillis();
						System.out.println("耗费时间为：" + (end - start));
					}
				}
				class LatchDemo implements Runnable {
					//利用UML类图的聚合关系
					private CountDownLatch latch;
					public LatchDemo(CountDownLatch latch) {
						this.latch = latch;
					}
					@Override
					public void run() {
						try {
							for (int i = 0; i < 50000; i++) {
								if (i % 2 == 0) {
									System.out.println(i);
								}
							}
						} finally {
							latch.countDown();
						}
					}
				}
		Callable与FutureTask结合创建线程的方式：
			结论：FutureTask也可用于闭锁
			如：public class TestCallable {
					public static void main(String[] args) {
						ThreadDemo td = new ThreadDemo();		
						//1.执行 Callable 方式，需要 FutureTask 实现类的支持，用于接收运算结果。
						FutureTask<Integer> result = new FutureTask<>(td);		
						new Thread(result).start();		
						//2.接收线程运算后的结果
						try {
							Integer sum = result.get();  //FutureTask 可用于闭锁
							System.out.println(sum);
							System.out.println("------------------------------------");
						} catch (InterruptedException | ExecutionException e) {
							e.printStackTrace();
						}
					}
				}
				class ThreadDemo implements Callable<Integer>{
					@Override
					public Integer call() throws Exception {
						int sum = 0;		
						for (int i = 0; i <= 100000; i++) {
							sum += i;
						}		
						return sum;
					}	
				}			
		同步锁Lock:
			解决线程安全的方法：3种
				1）同步代码块，使用synchronized关键字，隐式锁
				2）同步方法，使用synchronized关键字，隐式锁
				3）JDK1.5以后使用同步锁Lock[ReenTrantLock]，显式锁，使用lock()上锁,unlock()释放锁[为确保这步执行，放在finally块执行]
			如：public class TestLock {
					public static void main(String[] args) {
						Ticket ticket = new Ticket();		
						new Thread(ticket, "1号窗口").start();
						new Thread(ticket, "2号窗口").start();
						new Thread(ticket, "3号窗口").start();
					}
				}
				class Ticket implements Runnable{	
					private int tick = 100;	
					private Lock lock = new ReentrantLock();
					@Override
					public void run() {
						while(true){							
							lock.lock(); //上锁							
							try{
								if(tick > 0){
									try {
										Thread.sleep(200);
									} catch (InterruptedException e) {
									}
									
									System.out.println(Thread.currentThread().getName() + " 完成售票，余票为：" + --tick);
								}
							}finally{
								lock.unlock(); //释放锁
							}
						}
					}					
				}
		“等待（wait）-唤醒（notifyAll）”机制：经典的生产者-消费者（PC）案例
			方式一：使用synchronized关键字实现，（Object）核心方法：this.wait()[注：为避免存在虚假唤醒问题，需要将此方法放在while循环语句内，JDK规定的]、this.notifyAll()
			如：public class TestProductorAndConsumer {
					public static void main(String[] args) {
						Clerk clerk = new Clerk();						
						Productor pro = new Productor(clerk);
						Consumer cus = new Consumer(clerk);						
						new Thread(pro, "生产者 A").start();
						new Thread(cus, "消费者 B").start();						
						new Thread(pro, "生产者 C").start();
						new Thread(cus, "消费者 D").start();
					}					
				}
				//店员
				class Clerk{
					private int product = 0;					
					//进货
					public synchronized void get(){//循环次数：0
						while(product >= 1){//为了避免虚假唤醒问题，应该总是使用在循环中
							System.out.println("产品已满！");							
							try {
								this.wait();//等待
							} catch (InterruptedException e) {
							}							
						}						
						System.out.println(Thread.currentThread().getName() + " : " + ++product);
						this.notifyAll();//唤醒
					}					
					//卖货
					public synchronized void sale(){//product = 0; 循环次数：0
						while(product <= 0){
							System.out.println("缺货！");							
							try {
								this.wait();//等待
							} catch (InterruptedException e) {
							}
						}						
						System.out.println(Thread.currentThread().getName() + " : " + --product);
						this.notifyAll();//唤醒
					}
				}
				//生产者
				class Productor implements Runnable{
					//使用UML类图的聚合关系
					private Clerk clerk;
					public Productor(Clerk clerk) {
						this.clerk = clerk;
					}
					@Override
					public void run() {
						for (int i = 0; i < 20; i++) {
							try {
								Thread.sleep(200);
							} catch (InterruptedException e) {
							}						
							clerk.get();
						}
					}
				}
				//消费者
				class Consumer implements Runnable{
					private Clerk clerk;
					public Consumer(Clerk clerk) {
						this.clerk = clerk;
					}
					@Override
					public void run() {
						for (int i = 0; i < 20; i++) {
							clerk.sale();
						}
					}
				}
			方式二：使用同步锁Lock利用Condition线程通讯，核心方法：condition.await()、condition.signalAll()
				如：public class TestProductorAndConsumerForLock {
						public static void main(String[] args) {
							Clerk clerk = new Clerk();
							Productor pro = new Productor(clerk);
							Consumer con = new Consumer(clerk);
							new Thread(pro, "生产者 A").start();
							new Thread(con, "消费者 B").start();
					//		 new Thread(pro, "生产者 C").start();
					//		 new Thread(con, "消费者 D").start();
						}
					}
					class Clerk {
						private int product = 0;
						private Lock lock = new ReentrantLock();//同步锁，闭锁
						private Condition condition = lock.newCondition();
						// 进货
						public void get() {
							lock.lock();//加锁
							try {
								if (product >= 1) {
									System.out.println("产品已满！");
									try {
										condition.await();
									} catch (InterruptedException e) {
									}
								}
								System.out.println(Thread.currentThread().getName() + " : "
										+ ++product);
								condition.signalAll();
							} finally {
								lock.unlock();//释放锁
							}
						}
						// 卖货
						public void sale() {
							lock.lock();
							try {
								if (product <= 0) {
									System.out.println("缺货！");
									try {
										condition.await();
									} catch (InterruptedException e) {
									}
								}
								System.out.println(Thread.currentThread().getName() + " : "
										+ --product);
								condition.signalAll();
							} finally {
								lock.unlock();
							}
						}
					}
					// 生产者
					class Productor implements Runnable {
						private Clerk clerk;
						public Productor(Clerk clerk) {
							this.clerk = clerk;
						}
						@Override
						public void run() {
							for (int i = 0; i < 20; i++) {
								try {
									Thread.sleep(200);
								} catch (InterruptedException e) {
									e.printStackTrace();
								}
								clerk.get();
							}
						}
					}
					// 消费者
					class Consumer implements Runnable {
						private Clerk clerk;
						public Consumer(Clerk clerk) {
							this.clerk = clerk;
						}
						@Override
						public void run() {
							for (int i = 0; i < 20; i++) {
								clerk.sale();
							}
						}
					}
		线程按序交替[案例]，技术点：使用的是同步锁Lock利用Condition线程通讯技术，
			需求：编写一个程序，开启 3 个线程，这三个线程的 ID 分别为 A、B、C，每个线程将自己的 ID 在屏幕上打印 10 遍，要求输出的结果必须按顺序显示。如：ABCABCABC…… 依次递归
			public class TestABCAlternate {				
				public static void main(String[] args) {
					AlternateDemo ad = new AlternateDemo();					
					new Thread(new Runnable() {
						@Override
						public void run() {						
							for (int i = 1; i <= 20; i++) {
								ad.loopA(i);
							}							
						}
					}, "A").start();					
					new Thread(new Runnable() {
						@Override
						public void run() {							
							for (int i = 1; i <= 20; i++) {
								ad.loopB(i);
							}							
						}
					}, "B").start();					
					new Thread(new Runnable() {
						@Override
						public void run() {							
							for (int i = 1; i <= 20; i++) {
								ad.loopC(i);								
								System.out.println("-----------------------------------");
							}							
						}
					}, "C").start();
				}
			}
			class AlternateDemo{				
				private int number = 1; //当前正在执行线程的标记				
				private Lock lock = new ReentrantLock();
				private Condition condition1 = lock.newCondition();
				private Condition condition2 = lock.newCondition();
				private Condition condition3 = lock.newCondition();				
				/**
				 * @param totalLoop : 循环第几轮
				 */
				public void loopA(int totalLoop){
					lock.lock();					
					try {
						//1. 判断
						if(number != 1){
							condition1.await();
						}						
						//2. 打印
						for (int i = 1; i <= 1; i++) {
							System.out.println(Thread.currentThread().getName() + "\t" + i + "\t" + totalLoop);
						}						
						//3. 唤醒
						number = 2;
						condition2.signal();
					} catch (Exception e) {
						e.printStackTrace();
					} finally {
						lock.unlock();
					}
				}				
				public void loopB(int totalLoop){
					lock.lock();					
					try {
						//1. 判断
						if(number != 2){
							condition2.await();
						}						
						//2. 打印
						for (int i = 1; i <= 1; i++) {
							System.out.println(Thread.currentThread().getName() + "\t" + i + "\t" + totalLoop);
						}						
						//3. 唤醒
						number = 3;
						condition3.signal();
					} catch (Exception e) {
						e.printStackTrace();
					} finally {
						lock.unlock();
					}
				}				
				public void loopC(int totalLoop){
					lock.lock();					
					try {
						//1. 判断
						if(number != 3){
							condition3.await();
						}						
						//2. 打印
						for (int i = 1; i <= 1; i++) {
							System.out.println(Thread.currentThread().getName() + "\t" + i + "\t" + totalLoop);
						}						
						//3. 唤醒
						number = 1;
						condition1.signal();
					} catch (Exception e) {
						e.printStackTrace();
					} finally {
						lock.unlock();
					}
				}				
			}
		ReadWriteLock[ReenTrantReadWriteLock]读写锁[相对JDK1.5以前的独占锁]：
			读写/写写：互斥，一个线程操作
			读读：不互斥，多个线程共享并发操作
			核心方法：reenTrantReadWriteLock.readLock()、reenTrantReadWriteLock.writeLock()
			如：public class TestReadWriteLock {
					public static void main(String[] args) {
						ReadWriteLockDemo rw = new ReadWriteLockDemo();						
						new Thread(new Runnable() {							
							@Override
							public void run() {
								rw.set((int)(Math.random() * 101));
							}
						}, "Write:").start();												
						for (int i = 0; i < 100; i++) {
							new Thread(new Runnable() {								
								@Override
								public void run() {
									rw.get();
								}
							}, "Read:").start();
						}
					}					
				}
				class ReadWriteLockDemo{					
					private int number = 0;					
					private ReadWriteLock lock = new ReentrantReadWriteLock();					
					//读
					public void get(){
						lock.readLock().lock(); //上锁						
						try{
							System.out.println(Thread.currentThread().getName() + " : " + number);
						}finally{
							lock.readLock().unlock(); //释放锁
						}
					}					
					//写
					public void set(int number){
						lock.writeLock().lock();						
						try{
							System.out.println(Thread.currentThread().getName());
							this.number = number;
						}finally{
							lock.writeLock().unlock();
						}
					}
				}
		线程八锁：
			核心：非静态方法的锁默认为this，静态方法的锁为对应的Class实例
				  某一时刻内，只能拥有一个线程持有锁，无论几个方法
		线程池：
			目的：为了避免频繁的创建和销毁线程是比较耗CPU资源的[参考数据库连接池]，提高了响应的速度。它提供了一个线程队列，队列中保留着所有等待[wait]状态中的线程。
			体系结构：
				java.utils.concurrent.Executor：负责线程的使用与调度的根接口
					|-- ExecutorService 子接口：线程池的主要接口
						|-- ThreadPoolExecutor：线程池的实现类
						|-- ScheduledExecutorService：负责线程的调度 子接口
							|-- ScheduledThreadPoolExecutor：继承了ThreadPoolExecutor，实现了ScheduledExecutorService
			工具类：Executors
				ExecutorService newFixedThreadPool()：创建固定大小的线程池
				ExecutorService newCachedThreadPool()：缓存线程池，线程池的数量不固定，可以根据需求自动更改数量。
				ExecutorService newSingleThreadExecutor()：创建单个线程池。线程池中只有一个线程
				ScheduledExecutorService newScheduledThreadPool()：创建固定大小的线程池，也可以延迟或定时执行任务。
			使用：1、创建线程池；2、为线程池中的线程分配任务（submit）；3、关闭线程池
			如：public class TestThreadPool {				
					public static void main(String[] args) throws Exception {
						//1. 创建线程池
						ExecutorService pool = Executors.newFixedThreadPool(5);						
						List<Future<Integer>> list = new ArrayList<>();						
						for (int i = 0; i < 10; i++) {
							Future<Integer> future = pool.submit(new Callable<Integer>(){
								@Override
								public Integer call() throws Exception {
									int sum = 0;									
									for (int i = 0; i <= 100; i++) {
										sum += i;
									}									
									return sum;
								}								
							});
							list.add(future);
						}						
						pool.shutdown();//关闭线程池						
						for (Future<Integer> future : list) {
							System.out.println(future.get());
						}																		
						/*ThreadPoolDemo tpd = new ThreadPoolDemo();						
						//2. 为线程池中的线程分配任务
						for (int i = 0; i < 10; i++) {
							pool.submit(tpd);
						}						
						//3. 关闭线程池
						pool.shutdown();*/
					}					
				//	new Thread(tpd).start();
				//	new Thread(tpd).start();
				}
				class ThreadPoolDemo implements Runnable{
					private int i = 0;					
					@Override
					public void run() {
						while(i <= 100){
							System.out.println(Thread.currentThread().getName() + " : " + i++);
						}
					}					
				}
				//线程池测试	
				public class TestScheduledThreadPool {
					public static void main(String[] args) throws Exception {
						ScheduledExecutorService pool = Executors.newScheduledThreadPool(5);						
						for (int i = 0; i < 5; i++) {
							Future<Integer> result = pool.schedule(new Callable<Integer>(){
								@Override
								public Integer call() throws Exception {
									int num = new Random().nextInt(100);//生成随机数
									System.out.println(Thread.currentThread().getName() + " : " + num);
									return num;
								}								
							}, 1, TimeUnit.SECONDS);							
							System.out.println(result.get());
						}						
						pool.shutdown();
					}					
				}
		ForkJoinPool分支/合并框架[工作窃取]：JDK1.7出现的
			思想：将一个大任务，拆分[fork]成若干个不可再拆分的小任务，这些小任务由线程队列并发的去执行[采用工作窃取模式]，最终将执行的结果进行汇总[join]
			JDK1.8新特性对ForkJoinPool框架进行了改进!
			如：public class TestForkJoinPool {					
					public static void main(String[] args) {
						Instant start = Instant.now();
						//JDK1.7出现的						
						ForkJoinPool pool = new ForkJoinPool();						
						ForkJoinTask<Long> task = new ForkJoinSumCalculate(0L, 50000000000L);						
						Long sum = pool.invoke(task);						
						System.out.println(sum);						
						Instant end = Instant.now();						
						System.out.println("耗费时间为：" + Duration.between(start, end).toMillis());//166-1996-10590
					}					
					@Test
					public void test1(){
						Instant start = Instant.now();						
						long sum = 0L;						
						for (long i = 0L; i <= 50000000000L; i++) {
							sum += i;
						}						
						System.out.println(sum);						
						Instant end = Instant.now();						
						System.out.println("耗费时间为：" + Duration.between(start, end).toMillis());//35-3142-15704
					}					
					//java8 新特性
					@Test
					public void test2(){
						Instant start = Instant.now();						
						Long sum = LongStream.rangeClosed(0L, 50000000000L)
											 .parallel()
											 .reduce(0L, Long::sum);						
						System.out.println(sum);						
						Instant end = Instant.now();						
						System.out.println("耗费时间为：" + Duration.between(start, end).toMillis());//1536-8118
					}
				}
				//计算类
				class ForkJoinSumCalculate extends RecursiveTask<Long>{
					private static final long serialVersionUID = -259195479995561737L;					
					private long start;
					private long end;					
					private static final long THURSHOLD = 10000L;  //临界值					
					public ForkJoinSumCalculate(long start, long end) {
						this.start = start;
						this.end = end;
					}
					@Override
					protected Long compute() {
						long length = end - start;						
						if(length <= THURSHOLD){
							long sum = 0L;							
							for (long i = start; i <= end; i++) {
								sum += i;
							}							
							return sum;
						}else{
							long middle = (start + end) / 2;							
							ForkJoinSumCalculate left = new ForkJoinSumCalculate(start, middle); 
							left.fork(); //进行拆分，同时压入线程队列							
							ForkJoinSumCalculate right = new ForkJoinSumCalculate(middle+1, end);
							right.fork(); //							
							return left.join() + right.join();
						}
					}					
				}