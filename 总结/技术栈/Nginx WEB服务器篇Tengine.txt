----------------------------------------------Nginx WEB服务器篇----------------------------------------------------------------------------------												
	一、基本介绍：参考：https://www.runoob.com/linux/nginx-install-setup.html
			含义：Nginx("engine x")是一款是由俄罗斯的程序设计师Igor Sysoev所开发高性能的Web和反向代理服务器，也是一个IMAP/POP3/SMTP邮件代理服务器。
				  在高连接并发的情况下，Nginx是Apache服务器不错的替代品，目前的版本有：稳定版、开发版和历史稳定版。业界使用其产品的公司如：腾讯、新浪等
			安装：
				下载地址: http://nginx.org/download/nginx-1.4.2.tar.gz				  
				yum install pcre pcre-devel									-nginx依赖于pcre库,要先安装pcre、pcre-devel
				cd /usr/local/src/
				wget http://nginx.org/download/nginx-1.4.2.tar.gz
				tar -zxvf nginx-1.4.2.tar.gz 								-解压
				cd nginx-1.4.2
				./configure --prefix=/usr/local/nginx						-配置安装路径
				make && make install 										-安装
			启动：
				目录结构：cd /usr/local/nginx，会看到：				
					conf 														-配置文件  
					html 														-网页文件
					logs  														-日志文件 
					sbin  														-主要二进制程序
				启动：./sbin/nginx
				注意：默认端口80，如果被占用，需要停止80端口所对应的程序或服务
					  1）查看端口：netstat -antp | grep 80                      -得到80端口对应的进程ID
					  2）暴力停止：Pkill -9 PID
			信号源控制：
				1）TERM、INT													-快速关闭
				2）QUIT 														-优雅的关闭进程,即等请求结束后再关闭
				3）HUP 															-改变了配置文件,平滑的重读配置文件（新配置替代旧配置）
				4）USR1 														-重读日志,在日志按月/日分割时有用
				5）USR2															-平滑的升级
				6）WINCH														-优雅关闭旧的进程(配合USR2来进行升级)
				具体语法:
					Kill -信号选项 nginx的PPID（主进程ID），如：Kill -HUP 4873
					Kill -信号控制 `cat [安装路径下]/logs/nginx.pid`，如：Kill -USR1 `cat [安装路径下]/logs/nginx.pid`		
		附[总结]：
		nginx常用指令：
			启动命令：[安装路径下]/usr/local/nginx/sbin/nginx
			停止命令：[安装路径下]/usr/local/nginx/sbin/nginx -s stop 强制关闭
					  [安装路径下]/usr/local/nginx/sbin/nginx -s quit 安全关闭
			重启命令：[安装路径下]/usr/local/nginx/sbin/nginx -s reload		  
			测试配置文件：[安装路径下]/usr/local/nginx/sbin/nginx -t
			检测是否出错：[安装路径下]/usr/local/nginx/sbin/nginx -c
			查看帮助：[安装路径下]/usr/local/nginx/sbin/nginx -h
			查看进程：ps -ef | grep nginx
			平滑重启：kill -HUP Nginx主进程号
		查看端口：
			netstat -antp |grep 80									-端口是否被占用
			ps -ef | grep 8081 										-进程
			top 			
	二、配置文件：					
			位置：/usr/local/nginx/conf/nginx.conf
			文件解析：
				全局区：
					#工作的子进程,可以自行修改,但太大无益,因为要争夺CPU,一般设置为 CPU数*核数
					worker_processes 1; 					
					#是否以守护进程开启
					daemon：默认on 可选值on/off					
					#是否主进程中开启多个子线程
					master_process：默认on 可选值on/off					
					#一般配置nginx连接的特性
					Event {					
					 #如1个worker能同时允许多少连接，如下指一个子进程最大允许连1024个连接
					 worker_connections  1024;
					}					
					#配置http服务器的主要段
					http { 
						 #日志
						 #access_log  logs/access.log  main;
						 #超时时间
						 keepalive_timeout 75;
						 #全局设置
						 location / {
							deny 192.168.1.2;						//拒绝指定客户端访问
							allow 192.168.1.3/300;					//允许指定客户端访问[IP段]
							denyall;
						 }						 
						 #虚拟主机段
						 Server1 {							   
								#定位,把特殊的路径或文件再次定位，如image目录单独处理；.php单独处理
								Location {
								}
								#解析超时
								resolver_timeout 30s;
						 }
						 Server2 {
						 }
					}					
					如：
						基于域名虚拟主机
						server {
							#监听端口  
							listen 80;
							#监听域名，需要域名映射，在hosts文件中添加映射；支持配置多个域名，使用空格隔开；
							server_name 1xuepai.com; 
							#定位,把特殊的路径或文件再次定位
							#日志
							#access_log  logs/host.access.log  main;
							location / {
									#根目录定位，绝对路径
									root /var/www/1xuepai.com; 
									#alias 别名
									index index.html;
							}
						}
						基于端口虚拟主机
						server {
							#监听端口
							listen 8080;
							#监听端口
							server_name 192.168.1.175;
							location / {
									#根目录定位，绝对路径
									root /var/www/html8080;
									index index.html;
							}
						}					
					日志管理：
						在nginx的http段与server段,都有类似信息#access_log信息;
						如在server段：#access_log logs/host.access.log  main说明该server段访问日志的文件是logs/host.access.log,
						使用的格式”main”格式。除了main格式，也可以自定义其他格式！						
					格式说明：
						main格式：
							log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
											  '$status $body_bytes_sent "$http_referer" '
											  '"$http_user_agent" "$http_x_forwarded_for"';
							main格式是默认定义好一种日志的格式,并起个名字，便于引用
							main类型的日志,记录的 remote_addr.... http_x_forwarded_for等选项
							1: 日志格式选项说明（以main格式为例）：											
									远程IP - 远程用户/用户时间 请求方法(GET/POST)
									请求状态 请求体body长度 referer来源信息
									http_user_agent用户代理/蜘蛛，被转发的请求的原始IP
									http_x_forwarded_for:在经过代理时,代理把本来IP加在此头信息中,传输你的原始IP
							2: 声明一个log_format并命名：
									log_format mylog '$remote_addr- "$request" '
													 '$status $body_bytes_sent "$http_referer" '
														'"$http_user_agent" "$http_x_forwarded_for"';						
							3：使用：
								如：在http/server/location,我们就可以引用 mylog自定义的日志格式
									Nginx允许针对不同的server做不同的Log ，(有的web服务器不支持,如lighttp)								
								声明log   	log位置         	 log格式;
								access_log logs/access_mylog.log  mylog;								
					案例：Shell编程+Crontab定时任务+nginx信号管理，完成日志按日期存储						
						  分析思路: 
							凌晨00:01,把昨天的日志重命名，放在相应的目录下，再USR1信息号控制nginx重新生成新的日志文件							
							脚本:
							编辑脚本vim logback.sh
							#!/bin/bash
							base_path='/usr/local/nginx/logs'
							log_path=$(date -d yesterday +"%Y%m")
							day=$(date -d yesterday +"%d")
							mkdir -p $base_path/$log_path
							mv $base_path/access.log $base_path/$log_path/access_$day.log
							#echo $base_path/$log_path/access_$day.log
							kill -USR1 `cat /usr/local/nginx/logs/nginx.pid`  -- 加载日志
							定时任务
							Crontab 编辑定时任务，crontab -e 
							01 00 * * * /xxx/path/logback.sh  每天0时1分(建议在02-04点之间,系统负载小)							
					定位Location管理[server段]：
						含义：location 有”定位”的意思, 根据Uri来进行不同的定位
							  在虚拟主机的配置中,是必不可少的,location可以把网站的不同部分,定位到不同的处理方式上，比如, 碰到.php，如何调用PHP解释器?就需要location						
						基础语法：
							#中括号可以不写任何参数,此时称为一般匹配，也可以写参数	
							location [=|~|~*|^~] patt {
							}							  						
							因此,大类型可以分为3种
							location patt{}  [一般匹配]
							location = patt {} [精准匹配]							
							location ~ patt{} [正则匹配]						
						Uri解析过程：						
							   先判断有没有精准匹配,如果有,则停止匹配过程，返回结果
							   #如果 $uri == patt,匹配成功，使用configA
							   location = patt {
									config A
							   }
							   如：
								  #精准匹配
								  location = / {
											root   /var/www/html/;
											index  index.htm index.html;
								  }	
								  #一般匹配
								  location / {
											root   /usr/local/nginx/html;
											index  index.html index.htm;
								  }
							说明：
								如果访问http://xxx.com/，定位流程是：								　
								1: 精准匹配中”/”,得到index页为index.htm，结束
								2: 再次访问http://xxx.com/index.htm,此次内部转跳uri已经是”/index.htm”,根目录为/usr/local/nginx/html								
								3: 最终结果,访问了/usr/local/nginx/html/index.htm							
							再来看，正则也来参与
								location / {
									root   /usr/local/nginx/html;
									index  index.html index.htm;
								}

								location ~ image {
									root /var/www/;
									index index.html;
								}
							说明：
								如果我们访问http://xx.com/image/logo.png
								此时，“/”与”/image/logo.png”匹配
								同时，”image”正则 与”image/logo.png”也能匹配,谁发挥作用?
								正则表达式的成果将会使用，图片真正会访问/var/www/image/logo.png 								
							再如：
								location / {
									root   /usr/local/nginx/html;
									index  index.html index.htm;
								} 
								location /foo {
									root /var/www/html;
									index index.html;
								}
							我们访问 http://xxx.com/foo
							对于uri“/foo”,两个location的patt,都能匹配，即 ‘/’能从左前缀匹配 ‘/foo’, ‘/foo’也能左前缀匹配’/foo’，							
							此时, 真正访问/var/www/html/index.html，原因:’/foo’匹配的更长,因此使用它
						结论：
							1）请求Uri，先判断是否有精准匹配，如果命中，返回结果并结束解析过程
							2）判断普通命中，如果多个命中，记录最长的命中结果，注意只是记录不结束，以最长的为准（与普通匹配顺序无关）
							3）判断正则匹配，按顺序从上到下匹配，只要有1个匹配，结束匹配过程并返回结果（与正则顺序有关）						
					重写rewrite：功能类似于location
						前提：Linux系统得安装pcre库（Perl Compatible Regular Expressions，pcre兼容正则表达式），安装pcre库是为了使Nginx支持HTTP Rewrite模块
						含义：该指令通过正则表达式的使用来改变URI.可以同时存在一个或者多个指令，按照顺序一次对URL进行匹配和处理
						位置：该指令在server块或server块内的location块中配置 
						相关指令：
							关键字：
								if  (条件) {}  #设定条件,再进行重写 
								set #设置变量
								return #返回状态码 
								break #跳出rewrite
								rewrite #重写
							语法格式：
							If 空格 (条件) {
								重写模式
							}
							说明：
								条件写法：3种
								1: “=”来判断相等, 用于字符串比较
								2: “~” 用正则来匹配(此处的正则区分大小写)， ~* 不区分大小写的正则								  
								3: -f -d -e来判断是否为文件,为目录,是否存在
							全局变量：
								$args							-请求URL中的请求参数，如：http://www.myweb.name/server/source?arg1=value1&arg2=value2中的arg1=value1&arg2=value2
								$content_length					-请求头中的Content_Length字段
								$content_type					-请求头中的Content_type字段
								$document_root					-请求的根路径
								$document_uri					-请求中的uri，不包括请求指令，如：http://www.myweb.name/server/source?arg1=value1&arg2=value2中的/server/source
								$host							-请求URL中的主机部分，如：http://www.myweb.name/server中的www.myweb.name，在nginx中server中的server_name配置项配置
								$http_user_agent				-客户端的代理信息（浏览器）
								$http_cookie					-客户端的cookie信息
								$limit_rate						-Nginx服务器对网络速率的限制，限速
								$remote_addr					-客户端地址
								$remote_port					-客户端与服务端连接的端口号
								$remote_user					-客户端用户
								$request_body_file        		-请求体本地资源文件名称
								$request_method					-请求方法，如：GET/POST
								$request_filename				-请求资源文件路径名	
								$request_uri					-请求中的uri，包括请求指令	
								$query_string					-与$args相同
								$scheme							-客户端请求使用的协议，如：HTTP、HTTPS、FTP协议
								$server_protocol         		-客户端请求协议的版本，如：HTTP/1.0、HTTP/1.1
								$server_addr					-服务器地址
								$server_name					-服务器名称
								$server_port					-服务器端口号
								$uri							-与$document_uri相同								
							例子:
								#客户端为100的禁止访问
								if  ($remote_addr = 192.168.1.100) {
									return 403;
								}
								#判断IE浏览器并重写
								if ($http_user_agent ~ MSIE) {
										rewrite ^.*$ /ie.htm;
										break; #不break会循环重定向
								}

								if (!-e $document_root$fastcgi_script_name) {
									rewrite ^.*$ /404.html break; #此处还要加break
								} 
								说明：
									以xx.com/dsafsd.html这个不存在页面为例，观察访问日志(tail logs/access.log), 日志中显示的访问路径,依然是GET /dsafsd.html HTTP/1.1						
									提示: 服务器内部的rewrite和302重定向跳转不一样，跳转的话URL都变了，变成重新http请求404.html，
										  而内部rewrite，上下文没变，就是说fastcgi_script_name（默认SCRIPT_FILENAME = $fastcgi_script_name）仍然是dsafsd.html，因此会循环重定向，所有需要break										 						
							set:设置变量，可以用来达到多条件判断时作标志用来达到apache下的rewrite_condition的效果							
								如下: 
								#判断浏览器并重写，且不用break
								if ($http_user_agent ~* msie) {
												set $isie 1;
								}
								if ($fastcgi_script_name = ie.html) {
									set $isie 0;
								}
								if ($isie 1) {
									rewrite ^.*$ ie.html;
								}							
						Rewrite语法：Rewrite 正则表达式  重定向后的位置					
						goods-3.html ---->goods.php?goods_id=3
						goods-([\d]+)\.html --->goods.php?goods_id =$1
						location /ecshop {						
							index index.php;
							rewrite goods-([\d]+)\.html$ /ecshop/goods.php?id=$1;
							rewrite category-(\d+)-b(\d+)\.html /ecshop/category.php?id=$1&brand=$2;					
						}
						#注意:用Url重写时, 正则里如果有”{}”,正则要用双引号""包起来						
					nginx + php 编译流程：	
						fastcgi含义：
							apache是把php当做自己的一个模块来启动的，而nginx则是把http请求变量转发给php进程，
							即php独立进程，与nginx进行通信称为fastcgi运行方式
						总结：	
							把请求的信息转发给默认9000端口的PHP进程，让PHP进程处理指定目录下的PHP文件					
							如下例子:
							location ~ \.php$ {
								root html;
								fastcgi_pass   127.0.0.1:9000;
								fastcgi_index  index.php;
								fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
								include        fastcgi_params;
							}
							说明：
								1: 碰到php文件
								2: 把根目录定位到html
								3: 把请求上下文转交给9000端口PHP进程
								4: 并告诉PHP进程，当前的脚本是 $document_root$fastcgi_script_name(注:PHP会去找这个脚本并处理)								
					网页压缩与传播速度优化：
						案例：
							观察网易新闻news.163.com的头信息
							请求:
							Accept-Encoding:gzip,deflate,sdch,br
							响应:
							Content-Encoding:gzip
							Content-Length:36093
							再把页面另存下来,观察,约10W字节,实际传输的36093字节,原因-就在于gzip压缩上							
							原理: 
							浏览器---请求---->声明可以接受gzip压缩或deflate压缩或compress或sdch压缩或br压缩
							从http协议的角度看---请求头声明acceopt-encoding: gzip deflate sdch br (是指压缩算法,其中sdch是google倡导的一种压缩方式,目前支持的服务器尚不多)
							服务器-->回应---把内容用gzip方式压缩---->发给浏览器
									浏览<-----解码gzip-----接收gzip压缩内容----
							推算一下节省的带宽:
							假设 news.163.com  PV（page view页面浏览量）  2亿
							2*10^8  *  9*10^4 字节 == 
							2*10^8 * 9 * 10^4  * 10^-9 = 12*K*G = 18T，节省的带宽是非常惊人的！						
						使用：
							位置：HTTP段
							参数说明：
								#gzip配置的参数
								gzip on|off  #是否开启gzip
								gzip_buffers 32 4K| 16 8K #缓冲(压缩在内存中缓冲几块? 每块多大?)
								gzip_comp_level [1-9] #推荐6 压缩级别(级别越高,压的越小,越浪费CPU计算资源)
								gzip_disable #正则匹配URI 什么样的Uri不进行gzip
								gzip_min_length 200 #开始压缩的最小长度(再小就不要压缩了,意义不在)
								gzip_http_version 1.0|1.1 #开始压缩的http协议版本(可以不设置,目前几乎全是1.1协议)
								gzip_proxied          #设置请求者代理服务器,该如何缓存内容
								gzip_types text/plain  application/xml #对哪些类型的文件用压缩 如txt,xml,html ,css
								gzip_vary on|off  #是否传输gzip压缩标志
								注意: 
								图片/mp3这样的二进制文件,不必压缩,因为压缩率比较小, 比如100->80字节,而且压缩也是耗费CPU资源的								
								比较小的文件不必压缩					
					Nginx缓存设置，提高网站的性能[缓存技术]：		
						介绍：对于网站的图片,尤其是新闻站, 图片一旦发布, 改动的可能是非常小的.希望能否在用户访问一次后,图片缓存在用户的浏览器端,且时间比较长的缓存，在nginx中用expires设置
						使用：在[虚拟主机]location或if段里来写
							  格式：  
							  expires 30s;
							  expires 30m;
							  expires 2h;
							  expires 30d;
							注意：服务器的日期要准确,如果服务器的日期落后于实际日期,可能导致缓存失效！  
							如：
							location  ^~ /imgs/ {
								root opt/wangjialuo/;
								expires 1d;									
							}					
						缓存另一种手段：利用304状态码
							304状态码：
							   如果客户端发送了一个带条件的GET请求且该请求已被允许，而文档的内容（自上次访问以来或者根据请求的条件）并没有改变，则服务器应当返回这个304状态码。
							   简单的表达就是：服务端已经执行了GET，但文件未变化！
							原理是: 服务器响应文件内容时同时响应etag标签(内容的签名,内容一变,它也变)和 last_modified_since 2个标签值
									浏览器下次去请求时,头信息发送这两个标签, 服务器检测文件有没有发生变化，如无，直接头信息返回 etag,last_modified_since
									浏览器知道内容无改变,于是直接调用本地缓存。这个过程,也请求了服务器,但是传着的内容极少。		
									对于变化周期较短的,如静态html,js,css,比较适于用这个方式！							
					Nginx反向代理与负载均衡：
						介绍：apache
							反向代理[动静分离]：nginx利用proxy实现，如：客户端发起一个PHP请求，Nginx服务器自己不处理，通过proxy_pass转发给其他服务器（如：apache）
												来处理，而且Nginx服务器只负责处理静态的数据
							负载均衡：nginx利用upstream实现，反向代理后端如果有多台服务器（如：多台apache）,自然形成负载均衡							
							问题：如何利用proxy_pass指向多台服务器?
							实现过程：把多台服务器用upstream指定绑定在一起并起个组名,然后proxy_pass指向该组；
							负载均衡流程：
																	upstream[指向组名]	     服务器1[组成员]
								客户端 ----------------> nginx ----------------------------> 服务器2[组成员]
																					         服务器3[组成员]
							负载均衡算法IRule：
								分类：区别于Java后台的SpringBoot技术栈的负载均衡
									1）轮询，默认的策略，如果server挂掉，能自动剔除
									2）加权，默认是1
									    如：									   
										upstream  1xuepai.com {   
											server   192.168.99.100:42000 weight=1; 
											server   192.168.99.100:42001 weight=2;  
										}
									3）最少链接数，把请求分配到连接数最少的server
										如：
										upstream  1xuepai.com {   
											least_conn;
											server   192.168.99.100:42000; 
											server   192.168.99.100:42001;  
										}
									4）IP_HASH一致性哈希，每个请求会按照访问ip的hash值分配，这样同一客户端连续的Web请求都会被分发到同一server进行处理，可以解决session共享的问题。如果server挂掉，能自动剔除
										如：
										upstream  1xuepai.com {   
											ip_hash;
											server   192.168.99.100:42000; 
											server   192.168.99.100:42001;  
										}
							位置：upstream配置在http段内，server段外；proxy_pass配置在server段内的location端里，即：server段与upstream端平级						
							示例：
								#这里域名要和下面proxy_pass的一样，且不能使用下划线，timeMachine不能写成time_machine
								#负载均衡池
								upstream  timeMachine.com {
									#fail_timeout：当该时间内服务器没响应，则认为服务器失效，默认10s
									#max_fails：允许连接失败次数，默认为1
									server    10.240.35.113:8081 weight=1 fail_timeout=3s max_fails=3;
									server    10.240.35.113:8082  weight=2 backup; # 备机
									server    10.240.35.113:8084 down; # down主机暂停服务
								}
								server { 								
									#keepalive_requests 120; # 单连接请求上限次数
									listen       8083; # 监听端口
									#监听地址，写ip地址或主机名、域名都可 
									server_name  10.240.35.113;								 
									#location块，请求的url过滤
									location / {   
										proxy_pass http://timeMachine.com;
										proxy_redirect default;
										#proxy_connect_timeout：与服务器连接的超时时间，默认60s
										proxy_connect_timeout 3s;
									}								 
									error_page   500 502 503 504  /50x.html; # 错误页
									location = /50x.html {
										root   html;
									}									
								}
								结论：等待时间 = proxy_connect_timeout + fail_timeout * max_fails					
					Nginx图片服务器：
						目的：为了缓存web服务器的访问压力，可以单独搭建文件服务器[图片、视频等]
						使用：
							在server段添加配置，如：
							location /images/ {
								root /var/www/nginx_imgs/	                #图片存放位置
							}							
	三、nginx与keepalived实现HA，可参考：https://www.jb51.net/article/142443.htm
			目的：高并发情况下为了考虑Nginx的单点故障，真正做到架构高可用性HA，实现nginx的故障转移，同时做好监控报警。
			keepalived定义：
				Keepalived是一个基于VRRP协议[Virtual Router Redundancy Protocol，即 虚拟路由冗余协议，是实现路由器高可用HA的容错协议]来实现的服务高可用方案，可以利用其来避免IP单点故障，
				类似的工具还有heartbeat、corosync、pacemaker。
				但是它一般不会单独出现，而是与其它负载均衡技术（如lvs、haproxy、nginx）一起工作来达到集群的高可用。
			原理流程：			
						keepalived[充当路由角色]										 服务器1
				客户端 ----------------------------> nginx[master] --------------------> 服务器2
						访问公共IP[虚拟IP]			 nginx[backup]						 服务器3
						
				注释：nginx[master]和 nginx[backup]都需要与keepalived建立绑定关系，当nginx[master]宕机后，会自动的切换
					  到nginx[backup]使用；当恢复nginx[master]后又重新切换回nginx[master]使用。			
			使用：
				示例：环境准备
					2台nginx[linux]服务器（如：192.168.1.129与192.168.1.130，nginx端口默认80）都安装好keepalived服务
					一个虚拟IP[公共IP] 192.168.1.131
					安装keepalived服务
						#准备下载好的keepalived安装包文件
						#解压并进入解压目录
						tar -zxvf keepalived-1.2.18.tar.gz
						cd keepalived-1.2.18
						#指定安装目录并安装
						./configure --prefix=/opt/keepalived
						make && make install
					将keepalived安装成Linux系统服务
						mkdir /etc/keepalived/
						cp /opt/keepalived/etc/rc.d/init.d/keepalived /etc/init.d/
						cp /opt/keepalived/etc/sysconfig/keepalived /etc/sysconfig/
						ln -s /opt/sbin/keepalived /usr/sbin/
						ln -s /opt/keepalived/sbin/keepalived /sbin/
				    设置keepalived服务开机启动
						chkconfig keepalived on					  
					keepalived目录结构：
						安装目录下有：
							bin		-genhash
							etc		-keepalived
												 -keepalived.conf[重点]
												 -samples
									-rc.d
												 -init.d
									-sysconfig
												 -keepalived
							sbin
							share					  
					同时修改安装路径下的keepalived.conf的配置与/etc/keepalived/keepalived.conf的配置[2台服务都要配置]
					配置信息如下：
						! Configuration File for keepalived (!、#都是注释)
					　　global_defs { #全局配置
					　　notification_email { #通知邮件，接收邮件
					　　　　acassen@firewall.loc
					　　　　failover@firewall.loc
					　　　　sysadmin@firewall.loc
					　　}
					　　notification_email_from Alexandre.Cassen@firewall.loc #发送邮件
					　　smtp_server 192.168.200.1 #发送邮件服务器IP
					　　smtp_connect_timeout 30 #发送邮件超时时间
					　　router_id LVS_01 #这个配置要唯一，一般配置成Linux的主机名hostname，可以在/etc/hosts里添加设置
					　　}
					　　vrrp_script chk_nginx {
					　　　　script "/etc/keepalived/nginx_check.sh" ## 检测 nginx 状态的脚本路径
					　　　　interval 2 ## 检测时间间隔
					　　　　weight -20 ## 如果条件成立，权重-20
					　　}
					　　vrrp_instance VI_1 { #实例 VI_1 名字可以随意 但是不建议修改
					　　　　state MASTER # 主服务器MASTER 从服务器 BACKUP
					　　　　interface em1 # em1 网卡，查看网卡：ifconfig 或 ip addr
					　　　　virtual_router_id 129 #virtual_router_id 主备要不一致，要与当前的机器IP保持一致
					　　　　mcast_src_ip 192.168.1.129 		#本机IP
							nopreempt 		#优先级高的异常恢复后抢占问题
							priority 100 　　# 优先级 数字越大优先级越高 priority 的值 主服务器要大于从服务器
					　　　　advert_int 1　　#设定MASTER与BACKUP负载均衡器之间同步检查的时间间隔，单位是秒
					　　　　authentication { # 主从通信验证类型及密码 
					　　　　　　auth_type PASS　　#设置vrrp验证类型，主要有PASS和AH两种
					　　　　　　auth_pass 1111　　#设置vrrp验证密码，在同一个vrrp_instance下，MASTER与BACKUP必须使用相同的密码才能正常通信
					　　　　}
					　　　　## 将track_script块加入instance配置块
					　　　　track_script {
					　　　　　　chk_nginx ## 执行 Nginx 监控的服务
					　　　　}
							## 虚拟IP[VIP]池
					　　　　virtual_ipaddress {
					　　　　192.168.1.131/135 #VRRP HA 虚拟IP地址 如果有多个VIP，继续换行填写
					　　　　}
					　　}
					编写Nginx状态检测脚本：vim /etc/keepalived/nginx_check.sh
					内容如下：
						#!/bin/bash
					　　A=`ps -C nginx –no-header |wc -l`
					　　if [ $A -eq 0 ];then
					　　　　/opt/nginx/sbin/nginx				#nginx安装目录
					　　　　sleep 2
					　　　　if [ `ps -C nginx --no-header |wc -l` -eq 0 ];then
					　　　　　　killall keepalived
					　　　　fi
					　　fi
					保存后，给脚本赋执行权限：chmod +x/etc/keepalived/nginx_check.sh
					注意点：Keepalived主从配置文件不同点
					　　1）router_id不一致
					　　2）state 主服务器是MASTER，从服务器是BACKUP
					　　3）priority 主服务器大于从服务器
					keepalived使用：
					　　启动： service keepalived start
					　　停止： service keepalived stop
					　　重启： service keepalived restart						
					测试：开启2台服务的nginx和keepalived服务，然后关闭任意一个nginx观察访问的
						  虚拟IP：192.168.1.131 所使用的的nginx服务是129的？还是130的？
	四、tengine淘宝服务器[nginx升级版]
		参考：https://blog.csdn.net/OpenStack_/article/details/85329419
		简介：
			Tengine是由淘宝网发起的Web服务器项目，它在Nginx的基础上，针对大访问量网站的需求，添加了很多高级功能和特性。
			Tengine的性能和稳定性已经在大型的网站如淘宝网，天猫商城等得到了很好的检验。它的最终目标是打造一个高效、稳定、安全、易用的Web平台。
		下载：
			http://tengine.taobao.org/download/tengine-2.3.2.tar.gz
		特性：
			Tengine完全兼容Nginx，因此可以参照Nginx的方式来配置Tengine；
			详细特性：
			1、动态加载模块（DSO）支持-不用重新编译Tengine，只支持HTTP模块；
			worker_processes  1;
			dso {
				load ngx_http_lua_module.so;
				load ngx_http_memcached_module.so;
			}
			events {
				worker_connections  1024;
			}
		    2、支持HTTP/2协议，HTTP/2模块替代SPDY模块；
			3、流式上传到HTTP后端服务器或FastCGI服务器，大量减少机器的I/O压力；
			4、更加强大的负载均衡能力，包括一致性hash模块、会话保持模块，还可以对后端的服务器进行主动健康检查，根据服务器状态自动上线下线，以及动态解析upstream中出现的域名；
			一致性hash模块：通过使用客户端信息(如：$ip, $uri, $args等变量)作为参数，使用一致性hash算法将客户端映射到后端机器，如果后端机器宕机，这请求会被迁移到其他机器；
							该模块可以根据配置参数采取不同的方式将请求均匀映射到后端机器，比如：
							consistent_hash $remote_addr：#可以根据客户端ip映射
							consistent_hash $request_uri： #根据客户端请求的uri映射
							consistent_hash $args：#根据客户端携带的参数进行映射
			如：http {
					upstream test {
						consistent_hash $request_uri;						
						server 127.0.0.1:9001 id=1001 weight=3;
						server 127.0.0.1:9002 id=1002 weight=10;
						server 127.0.0.1:9003 id=1003 weight=20;
					}
				}
			会话保持模块：负载均衡模块，通过cookie实现客户端与后端服务器的会话保持, 在一定条件下可以保证同一个客户端访问的都是同一个后端服务器；
			如：# 默认配置：cookie=route mode=insert fallback=on
				upstream foo {
				    server 192.168.0.1;
				    server 192.168.0.2;
				    session_sticky cookie=route mode=insert fallback=on;
				}				
				server {
				    location / {
				        proxy_pass http://foo;
				    }
				}
			对后端的服务器进行主动健康检查：
			如：http {
					upstream cluster1 {
						# simple round-robin
						server 192.168.0.1:80;
						server 192.168.0.2:80;
						check interval=3000 rise=2 fall=5 timeout=1000 type=http; #检测间隔时间、服务器DOWN次数、服务器UP次数、超时时间、类型
						check_http_send "HEAD / HTTP/1.0\r\n\r\n";#请求头添加
						check_http_expect_alive http_2xx http_3xx;#HTTP回复的成功状态
					}
					upstream cluster2 {
						server 192.168.0.3:80;
						server 192.168.0.4:80;
						check interval=3000 rise=2 fall=5 timeout=1000 type=http;
						check_keepalive_requests 100;
						check_http_send "HEAD / HTTP/1.1\r\nConnection: keep-alive\r\n\r\n";
						check_http_expect_alive http_2xx http_3xx;
					}
					server {
						listen 80;
						location /1 {
							proxy_pass http://cluster1;
						}
						location /2 {
							proxy_pass http://cluster2;
						}
						location /status {
							check_status;
							access_log  off;
							allow SOME.IP.ADD.RESS;
							deny all;
						}
					}
				}
			动态解析域名模块：
			upstream backend {
				dynamic_resolve fallback=stale fail_timeout=30s;
				server a.com;
				server b.com;
			}
			server {
				location / {
					proxy_pass http://backend;
				}
			}
			5、设置在后端失败时的重试次数；
			如：http {
				upstream test {
					server 127.0.0.1:8081;
					server 127.0.0.2:8081;
					server 127.0.0.3:8081;
					server 127.0.0.4:8081;
				}
				server {
					proxy_upstream_tries 2; #限制proxy代理的后端尝试次数
					proxy_set_header Host $host;					
					location / {
						proxy_pass test;
					}
				}
			}
			6、其他；