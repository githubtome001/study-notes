----------------------------------------------Spring Cloud Alibaba 技术篇----------------------------------------------------------------------------------------------------						  					 
	前沿：Spring Cloud Netflix项目进入维护模式，意味着不在开发新的组件与功能；2018年Spring Cloud Alibaba正式入驻Spring Cloud官方孵化器；
	官方地址：https://github.com/alibaba/spring-cloud-alibaba/blob/master/README-zh.md
	基本介绍：Spring Cloud Alibaba 致力于提供微服务开发的一站式解决方案，依托 Spring Cloud Alibaba，只需要添加一些注解和少量配置，就可以将 Spring Cloud 应用接入阿里微服务解决方案，
			  通过阿里中间件来迅速搭建分布式应用系统。
	组件：
		Sentinel：把流量作为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。
		Nacos：一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。
		RocketMQ：一款开源的分布式消息系统，基于高可用分布式集群技术，提供低延时的、高可靠的消息发布与订阅服务。
		Dubbo：Apache Dubbo™ 是一款高性能 Java RPC 框架。
		Seata：阿里巴巴开源产品，一个易于使用的高性能微服务分布式事务解决方案。
		Alibaba Cloud ACM：一款在分布式架构环境中对应用配置进行集中管理和推送的应用配置中心产品。
		Alibaba Cloud OSS: 阿里云对象存储服务（Object Storage Service，简称 OSS），是阿里云提供的海量、安全、低成本、高可靠的云存储服务。您可以在任何应用、任何时间、任何地点存储和访问任意类型的数据。
		Alibaba Cloud SchedulerX: 阿里中间件团队开发的一款分布式任务调度产品，提供秒级、精准、高可靠、高可用的定时（基于 Cron 表达式）任务调度服务。
		Alibaba Cloud SMS: 覆盖全球的短信服务，友好、高效、智能的互联化通讯能力，帮助企业迅速搭建客户触达通道。
    基本技术栈：
			  1、服务限流降级：默认支持 Servlet、Feign、RestTemplate、Dubbo 和 RocketMQ 限流降级功能的接入，可以在运行时通过控制台实时修改限流降级规则，还支持查看限流降级 Metrics 监控
			  2、服务注册与发现：适配 Spring Cloud 服务注册与发现标准，默认集成了 Ribbon 的支持
			  3、分布式配置管理：支持分布式系统中的外部化配置，配置更改时自动刷新
			  4、消息驱动能力：基于 Spring Cloud Stream 为微服务应用构建消息驱动能力
			  5、分布式事务：使用 @GlobalTransactional 注解， 高效并且对业务零侵入地解决分布式事务问题
			  6、阿里云对象存储：阿里云提供的海量、安全、低成本、高可靠的云存储服务。支持在任何应用、任何时间、任何地点存储和访问任意类型的数据
			  7、分布式任务调度：提供秒级、精准、高可靠、高可用的定时（基于 Cron 表达式）任务调度服务
			  8、阿里云短信服务：覆盖全球的短信服务，友好、高效、智能的互联化通讯能力，帮助企业迅速搭建客户触达通道					  
	1、服务注册与发现（配置中心、消息总线）
		-Nacos（= Spring Cloud Eureka + Spring Cloud Config + Spring Cloud Bus）：
				简介：Spring Cloud Alibaba 项目中开发分布式应用微服务的子组件，致力于服务发现、配置和管理微服务，基于 DNS 和基于 RPC 的服务发现。
				由来：前4个字母分别为Naming和Configuration的前两个字母，最后的s是Service。
				官方定义：一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。
				服务注册中心比较：
					服务注册与发现模型      CAP模型      控制台管理       社区活跃度
						Eureka               AP            支持             低（2.X版本闭源）
						Zookeeper            CP            不支持           中
						Consoul              CP            支持             高
						Nacos                AP            支持             高
				安装：
					前提：本地Java8 + Maven环境已经OK；下载：https://github.com/alibaba/nacos/releases/tag/1.1.4；解压并运行：bin/startup.cmd；访问：http://localhost:8848/nacos；默认用户名与密码：nacos
				关键特性：
					1、服务发现和服务健康监测；
					2、动态配置服务（通过 Nacos Server 和 spring-cloud-starter-alibaba-nacos-config 实现配置的动态变更）；
					3、动态DNS服务与服务及其元数据管理（通过 Nacos Server 和 spring-cloud-starter-alibaba-nacos-discovery 实现服务的注册与发现）
				官方文档：https://spring.io/projects/spring-cloud-alibaba；
				使用（服务注册与发现、提供方与消费方）：
				服务注册中心
				1,引用模块：POM.XML
					<!--Nacos的服务注册与发现模块-->
					<dependency>
						<groupId>org.springframework.cloud</groupId>
						<artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>
					</dependency>
					<!--监控-->
					<dependency>
						<groupId>org.springframework.boot</groupId>
						<artifactId>spring-boot-starter-actuator</artifactId>
					</dependency>
					<!--统一管理-->
					<dependencyManagement>
						<dependencies>
							<!--spring cloud Hoxton.SR1-->
							<dependency>
								<groupId>org.springframework.cloud</groupId>
								<artifactId>spring-cloud-dependencies</artifactId>
								<version>Hoxton.SR1</version>
								<type>pom</type>
								<scope>import</scope>
							</dependency>
							<!--Spring cloud alibaba 2.1.0.RELEASE-->
							<dependency>
								<groupId>com.alibaba.cloud</groupId>
								<artifactId>spring-cloud-alibaba-dependencies</artifactId>
								<version>2.1.0.RELEASE</version>
								<type>pom</type>
								<scope>import</scope>
							</dependency>
						</dependencies>
				</dependencyManagement>
				2,配置参数：application.properties或YML文件的配置
				格式：
					 spring:
						  application:
							name: 程序名，服务提供方或服务消费方
						  cloud:
							nacos:
							  discovery:
								server-addr: localhost:8848 # 服务IP与端口
									
									metadata: # 元数据管理
									  name1: healthy1 
									  name2: healthy2
					 management:  #开启监控
						  endpoints:
							web:
							  exposure:
								include: '*'
				3,申明使用：程序main入口，添加@EnableDiscoveryClient注解，开启服务治理与发现；
				说明：Nacos 底层支持负载均衡，即集成了Ribbon；所以在服务的消费方，可以直接使用RestTemplate API相关功能，只需注入容器即可使用；				
				如：@Configuration
					public class ApplicationContextConfig {
						@Bean
						@LoadBalanced
						public RestTemplate getRestTemplate() {
							return new RestTemplate();
						}
					}
				Nacos与cap：支持cp与ap的切换，说明：c所有节点看到的数据是一致的，a所有请求都有响应；AP支持的是注册临时实例；CP支持的是注册持久化实例；该模式下注册实例之前必须先注册服务，如果服务不存在，则会返回错误。
				切换指令：curl -X PUT `$NACOS_SERVER:8848/nacos/v1/ns/operator/switches?entry=serverMode&value=CP'；
				服务配置中心（动态配置，相当于SpringCloud Config + SpringCloud Config Bus）：
				基础篇：
				1,引用模块：POM.XML	
				<!-- nacos config-->
				<dependency>
					<groupId>com.alibaba.cloud</groupId>
					<artifactId>spring-cloud-starter-alibaba-nacos-config</artifactId>
				</dependency>
				<!-- SpringCloud ailibaba nacos-->
				<dependency>
					<groupId>com.alibaba.cloud</groupId>
					<artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>
				</dependency>
				<!--统一管理-->
				<dependencyManagement>
						<dependencies>
							<!--spring cloud Hoxton.SR1-->
							<dependency>
								<groupId>org.springframework.cloud</groupId>
								<artifactId>spring-cloud-dependencies</artifactId>
								<version>Hoxton.SR1</version>
								<type>pom</type>
								<scope>import</scope>
							</dependency>
							<!--Spring cloud alibaba 2.1.0.RELEASE-->
							<dependency>
								<groupId>com.alibaba.cloud</groupId>
								<artifactId>spring-cloud-alibaba-dependencies</artifactId>
								<version>2.1.0.RELEASE</version>
								<type>pom</type>
								<scope>import</scope>
							</dependency>
						</dependencies>
				</dependencyManagement>
				2,配置参数：创建bootstrap.yml或创建bootstrap.properties文件（系统级别）#先制定从服务配置中心拉取配置，再配application.yml或application.properties；
				格式:
				#bootstrap.yml
					server:
					  port: 3377
					spring:
					  application:
						name: nacos-config-client #客户端
					  cloud:
						nacos:
						  discovery:
							server-addr: localhost:8848 #Nacos服务注册中心地址
						  config:
							server-addr: localhost:8848 #Nacos作为配置中心地址
							file-extension: yaml #指定yaml格式配置，目前官网仅支持yaml和properties；
							group: TEST_GROUP #组
							namespace: 6fecc7ae-f02f-49ef-ace7-80d2f671df77 #命名空间
							#配置文件格式：
							#${prefix}-${spring.profile.active}.${file-extension}
							#${spring.application.name}-${spring.profile.active}.${file-extension}；即：#nacos-config-client-dev.yml
				#application.yml			
					spring:
					  profiles:
						active: dev #表示开发环境
				3,申明使用：程序main入口，添加@EnableDiscoveryClient注解，开启服务治理与发现；具体业务控制器添加@RefreshScope，让其支持Nacos的动态刷新功能（相当于Cloud + Bus）；
				4、Nacos添加配置信息：
					DataID：
						格式：${prefix}-${spring.profile.active}.${file-extension}；
						      prefix默认为spring.application.name的值；
							  spring.profile.active 即为当前环境对应的profile，可以通过配置项 spring.profile.active来配置；
							  file-exetension为配置内容的数据格式，可以通过配置项spring.cloud.nacos.config.file-extension来配置；
				5、测试：通过修改配置信息，已实现自动刷新；			  						
				6、多环境多项目管理:多个微服务项目、开发、生产、测试环境配置如何管理问题；
				   Namespace + Group + DataID 三者关系？为什么这么设计？
				   类似Java里面的package名和类名，namespace是可以用于区分部署环境的，用来隔离的，Group和DataID逻辑上区分两个目标对象。
				   默认情况：Namespace=public ，Group=DEFAULT_GROUP,默认Cluster是DEFAULT； 
				   DataID方案：
				      默认空间+默认分组+新建dev和test两个DataID；如：nacos-config-client-dev.yaml、nacos-config-client-test.yaml
				      即指定客户端spring.profile.active配置和配置文件的DataID来使不同环境下读取不同的配置；
				   Group方案：
					  通过组来区分环境，如：DEV_GROUP、TEST_GROUP下有nacos-config-client-info.yaml
					  即在bootstrap.yml中添加一行组的配置信息，如：group: TEST_GROUP #组
				   Namespace方案：
				      通过新建命名空间，如：DEV、TEST
					  即在bootstrap.yml中添加一行命名空间的配置信息，如：namespace: 6fecc7ae-f02f-49ef-ace7-80d2f671df77 #命名空间
				高级篇：	  
				Nacos集群与持久化配置：
					官网说明：
					    参考网址：https://nacos.io/zh-cn/docs/cluster-mode-quick-start.html
						架构设计：
							客户端	+	VIP （Nginx集群+ KeepAlived）    +    Nacos（IP1）、Nacos（IP2）、Nacos（IP3）  +  MySQL（集群）
					数据库说明：
					    默认Nacos支持的事嵌入式数据库实现数据的存储，如何配置多个Nacos节点，数据的存储一致性存在问题，为了解决这一问题，Nacos采用了集中式存储方式来支持集群部署，目前只支持MySQL存储；
					    Nacos支持3中部署模式：
							单机模式-用于测试与单机
							集群模式-用于生产确保高可用
							多集群模式-适用于多数据中心场景
					持久化配置：
						Nacos默认自带的是嵌入式数据库derby；
						切换到MySQL：（Windows版）
							1、在Nacos安装目录下找到conf/nacos-mysql.sql脚本文件并执行；
							2、在Nacos安装目录下找到conf/application.properties配置文件中，尾部添加如下配置：
							   spring.datasource.platform=mysql
							   db.num=1
							   db.url.0=jdbc:mysql://127.0.0.1:3306/nacos_config?characterEncoding=utf8&connectTimeout=1000&socketTimeout=3000&autoReconnect=true
							   db.user=root #用户名
							   db.password=root #密码
							3、启动Nacos，执行指令：./startup.cmd
						Linux版Nacos+MySQL生产环境配置：
							方案：1个Nginx+3个Nacos注册中心+1个MySQL
							步骤：
								1、安装Linux版的Nacos；
								2、集群配置：
									  a.在Nacos安装目录下找到conf/nacos-mysql.sql脚本文件并执行到MySQL；
								      b.在Nacos安装目录下找到conf/application.properties配置文件中添加数据库配置信息；
									  c.Nacos的集群配置，安装目录下找到conf/cluster.conf配置文件，添加如下配置：
										192.168.111.222：3333
										192.168.111.222：4444
										192.168.111.222：5555 #3个Nacos服务对外提供的服务IP与端口，IP使用用hostname -i指令获得；
									  d.编辑Nacos的启动脚本startup.sh，使它能够接受不同的启动端口，格式：./startup.sh -p 3333，即启动端口为3333的Nacos服务；
									    编辑文件：
											找到 while getops ":m:f:s:" opt 改成 while getops ":m:f:s:p:" opt
									        添加配置：
												p)
												   PORT=$OPTARG;;
											找到 nohup $JAVA ${JAVA_OPT} nacos.nacos >> 改成 nohup -Dserver.port=${PORT} $JAVA ${JAVA_OPT} nacos.nacos >> 
									  e.Nginx的配置，负载均衡：
											#指定配置文件nginx.conf 启动；./nginx -C 指定路径/nginx.conf；
											#配置信息
											upstream cluster{
												192.168.111.222：3333
												192.168.111.222：4444
												192.168.111.222：5555
											}
											server{
												listen:1111;
												server_name:localhost;
												
												location / {
													#root html;
													#index index.html index.htm;
													proxy_pass:http://cluster;
												}
												
											}
								3、测试：测试客户端注册到Nacos中，客户端添加配置信息：spring.cloud.nacos.discovery.server-addr=192.168.111.222:1111 # VIP做了代理处理；											
	2、服务的熔断与降级：
		 -Sentinel：
			介绍：随着微服务的流行，服务和服务之间的稳定性变得越来越重要。Sentinel 作为流量防卫组件，以流量为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。
			特征：
				 1、丰富的应用场景：Sentinel 承接了阿里巴巴近 10 年的双十一大促流量的核心场景，例如秒杀（即突发流量控制在系统容量可以承受的范围）、消息削峰填谷、集群流量控制、实时熔断下游不可用应用等
				 2、完备的实时监控
				 3、广泛的开源生态：Sentinel 提供开箱即用的与其它开源框架/库的整合模块，例如与 Spring Cloud、Dubbo、gRPC 的整合
				 4、完善的 SPI（串行外设接口） 扩展点：Sentinel 提供简单易用、完善的 SPI 扩展接口。可以通过实现扩展接口来快速地定制逻辑。例如定制规则管理、适配动态数据源等。
			组成：
				 核心库（Java 客户端）
				 控制台（Dashboard）		
				 使用：		
					 1、部署Sentinel Dashboard	
						下载地址：https://github.com/alibaba/Sentinel/releases
						启动(默认端口：8080)：
						java -jar sentinel-dashboard-1.6.0.jar
						java -jar -Dserver.port=8888 sentinel-dashboard-1.6.0.jar
						默认用户名密码：sentinel					
					 2、核心库的配置使用：
						1,引用模块：POM.XML	
						<!--Sentinel依赖-->
						<dependency>
							<groupId>org.springframework.cloud</groupId>
							  <artifactId>spring-cloud-starter-alibaba-sentinel</artifactId>
						</dependency>
						<!--Nacos存储扩展-->
						<dependency>
							<groupId>org.springframework.cloud</groupId>
							<artifactId>sentinel-datasource-nacos</artifactId>
						</dependency>
						<!--统一管理-->
						<dependencyManagement>
							<dependencies>
									<dependency>
										<groupId>org.springframework.cloud</groupId>
										<artifactId>spring-cloud-dependencies</artifactId>
										<version>Greenwich.RELEASE</version>
										<type>pom</type>
										<scope>import</scope>
									</dependency>
									<dependency>
										<groupId>org.springframework.cloud</groupId>
										<artifactId>spring-cloud-alibaba-dependencies</artifactId>
										<version>0.2.2.RELEASE</version>
										<type>pom</type>
										<scope>import</scope>
									</dependency>
							</dependencies>
						</dependencyManagement>
						2,配置参数：创建bootstrap.yml或创建bootstrap.properties文件
						格式：
							spring:
							  application:
								name: nacos-discovery-sentinel
							  cloud:
								sentinel:
								  transport:
									dashboard: localhost:8888 #Sentinel Dashboard服务端地址 
								  datasource:
									ds:
									  nacos:
										server-addr: localhost:8848 #nacos服务地址
										dataId: ${spring.application.name}
										groupId: DEFAULT_GROUP
										ruleType: flow
							server:
							  port: 9095
						3、申明使用：访问sentinel服务列表并限流；通过nacos配置流控规则；
						   # 注意
							 Sentinel控制台中修改规则：仅存在于服务的内存中，不会修改Nacos中的配置值，重启后恢复原来的值。
							 Nacos控制台中修改规则：服务的内存中规则会更新，Nacos中持久化规则也会更新，重启后依然保持。
						4、优点:
								1、sentinel配置变动后通知非常的迅速, 秒杀springcloud原来的config几条街,
								   毕竟原来的config是基于git, 不提供可视化界面, 动态变更还需要依赖bus来通过所有的客户端变化；
								2、与hystrix相比，sentinel更加的轻量级,并且支持动态的限流调整,更加友好的界面ui。