----------------------------------------------Spring Cloud Alibaba 技术篇----------------------------------------------------------------------------------------------------						  					 
	前沿：Spring Cloud Netflix项目进入维护模式，意味着不在开发新的组件与功能；2018年Spring Cloud Alibaba正式入驻Spring Cloud官方孵化器；
	官方地址：https://github.com/alibaba/spring-cloud-alibaba/blob/master/README-zh.md
	基本介绍：Spring Cloud Alibaba 致力于提供微服务开发的一站式解决方案，依托 Spring Cloud Alibaba，只需要添加一些注解和少量配置，就可以将 Spring Cloud 应用接入阿里微服务解决方案，
			  通过阿里中间件来迅速搭建分布式应用系统。
	组件：
		Sentinel：把流量作为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。
		Nacos：一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。
		RocketMQ：一款开源的分布式消息系统，基于高可用分布式集群技术，提供低延时的、高可靠的消息发布与订阅服务。
		Dubbo：Apache Dubbo™ 是一款高性能 Java RPC 框架。
		Seata：阿里巴巴开源产品，一个易于使用的高性能微服务分布式事务解决方案。
		Alibaba Cloud ACM：一款在分布式架构环境中对应用配置进行集中管理和推送的应用配置中心产品。
		Alibaba Cloud OSS: 阿里云对象存储服务（Object Storage Service，简称 OSS），是阿里云提供的海量、安全、低成本、高可靠的云存储服务。您可以在任何应用、任何时间、任何地点存储和访问任意类型的数据。
		Alibaba Cloud SchedulerX: 阿里中间件团队开发的一款分布式任务调度产品，提供秒级、精准、高可靠、高可用的定时（基于 Cron 表达式）任务调度服务。
		Alibaba Cloud SMS: 覆盖全球的短信服务，友好、高效、智能的互联化通讯能力，帮助企业迅速搭建客户触达通道。
    基本技术栈：
			  1、服务限流降级：默认支持 Servlet、Feign、RestTemplate、Dubbo 和 RocketMQ 限流降级功能的接入，可以在运行时通过控制台实时修改限流降级规则，还支持查看限流降级 Metrics 监控
			  2、服务注册与发现：适配 Spring Cloud 服务注册与发现标准，默认集成了 Ribbon 的支持
			  3、分布式配置管理：支持分布式系统中的外部化配置，配置更改时自动刷新
			  4、消息驱动能力：基于 Spring Cloud Stream 为微服务应用构建消息驱动能力
			  5、分布式事务：使用 @GlobalTransactional 注解， 高效并且对业务零侵入地解决分布式事务问题
			  6、阿里云对象存储：阿里云提供的海量、安全、低成本、高可靠的云存储服务。支持在任何应用、任何时间、任何地点存储和访问任意类型的数据
			  7、分布式任务调度：提供秒级、精准、高可靠、高可用的定时（基于 Cron 表达式）任务调度服务
			  8、阿里云短信服务：覆盖全球的短信服务，友好、高效、智能的互联化通讯能力，帮助企业迅速搭建客户触达通道					  
	1、服务注册与发现（配置中心、消息总线）
		-Nacos（= Spring Cloud Eureka + Spring Cloud Config + Spring Cloud Bus）：
				简介：Spring Cloud Alibaba 项目中开发分布式应用微服务的子组件，致力于服务发现、配置和管理微服务，基于 DNS 和基于 RPC 的服务发现。
				由来：前4个字母分别为Naming和Configuration的前两个字母，最后的s是Service。
				官方定义：一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。
				服务注册中心比较：
					服务注册与发现模型      CAP模型      控制台管理       社区活跃度
						Eureka               AP            支持             低（2.X版本闭源）
						Zookeeper            CP            不支持           中
						Consoul              CP            支持             高
						Nacos                AP            支持             高
				安装：
					前提：本地Java8 + Maven环境已经OK；下载：https://github.com/alibaba/nacos/releases/tag/1.1.4；解压并运行：bin/startup.cmd；访问：http://localhost:8848/nacos；默认用户名与密码：nacos
				关键特性：
					1、服务发现和服务健康监测；
					2、动态配置服务（通过 Nacos Server 和 spring-cloud-starter-alibaba-nacos-config 实现配置的动态变更）；
					3、动态DNS服务与服务及其元数据管理（通过 Nacos Server 和 spring-cloud-starter-alibaba-nacos-discovery 实现服务的注册与发现）
				官方文档：https://spring.io/projects/spring-cloud-alibaba；
				使用（服务注册与发现、提供方与消费方）：
				服务注册中心
				1,引用模块：POM.XML
					<!--Nacos的服务注册与发现模块-->
					<dependency>
						<groupId>org.springframework.cloud</groupId>
						<artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>
					</dependency>
					<!--监控-->
					<dependency>
						<groupId>org.springframework.boot</groupId>
						<artifactId>spring-boot-starter-actuator</artifactId>
					</dependency>
					<!--统一管理-->
					<dependencyManagement>
						<dependencies>
							<!--spring cloud Hoxton.SR1-->
							<dependency>
								<groupId>org.springframework.cloud</groupId>
								<artifactId>spring-cloud-dependencies</artifactId>
								<version>Hoxton.SR1</version>
								<type>pom</type>
								<scope>import</scope>
							</dependency>
							<!--Spring cloud alibaba 2.1.0.RELEASE-->
							<dependency>
								<groupId>com.alibaba.cloud</groupId>
								<artifactId>spring-cloud-alibaba-dependencies</artifactId>
								<version>2.1.0.RELEASE</version>
								<type>pom</type>
								<scope>import</scope>
							</dependency>
						</dependencies>
				</dependencyManagement>
				2,配置参数：application.properties或YML文件的配置
				格式：
					 spring:
						  application:
							name: 程序名，服务提供方或服务消费方
						  cloud:
							nacos:
							  discovery:
								server-addr: localhost:8848 # 服务IP与端口
									
									metadata: # 元数据管理
									  name1: healthy1 
									  name2: healthy2
					 management:  #开启监控
						  endpoints:
							web:
							  exposure:
								include: '*'
				3,申明使用：程序main入口，添加@EnableDiscoveryClient注解，开启服务治理与发现；
				说明：Nacos 底层支持负载均衡，即集成了Ribbon；所以在服务的消费方，可以直接使用RestTemplate API相关功能，只需注入容器即可使用；				
				如：@Configuration
					public class ApplicationContextConfig {
						@Bean
						@LoadBalanced
						public RestTemplate getRestTemplate() {
							return new RestTemplate();
						}
					}
				Nacos与cap：支持cp与ap的切换，说明：c所有节点看到的数据是一致的，a所有请求都有响应；AP支持的是注册临时实例；CP支持的是注册持久化实例；该模式下注册实例之前必须先注册服务，如果服务不存在，则会返回错误。
				切换指令：curl -X PUT `$NACOS_SERVER:8848/nacos/v1/ns/operator/switches?entry=serverMode&value=CP'；
				服务配置中心（动态配置，相当于SpringCloud Config + SpringCloud Config Bus）：
				基础篇：
				1,引用模块：POM.XML	
				<!-- nacos config-->
				<dependency>
					<groupId>com.alibaba.cloud</groupId>
					<artifactId>spring-cloud-starter-alibaba-nacos-config</artifactId>
				</dependency>
				<!-- SpringCloud ailibaba nacos-->
				<dependency>
					<groupId>com.alibaba.cloud</groupId>
					<artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>
				</dependency>
				<!--统一管理-->
				<dependencyManagement>
						<dependencies>
							<!--spring cloud Hoxton.SR1-->
							<dependency>
								<groupId>org.springframework.cloud</groupId>
								<artifactId>spring-cloud-dependencies</artifactId>
								<version>Hoxton.SR1</version>
								<type>pom</type>
								<scope>import</scope>
							</dependency>
							<!--Spring cloud alibaba 2.1.0.RELEASE-->
							<dependency>
								<groupId>com.alibaba.cloud</groupId>
								<artifactId>spring-cloud-alibaba-dependencies</artifactId>
								<version>2.1.0.RELEASE</version>
								<type>pom</type>
								<scope>import</scope>
							</dependency>
						</dependencies>
				</dependencyManagement>
				2,配置参数：创建bootstrap.yml或创建bootstrap.properties文件（系统级别）#先制定从服务配置中心拉取配置，再配application.yml或application.properties；
				格式:
				#bootstrap.yml
					server:
					  port: 3377
					spring:
					  application:
						name: nacos-config-client #客户端
					  cloud:
						nacos:
						  discovery:
							server-addr: localhost:8848 #Nacos服务注册中心地址
						  config:
							server-addr: localhost:8848 #Nacos作为配置中心地址
							file-extension: yaml #指定yaml格式配置，目前官网仅支持yaml和properties；
							group: TEST_GROUP #组
							namespace: 6fecc7ae-f02f-49ef-ace7-80d2f671df77 #命名空间
							#配置文件格式：
							#${prefix}-${spring.profile.active}.${file-extension}
							#${spring.application.name}-${spring.profile.active}.${file-extension}；即：#nacos-config-client-dev.yml
				#application.yml			
					spring:
					  profiles:
						active: dev #表示开发环境
				3,申明使用：程序main入口，添加@EnableDiscoveryClient注解，开启服务治理与发现；具体业务控制器添加@RefreshScope，让其支持Nacos的动态刷新功能（相当于Cloud + Bus）；
				4、Nacos添加配置信息：
					DataID：
						格式：${prefix}-${spring.profile.active}.${file-extension}；
						      prefix默认为spring.application.name的值；
							  spring.profile.active 即为当前环境对应的profile，可以通过配置项 spring.profile.active来配置；
							  file-exetension为配置内容的数据格式，可以通过配置项spring.cloud.nacos.config.file-extension来配置；
				5、测试：通过修改配置信息，已实现自动刷新；			  						
				6、多环境多项目管理:多个微服务项目、开发、生产、测试环境配置如何管理问题；
				   Namespace + Group + DataID 三者关系？为什么这么设计？
				   类似Java里面的package名和类名，namespace是可以用于区分部署环境的，用来隔离的，Group和DataID逻辑上区分两个目标对象。
				   默认情况：Namespace=public ，Group=DEFAULT_GROUP,默认Cluster是DEFAULT； 
				   DataID方案：
				      默认空间+默认分组+新建dev和test两个DataID；如：nacos-config-client-dev.yaml、nacos-config-client-test.yaml
				      即指定客户端spring.profile.active配置和配置文件的DataID来使不同环境下读取不同的配置；
				   Group方案：
					  通过组来区分环境，如：DEV_GROUP、TEST_GROUP下有nacos-config-client-info.yaml
					  即在bootstrap.yml中添加一行组的配置信息，如：group: TEST_GROUP #组
				   Namespace方案：
				      通过新建命名空间，如：DEV、TEST
					  即在bootstrap.yml中添加一行命名空间的配置信息，如：namespace: 6fecc7ae-f02f-49ef-ace7-80d2f671df77 #命名空间
				高级篇：	  
				Nacos集群与持久化配置：
					官网说明：
					    参考网址：https://nacos.io/zh-cn/docs/cluster-mode-quick-start.html
						架构设计：
							客户端	+	VIP （Nginx集群+ KeepAlived）    +    Nacos（IP1）、Nacos（IP2）、Nacos（IP3）  +  MySQL（集群）
					数据库说明：
					    默认Nacos支持的事嵌入式数据库实现数据的存储，如何配置多个Nacos节点，数据的存储一致性存在问题，为了解决这一问题，Nacos采用了集中式存储方式来支持集群部署，目前只支持MySQL存储；
					    Nacos支持3中部署模式：
							单机模式-用于测试与单机
							集群模式-用于生产确保高可用
							多集群模式-适用于多数据中心场景
					持久化配置：
						Nacos默认自带的是嵌入式数据库derby；
						切换到MySQL：（Windows版）
							1、在Nacos安装目录下找到conf/nacos-mysql.sql脚本文件并执行；
							2、在Nacos安装目录下找到conf/application.properties配置文件中，尾部添加如下配置：
							   spring.datasource.platform=mysql
							   db.num=1
							   db.url.0=jdbc:mysql://127.0.0.1:3306/nacos_config?characterEncoding=utf8&connectTimeout=1000&socketTimeout=3000&autoReconnect=true
							   db.user=root #用户名
							   db.password=root #密码
							3、启动Nacos，执行指令：./startup.cmd
						Linux版Nacos+MySQL生产环境配置：
							方案：1个Nginx+3个Nacos注册中心+1个MySQL
							步骤：
								1、安装Linux版的Nacos；
								2、集群配置：
									  a.在Nacos安装目录下找到conf/nacos-mysql.sql脚本文件并执行到MySQL；
								      b.在Nacos安装目录下找到conf/application.properties配置文件中添加数据库配置信息；
									  c.Nacos的集群配置，安装目录下找到conf/cluster.conf配置文件，添加如下配置：
										192.168.111.222：3333
										192.168.111.222：4444
										192.168.111.222：5555 #3个Nacos服务对外提供的服务IP与端口，IP使用用hostname -i指令获得；
									  d.编辑Nacos的启动脚本startup.sh，使它能够接受不同的启动端口，格式：./startup.sh -p 3333，即启动端口为3333的Nacos服务；
									    编辑文件：
											找到 while getops ":m:f:s:" opt 改成 while getops ":m:f:s:p:" opt
									        添加配置：
												p)
												   PORT=$OPTARG;;
											找到 nohup $JAVA ${JAVA_OPT} nacos.nacos >> 改成 nohup -Dserver.port=${PORT} $JAVA ${JAVA_OPT} nacos.nacos >> 
									  e.Nginx的配置，负载均衡：
											#指定配置文件nginx.conf 启动；./nginx -C 指定路径/nginx.conf；
											#配置信息
											upstream cluster{
												192.168.111.222：3333
												192.168.111.222：4444
												192.168.111.222：5555
											}
											server{
												listen:1111;
												server_name:localhost;
												
												location / {
													#root html;
													#index index.html index.htm;
													proxy_pass:http://cluster;
												}
												
											}
								3、测试：测试客户端注册到Nacos中，客户端添加配置信息：spring.cloud.nacos.discovery.server-addr=192.168.111.222:1111 # VIP做了代理处理；											
	2、服务的熔断与降级：
		 -Sentinel（Hystrix）：
			官网：http://github.com/alibaba/Sentinel
			介绍：随着微服务的流行，服务和服务之间的稳定性变得越来越重要。Sentinel 作为流量防卫组件，以流量为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。
			处理问题：服务雪崩、服务降级、服务熔断、服务限流
			特征：
				 1、丰富的应用场景：Sentinel 承接了阿里巴巴近 10 年的双十一大促流量的核心场景，例如秒杀（即突发流量控制在系统容量可以承受的范围）、消息削峰填谷、集群流量控制、实时熔断下游不可用应用等
				 2、完备的实时监控
				 3、广泛的开源生态：Sentinel 提供开箱即用的与其它开源框架/库的整合模块，例如与 Spring Cloud、Dubbo、gRPC 的整合
				 4、完善的 SPI（串行外设接口） 扩展点：Sentinel 提供简单易用、完善的 SPI 扩展接口。可以通过实现扩展接口来快速地定制逻辑。例如定制规则管理、适配动态数据源等。
			组成：
				 核心库（Java 客户端）
				 控制台（Dashboard）、默认端口为:8080		
				 使用：		
					 1、部署Sentinel Dashboard	
						下载地址：https://github.com/alibaba/Sentinel/releases
						启动(默认端口：8080)：
						java -jar sentinel-dashboard-1.6.0.jar
						java -jar -Dserver.port=8888 sentinel-dashboard-1.6.0.jar
						默认用户名密码：sentinel					
					 2、核心库的配置使用：
						1,引用模块：POM.XML	
						<!-- SpringCloud ailibaba nacos-->
						<dependency>
							<groupId>com.alibaba.cloud</groupId>
							<artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>
						</dependency>
						<!-- SpringCloud ailibaba sentinel-datasource-nacos 持久化需要用到-->
						<dependency>
							<groupId>com.alibaba.csp</groupId>
							<artifactId>sentinel-datasource-nacos</artifactId>
						</dependency>
						<!-- SpringCloud ailibaba sentinel-->
						<dependency>
							<groupId>com.alibaba.cloud</groupId>
							<artifactId>spring-cloud-starter-alibaba-sentinel</artifactId>
						</dependency>
						<!--统一管理-->
						<dependencyManagement>
							<dependencies>
								<!--spring cloud Hoxton.SR1-->
								<dependency>
									<groupId>org.springframework.cloud</groupId>
									<artifactId>spring-cloud-dependencies</artifactId>
									<version>Hoxton.SR1</version>
									<type>pom</type>
									<scope>import</scope>
								</dependency>
								<!--Spring cloud alibaba 2.1.0.RELEASE-->
								<dependency>
									<groupId>com.alibaba.cloud</groupId>
									<artifactId>spring-cloud-alibaba-dependencies</artifactId>
									<version>2.1.0.RELEASE</version>
									<type>pom</type>
									<scope>import</scope>
								</dependency>
							</dependencies>
						</dependencyManagement>
						2,配置参数：创建bootstrap.yml或创建bootstrap.properties文件
						格式：
						    server:
								port: 8401
							spring:
							  application:
								name: cloudalibaba-sentinal-service
							  cloud:
								nacos:
								  discovery:
									#Nacos服务注册中心地址
									server-addr: localhost:8848
								sentinel:
								  transport:
									#配置Sentin dashboard地址
									dashboard: localhost:8080
									# 默认8719端口，假如被占用了会自动从8719端口+1进行扫描，直到找到未被占用的端口
									port: 8719
								  datasource: #规则持久化
									ds1:
									  nacos:
										server-addr: localhost:8848
										dataId: cloudalibaba-sentinel-service
										groupId: DEFAULT_GROUP
										data-type: json
										rule-type: flow
							management: #监控
							  endpoints:
								web:
								  exposure:
									include: '*'
							feign:
							  sentinel:
								enabled: true #激活Sentinel对Feign的支持								
						3、申明使用：入口处添加注解@EnableDiscoveryClient，开发服务的注册发现；
						4、Sentinel Dashboard 功能基本说明：						
						   结论：Sentinel采用的懒加载，说明服务只有调用一次后才有监控效果；
						   功能点：实时监控、簇点链路、流控规则、降级规则、热点规则、系统规则、授权规则、集群流控、机器列表
						   流控规则：
						       基本介绍：
								   资源名：唯一名称，默认请求路径；
								   针对来源：默认default，可以填服务名，对调用者进行限流；
								   阈值类型/单机阈值
									   QPS：每秒钟请求数量，当调用达到阈值，进行限流；
									   线程数：当调用的API线程数达到阈值，进行限流；
								   是否集群：不需要集群
								   流控模式：
									   直接：当API调用达到限流条件，直接限流；
									   关联：当关联的资源达到限流条件，限流自己；
									   链路：只记录指定链路上的流量（指定资源从入口资源进来的流量，达到阈值，进行限流）、API级别的针对来源；
								   流控效果：
									   快速失败：直接失败、抛异常；
									   Warm Up：预热，根据codeFactor（冷加载因子的值，默认3）从阈值/codeFactor，经过预热时长，才能达到设置的QPS阈值；
									   排队等待：匀速排队，严格控制请求通过的间隔时间；阈值类型为QPS；
							   流控模式：
								   直接：默认， 直接-> 快速失败，默认；达到限流执行，给出默认限流提示：Blocked by Sentinel （flow limiting） 
								   关联：当与A关联的资源B达到阈值后，就限流A自己；即B惹事，A挂了；QPS类型；
								   链路：
							   流控效果：
							       快速失败：直接-> 快速失败（默认的流控处理）；
								   Warm Up：预热，限流冷启动；使用场景：秒杀场景瞬间会有很多流量，会把系统打死，预热的目的把系统保护起来，慢慢把流量放进来，慢慢带达到阈值；
								   排队等待：匀速排队，严格控制请求通过的间隔时间；阈值类型为QPS；
						   降级规则：
							   降级策略：
								RT：平均响应时间，秒级，平均响应时间（如：1min）超过阈值RT（如：200ms）且时间窗口内超过的请求QPS>=5，两个条件同时满足触发降级，窗口期过后关闭断路器；RT最大4900；
									通过-Dcsp.sentinel.statistic.max。rt=xxx配置
								异常比例：秒级，QPS>=5且执行异常比例（如：int age = 10/0）超过阈值（如：0.2）触发降级，窗口期过后关闭降级；异常比例的阈值在0-1之间；
								异常数：分钟级，异常数超过阈值（如：设置成5）触发降级，窗口期过后关闭降级；时间窗口必须大于或等于60；如：执行结果调用5次都是失败，进入PAGE页面，下一次就不进入错误页面，直接熔断降级；
							   Sentinel的断路器是没有半开状态的，半开的状态，系统会自动检测是否请求有异常，没有异常就关闭断路器恢复使用，有异常则继续打开断路器不可用；  
                           热点规则：
						       热点key限流：官网：https://github.com/alibaba/Sentinel/wiki/%E7%83%AD%E7%82%B9%E5%8F%82%E6%95%B0%E9%99%90%E6%B5%81；
							   兜底方法：系统默认与用户自定义，像Blocked by Sentinel （flow limiting）系统默认，自定义：@SentinelResource 进行降级处理；
								   如：
								   @GetMapping("/testHotKey")
								   //@SentinelResource(value = "testHotKey") //Sentinel的默认提示都是： Blocked by Sentinel (flow limiting)；
								   @SentinelResource(value = "testHotKey",blockHandler = "deal_testHotKey")
								   public String testHotKey(@RequestParam(value = "p1",required = false)String p1,@RequestParam(value = "p2",required = false)String p2) {														 
										return "testHotKey";
								   }
								   #兜底方法，假设QPS=1，参数索引设0，则第一个参数只要QPS超过每秒1次，马上降级处理；
								   public String deal_testHotKey(String p1, String p2, BlockException exception) {
										return "testHotKey, o(╥﹏╥)o";
								   }
						       #Sentinel配置热点规则：资源名，限流模式仅支持QPS，参数索引，单机阈值，统计窗口时长，是否集群...；
							   #访问：http://localhost:8401/testHotKey?p1=1；
						       参数例外项：
								   描述：当超过1秒钟一个后，达到阈值1后马上被限流，若期望p1参数当它是某一个特殊值时，它的限流值和平时不一样，则配置参数例外项；
								   前提条件：热点参数的注意点，参数必须为基本类型或者String；
								   注意：@SentinelResource主管配置违规，走兜底方法；运行异常走运行异常；
						   系统规则：
							   含义：系统保护规则从应用级别的入口流量进行控制，是应用整体维度的，不是资源维度的；仅对入口流量生效，支持以下几种模式：
									 load自适应：对Linux/Unix机器生效，一般设置为CPU核数*2.5
									 CPU利用率：
									 平均RT：
									 并发线程数：
									 入口QPS：
						   @SentinelResource详细说明：
							   按资源名称限流：如下
									@GetMapping("/byResource")
									@SentinelResource(value = "byResource",blockHandler = "handleException")
									public CommonResult byResource() {
										return  new CommonResult(200,"按照资源名称限流测试",new Payment(2020L,"serial001"));
									}
									public CommonResult handleException(BlockException exception) {
										return  new CommonResult(444,exception.getClass().getCanonicalName() + "\t 服务不可用");
									}
							   Sentinel流控规则配置：资源名：byResource；
							   按照Url地址限流：如下   
								   @GetMapping("/rateLimit/byUrl")
								   @SentinelResource(value = "byUrl")
								   public CommonResult byUrl() {
										return  new CommonResult(200,"按照byUrl限流测试",new Payment(2020L,"serial002"));
								   }
							   Sentinel流控规则配置：资源名：/rateLimit/byUrl；
						   兜底方法面临问题：
							   系统默认，与业务代码耦合，导致代码膨胀，需要全局统一处理；
						   用户自定义限流处理逻辑：如下
							   @GetMapping("/rateLimit/customerBlockHandler")
							   @SentinelResource(value = "customerBlockHandler",blockHandlerClass = CustomerBlockHandler.class,blockHandler = "handlerException1")									
							   public CommonResult customerBlockHandler() {
								return  new CommonResult(200,"按照客户自定义限流测试",new Payment(2020L,"serial003"));
							   }
							   #自定义限流处理
							   public class CustomerBlockHandler {
									public static CommonResult handlerException1(BlockException exception) {
										return  new CommonResult(444,"按照客户自定义的Glogal 全局异常处理1",new Payment(2020L,"serial003"));
									}
									public static CommonResult handlerException2(BlockException exception) {
										return  new CommonResult(444,"按照客户自定义的Glogal 全局异常处理2",new Payment(2020L,"serial003"));
									}
							   }
						   服务熔断功能：
							   Ribbon系列：
								  服务提供者：
									  1、引入依赖POM.XML
									   <!-- SpringCloud ailibaba nacos-->
										<dependency>
											<groupId>com.alibaba.cloud</groupId>
											<artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>
										</dependency>
										<!-- SpringCloud ailibaba sentinel-->
										<dependency>
											<groupId>com.alibaba.cloud</groupId>
											<artifactId>spring-cloud-starter-alibaba-sentinel</artifactId>
										</dependency>
										<dependency>
									   2、application.yml的配置
									   server:
										  port: 9003
										spring:
										  application:
											name: nacos-payment-provider
										  cloud:
											nacos:
											  discovery:
												server-addr: localhost:8848
										management: #监控
										  endpoints:
											web:
											  exposure:
												include: '*'
									   3、入口添加注解@EnableDiscoveryClient；
									   4、业务类
									   @RestController
										public class PaymentController {
											@Value("${server.port}")
											private  String serverPort;
											public static HashMap<Long, Payment > map = new HashMap<>();
											static {
												map.put(1L,new Payment(1L,"1111"));
												map.put(2L,new Payment(2L,"2222"));
												map.put(3L,new Payment(3L,"3333"));
											}
											@GetMapping(value = "/paymentSQL/{id}")
											public CommonResult<Payment> paymentSQL(@PathVariable("id") Long id) {
												Payment payment = map.get(id);
												CommonResult<Payment> result = new CommonResult<>(200,"from mysql,serverPort: " + serverPort,payment);
												return result;
											}
										}
								  服务消费者：
							           1、引入依赖POM.XML（同提供者）
									   2、application.yml的配置
									   server:
										  port: 84
										spring:
										  application:
											name: nacos-order-consumer
										  cloud:
											nacos:
											  discovery:
												server-addr: localhost:8848
											sentinel:
											  transport:
												dashboard: localhost:8080
												port: 8719
										#消费者将去访问的微服务名称
										server-url:
										  nacos-user-service: http://nacos-payment-provider
										#激活Sentinel对Feign的支持
										feign:
										  sentinel:
											enabled: true
										3、入口添加注解@EnableDiscoveryClient；
										4、配置类将RestTemplate注入容器；
										@Configuration
										public class ApplicationContextConfig {
											@Bean
											@LoadBalanced
											public RestTemplate getRestTemplate() {
												return new RestTemplate();
											}
										}
										5、业务类
										@RestController
										@Slf4j
										public class CircleBreakerController {
											public static  final  String SERVICE_URL = "http://nacos-payment-provider";
											@Resource
											private RestTemplate restTemplate;
											@RequestMapping("/consumer/fallback/{id}")
										//  @SentinelResource(value = "fallback")
										//  @SentinelResource(value = "fallback",fallback ="handlerFallback")
										//  fallback管运行异常，blockHandler管配置违规，都配blockHandler起作用
											@SentinelResource(value = "fallback",fallback ="handlerFallback",blockHandler = "blockHandler") 
											public CommonResult<Payment> fallback(@PathVariable Long id) {
												CommonResult<Payment> result = restTemplate.getForObject(SERVICE_URL + "/paymentSQL/" + id,CommonResult.class,id);
												if(id == 4){
													throw new IllegalArgumentException("IllegalArgument ,非法参数异常...");
												}else if(result.getData() == null) {
													throw new NullPointerException("NullPointerException,该ID没有对应记录，空指针异常");
												}
												return  result;
											}
											public CommonResult handlerFallback(@PathVariable Long id,Throwable e) {
												Payment payment = new Payment(id,"null");
												return new CommonResult(444,"异常handlerFallback，exception内容： " + e.getMessage(), payment);
											}
											public CommonResult blockHandler(@PathVariable Long id,BlockException e) {
												Payment payment = new Payment(id,"null");
												return new CommonResult(444,"blockHandler-sentinel 限流，BlockException： " + e.getMessage(), payment);
											}
											//OpenFeign
											@Resource
											private PaymentService paymentService;
											@GetMapping(value = "/consumer/paymentSQL/{id}")
											public CommonResult<Payment> paymentSQL(@PathVariable("id") Long id){
												return paymentService.paymentSQL(id);
											}
										}
										6、Feign 接口声明
										@FeignClient(value = "nacos-payment-provider",fallback = PaymentFallbackService.class)
										public interface PaymentService {
											@GetMapping(value = "/paymentSQL/{id}")
											public CommonResult< Payment > paymentSQL(@PathVariable("id") Long id);

										}
										#兜底降级处理
										@Component
										public class PaymentFallbackService implements PaymentService{
											@Override
											public CommonResult< Payment > paymentSQL(Long id) {
												return new CommonResult<>(444,"服务降级返回，PaymentFallbackService",new Payment(id,"ErrorSerial"));
											}
										}
							   Feign系列：
								  1、引入依赖POM.XML，对OpenFeign的支持；
								  2、application.yml的配置，服务端口，Sentinel对Feign支持等；
								  3、入口添加注解@EnableFeignClients；
						   Sentinel规则持久化：
							  问题：一旦重启应用，Sentinel规则将消失，生产环境需要将配置规则进行持久化；
							  方案：将限流配置规则持久化进Nacos保存即可；
							  使用：
								  1、引入依赖POM.XML
								  <dependency>
									<groupId>com.alibaba.csp</groupId>
									<artifactId>sentinel-datasource-nacos</artifactId>
								  </dependency>
								  2、application.yml的配置
								    server:
										port: 8401
									spring:
									  application:
										name: cloudalibaba-sentinal-service
									  cloud:
										nacos:
										  discovery:
											#Nacos服务注册中心地址
											server-addr: localhost:8848
										sentinel:
										  transport:
											#配置Sentin dashboard地址
											dashboard: localhost:8080
											# 默认8719端口，假如被占用了会自动从8719端口+1进行扫描，直到找到未被占用的端口
											port: 8719
										  datasource: #规则持久化
											ds1: #数据源
											  nacos:
												server-addr: localhost:8848
												dataId: cloudalibaba-sentinel-service
												groupId: DEFAULT_GROUP
												data-type: json
												rule-type: flow #流控规则
							      3、Nacos添加配置规则：结构如下
								     [
										{
											"resource": "/rateLimit/byUrl", #资源名称
											"limitApp": "default", #来源应用
											"grade": 1, #阈值类型，0线程数，1QPS
											"count": 1, #单机阈值
											"strategy": 0, #流控模式，0直接，1关联，2链路
											"controlBehavior": 0, #流控效果，0快速失败，1Warm Up，2排队等待
											"clusterMode": false #是否集群
										}
									]									 
						   # 注意
							 Sentinel控制台中修改规则：仅存在于服务的内存中，重启后丢失配置，Nacos控制台中修改规则：服务的内存中规则会更新，Nacos中持久化规则也会更新，重启后依然保持。							 
						5、优点:
								1、sentinel配置变动后通知非常的迅速吗，秒杀springcloud原来的config几条街，
								   毕竟原来的config是基于git，不提供可视化界面，动态变更还需要依赖bus来通知所有的客户端变化；
								2、与hystrix相比，sentinel更加的轻量级,并且支持动态的限流调整，更加友好的界面ui。
	3、分布式事务处理：							
								
								
								
								
								
								
								
								
								
								
								
								
								
								
								
								
								
								
								
								
								
								
								
								
								