----------------------------------------------Java高级运用技术篇之泛型-------------------------------------------------------------------------------------------------------				
	泛型，参考：https://blog.csdn.net/tyrroo/article/details/80930938
		含义：
			泛型，即“参数化类型”。顾名思义，就是将类型由原来的具体的类型参数化，类似于方法中的变量参数，此时类型也定义成参数形式（可以称之为类型形参），然后在使用/调用时传入具体的类型（类型实参）。
				  这种参数类型可以用在类、接口和方法中，分别被称为泛型类、泛型接口、泛型方法。在面向对象编程及各种设计模式中有非常广泛的应用。
		特性：
			泛型只在编译阶段有效，在编译过程中，正确检验泛型结果后，会将泛型的相关信息给出，并且在对象进入和离开方法的边界处添加类型检查和类型转换的方法。
			也就是说，泛型信息不会进入到运行时阶段。对此总结成一句话：泛型类型在逻辑上看以看成是多个不同的类型，实际上都是相同的基本类型。
		使用：
			三种使用方式，分别为：泛型类、泛型接口、泛型方法
			1）泛型类-泛型类用于类的定义中，被称为泛型类。最典型的就是各种容器类，如：List、Set、Map。
			   基本语法：				
					class 类名称 <泛型标识：可以随便写任意标识号，指定泛型类型>{
						private 泛型标识 /*（成员变量类型）*/ var; 
						.....				 
						}
					}
				举例：
					//此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型，在实例化泛型类时，必须指定T的具体类型
					public class Generic<T>{ 
						//key这个成员变量的类型为T,T的类型由外部指定  
						private T key;
						//泛型构造方法形参key的类型也为T，T的类型由外部指定
						public Generic(T key) { 
							this.key = key;
						}
						//泛型方法getKey的返回值类型为T，T的类型由外部指定
						public T getKey(){ 
							return key;
						}
					}
					
					调用：
					//传入的实参类型需与泛型的类型参数类型相同，即为Integer.泛型的类型参数只能是类类型（包括自定义类），不能是简单类型
					Generic<Integer> genericInteger = new Generic<Integer>(123456);					 					
					Generic<String> genericString = new Generic<String>("key_vlaue");
					Log.d("泛型测试","key is " + genericInteger.getKey());
					Log.d("泛型测试","key is " + genericString.getKey());
					思考：定义的泛型类，就一定要传入泛型类型实参么？在使用泛型的时候如果传入泛型实参，则会根据传入的泛型实参做相应的限制，此时泛型才会起到限制作用。
					      如果不传入泛型类型实参的话，在泛型类中使用泛型的方法或成员变量定义的类型可以为任何的类型。如：
						  Generic generic1 = new Generic("111111");
						  Generic generic2 = new Generic(4444);
						  Log.d("泛型测试","key is " + generic1.getKey());
						  Log.d("泛型测试","key is " + generic2.getKey());
					结论：泛型的类型参数只能是类类型，不能是简单类型；不能对确切的泛型类型使用instanceof操作，编译时会出错；如：
						  if(ex_num instanceof Generic<Number>){   
						  } 
			2）泛型接口-泛型接口与泛型类的定义及使用基本相同。泛型接口常被用在各种类的生产器中
					举例：
					//定义一个泛型接口
					public interface Generator<T> {
						public T next();
					}
					当实现泛型接口的类，未传入泛型实参时：
					/**
					 * 未传入泛型实参时，与泛型类的定义相同，在声明类的时候，需将泛型的声明也一起加到类中
					 * 即：class FruitGenerator<T> implements Generator<T>{
					 * 如果不声明泛型，如：class FruitGenerator implements Generator<T>，编译器会报错："Unknown class"
					 */
					class FruitGenerator<T> implements Generator<T>{
						@Override
						public T next() {
							return null;
						}
					}
					//当实现泛型接口的类，传入泛型实参时：
					/**
					 * 传入泛型实参时：
					 * 定义一个生产器实现这个接口,虽然我们只创建了一个泛型接口Generator<T>，但是我们可以为T传入无数个实参，形成无数种类型的Generator接口。
					 * 在实现类实现泛型接口时，如已将泛型类型传入实参类型，则所有使用泛型的地方都要替换成传入的实参类型
					 * 即：Generator<T>，public T next();中的的T都要替换成传入的String类型
					 */
					public class FruitGenerator implements Generator<String> {					 
						private String[] fruits = new String[]{"Apple", "Banana", "Pear"};					 
						@Override
						public String next() {
							Random rand = new Random();
							return fruits[rand.nextInt(3)];
						}
					}
			3）泛型的通配符
					问题的产生？
					我们知道Ingeter是Number的一个子类，Generic<Ingeter>与Generic<Number>实际上是相同的一种基本类型。
					那么问题来了，在使用Generic<Number>作为形参的方法中，能否使用Generic<Ingeter>的实例传入呢？
					在逻辑上类似于Generic<Number>和Generic<Ingeter>是否可以看成具有父子关系的泛型类型呢？
					举例：
					public void showKeyValue(Generic<Number> obj){
						Log.d("泛型测试","key value is " + obj.getKey());
					}
					Generic<Integer> gInteger = new Generic<Integer>(123);
					Generic<Number> gNumber = new Generic<Number>(456);					
					// showKeyValue这个方法编译器会为我们报错：Generic<java.lang.Integer> cannot be applied to Generic<java.lang.Number>
					showKeyValue(gInteger);
					结论：不行，同一种泛型可以对应多个版本（因为参数类型是不确定的），不同版本的泛型类实例是不兼容的。由此类型通配符应运而生。
					改进：
					public void showKeyValue1(Generic<?> obj){
						Log.d("泛型测试","key value is " + obj.getKey());
					}
					注：此处？是类型实参，而不是类型形参，是一种真实的类型。
			4）泛型方法
					泛型类，是在实例化类的时候指明泛型的具体类型；泛型方法，是在调用方法的时候指明泛型的具体类型。
				基本格式：
					/**
					 * @param tClass 传入的泛型实参
					 * @return T 返回值为T类型
					 * 说明：
					 *     1）public 与 返回值中间<T>非常重要，可以理解为声明此方法为泛型方法。
					 *     2）只有声明了<T>的方法才是泛型方法，泛型类中的使用了泛型的成员方法并不是泛型方法。
					 *     3）<T>表明该方法将使用泛型类型T，此时才可以在方法中使用泛型类型T。
					 *     4）与泛型类的定义一样，此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型。
					 */
					public <T> T genericMethod(Class<T> tClass)throws InstantiationException,
					  IllegalAccessException{
							T instance = tClass.newInstance();
							return instance;
					}		
					使用：Object obj = genericMethod(Class.forName("com.test.test"));
				基本用法[示例]：
					public class GenericTest {
					   //这个类是个泛型类，在上面已经介绍过
					   public class Generic<T>{     
							private T key;					 
							public Generic(T key) {
								this.key = key;
							}					 
							//我想说的其实是这个，虽然在方法中使用了泛型，但是这并不是一个泛型方法。
							//这只是类中一个普通的成员方法，只不过他的返回值是在声明泛型类已经声明过的泛型。
							//所以在这个方法中才可以继续使用 T 这个泛型。
							public T getKey(){
								return key;
							}					 
							/**
							 * 这个方法显然是有问题的，在编译器会给我们提示这样的错误信息"cannot reslove symbol E"
							 * 因为在类的声明中并未声明泛型E，所以在使用E做形参和返回值类型时，编译器会无法识别。
							public E setKey(E key){
								 this.key = key
							}
							*/
						}					 
						/** 
						 * 这才是一个真正的泛型方法。
						 * 首先在public与返回值之间的<T>必不可少，这表明这是一个泛型方法，并且声明了一个泛型T
						 * 这个T可以出现在这个泛型方法的任意位置.
						 * 泛型的数量也可以为任意多个 
						 *    如：public <T,K> K showKeyName(Generic<T> container){
						 *        ...
						 *        }
						 */
						public <T> T showKeyName(Generic<T> container){
							System.out.println("container key :" + container.getKey());
							//当然这个例子举的不太合适，只是为了说明泛型方法的特性。
							T test = container.getKey();
							return test;
						}					 
						//这也不是一个泛型方法，这就是一个普通的方法，只是使用了Generic<Number>这个泛型类做形参而已。
						public void showKeyValue1(Generic<Number> obj){
							Log.d("泛型测试","key value is " + obj.getKey());
						}				 
						//这也不是一个泛型方法，这也是一个普通的方法，只不过使用了泛型通配符?
						//?是一种类型实参
						public void showKeyValue2(Generic<?> obj){
							Log.d("泛型测试","key value is " + obj.getKey());
						}					 
						 /**
						 * 这个方法是有问题的，编译器会为我们提示错误信息："UnKnown class 'E' "
						 * 虽然我们声明了<T>,也表明了这是一个可以处理泛型的类型的泛型方法。
						 * 但是只声明了泛型类型T，并未声明泛型类型E，因此编译器并不知道该如何处理E这个类型。
						public <T> T showKeyName(Generic<E> container){
							...
						}  
						*/					 
						/**
						 * 这个方法也是有问题的，编译器会为我们提示错误信息："UnKnown class 'T' "
						 * 对于编译器来说T这个类型并未项目中声明过，因此编译也不知道该如何编译这个类。
						 * 所以这也不是一个正确的泛型方法声明。
						public void showkey(T genericObj){
						}
						*/					 
					}
				结论：泛型方法可以出现在任何地方和任何场景中使用[示例]。
					public class GenericDemo {
						class Fruit{
							@Override
							public String toString() {
								return "fruit";
							}
						}					 
						class Apple extends Fruit{
							@Override
							public String toString() {
								return "apple";
							}
						}				 
						class Person{
							@Override
							public String toString() {
								return "Person";
							}
						}					 
						class GenerateTest<T>{
							public void show_1(T t){
								System.out.println(t.toString());
							}				 
							//在泛型类中声明了一个泛型方法，使用泛型E，这种泛型E可以为任意类型。可以类型与T相同，也可以不同。
							//由于泛型方法在声明的时候会声明泛型<E>，因此即使在泛型类中并未声明泛型，编译器也能够正确识别泛型方法中识别的泛型。
							public <E> void show_2(E t){
								System.out.println(t.toString());
							}					 
							//在泛型类中声明了一个泛型方法，使用泛型T，注意这个T是一种全新的类型，可以与泛型类中声明的T不是同一种类型。
							public <T> void show_3(T t){
								System.out.println(t.toString());
							}
						}					 
						public static void main(String[] args) {
							Apple apple = new Apple();
							Person person = new Person();					 
							GenerateTest<Fruit> generateTest = new GenerateTest<Fruit>();
							//apple是Fruit的子类，所以这里可以
							generateTest.show_1(apple);
							//编译器会报错，因为泛型类型实参指定的是Fruit，而传入的实参类是Person
							//generateTest.show_1(person);					 
							//使用这两个方法都可以成功
							generateTest.show_2(apple);
							generateTest.show_2(person);					 
							//使用这两个方法也都可以成功
							generateTest.show_3(apple);
							generateTest.show_3(person);
						}
					}				
				泛型方法与可变参数[示例]
					public <T> void printMsg(T... args){//T可以同时传入不同类型
						for(T t : args){
							Log.d("泛型测试","t is " + t);
						}
					}
					调用：printMsg("111",222,"aaaa","2323.4",55.55);				
				静态方法与泛型[示例]
					结论：如果静态方法要使用泛型的话，必须将静态方法也定义成泛型方法
					public class StaticGenerator<T> {
						/**
						 * 如果在类中定义使用泛型的静态方法，需要添加额外的泛型声明（将这个方法定义成泛型方法）
						 * 即使静态方法要使用泛型类中已经声明过的泛型也不可以。
						 * 如：public static void show(T t){..},此时编译器会提示错误信息："StaticGenerator cannot be refrenced from static context"						  
						 */
						public static <T> void show(T t){
					 
						}
					}				
				泛型上下边界[示例]
					在使用泛型的时候，我们还可以为传入的泛型类型实参进行上下边界的限制，如：类型实参只准传入某种类型的父类或某种类型的子类。
					泛型上边界：即传入的类型实参必须是指定类型的子类型，如：					
						普通方法：
						public void showKeyValue1(Generic<? extends Number> obj){
							Log.d("泛型测试","key value is " + obj.getKey());
						}
						使用：
						Generic<String> generic1 = new Generic<String>("11111");
						Generic<Integer> generic2 = new Generic<Integer>(2222);
						Generic<Float> generic3 = new Generic<Float>(2.4f);
						Generic<Double> generic4 = new Generic<Double>(2.56);

						//showKeyValue1(generic1);//这一行代码编译器会提示错误，因为String类型并不是Number类型的子类						 
						showKeyValue1(generic2);
						showKeyValue1(generic3);
						showKeyValue1(generic4);
						类：
						public class Generic<T extends Number>{
							private T key;
						 
							public Generic(T key) {
								this.key = key;
							}
						 
							public T getKey(){
								return key;
							}
						}
						使用：
						Generic<String> generic1 = new Generic<String>("11111");//这一行代码也会报错，因为String不是Number的子类
						泛型方法：					
						//在泛型方法中添加上下边界限制的时候，必须在权限声明与返回值之间的<T>上添加上下边界，即在泛型声明的时候添加
						//public <T> T showKeyName(Generic<T extends Number> container)，编译器会报错："Unexpected bound"
						public <T extends Number> T showKeyName(Generic<T> container){
							T test = container.getKey();
							return test;
						}				
					
				结论：泛型的上下边界添加，必须与泛型的声明在一起。