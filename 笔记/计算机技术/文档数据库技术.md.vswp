vnote_backup_file_826537664 D:/工作/学习资料/study-notes/笔记/计算机技术/文档数据库技术.md
# 文档数据库技术
一、npm（Node Package Manager 包管理器）工具的使用
		含义：通过npm可以对node中的包进行上传、下载、搜索等操作，npm会在安装完node以后，自动安装。
		常用指令：
				npm -v 查看npm的版本
				npm version 查看所有模块的版本
				npm init 初始化项目-创建package.json
				npm i/install 包名 安装指定的包
				npm i/install 包名 --save 安装指定的包并添加依赖
				npm i/install 包名 -g 全局安装（一般都是一些工具）
				npm i/install 安装当前项目所依赖的包
				npm s/search 包名 搜索包	
				npm r/remove 包名 删除一个包
二、MongoDB	
	定义：为快速开发WEB应用而设计的数据库，面向文档，类似JSON数据(BSON),注意：MongoDB数据库使用的是JavaScript进行操作的，在MongoDB含有一个对ES标准实现的引擎，
		在MongoDB中所有ES中的语法中都可以使用。
	启动：
		打开cmd命令行窗口，输入 mongod 启动mongodb服务器；32位注意：启动服务器时，需要输入如下内容：mongod --storageEngine=mmapv1；mongod --dbpath 数据库路径 --port 端口；
		再打开一个cmd窗口，输入 mongo 连接mongodb ，出现 >				  			  
	基本概念：
		数据库（database）- 类比SQL数据库、集合（collection）- 类比SQL表、文档（document）- 类比SQL表记录，
		在MongoDB中，数据库和集合都不需要手动创建，当我们创建文档时，如果文档所在的集合或数据库不存在会自动创建数据库和集合。				
	基本指令：
		show dbs/databases #显示当前的所有数据库				
		use 数据库名 #进入到指定的数据库中		
		db #表示的是当前所处的数据库				
		show collections 显示数据库中所有的集合
	数据库的CRUD（增删改查）的操作：
			#向数据库中插入文档
			 db.collection.insert() #可以向集合中插入一个或多个文档
			 db.collection.insertOne() #向集合中插入一个文档
			 db.collection.insertMany() #向集合中插入多个文档
			 如：db.stus.insert([
					{name:"沙和尚",age:38,gender:"男"},
					{name:"白骨精",age:16,gender:"女"},
					{name:"蜘蛛精",age:14,gender:"女"}
				]);
			 db.stus.find({}); //查询所有文档					
			#查询数据库中的文档
			 db.collection.find() #可以根据指定条件从集合中查询所有符合条件的文档，返回的是一个数组
			 db.collection.findOne() #查询第一个符合条件的文档，返回的是一个对象
			 db.collection.find().count() #查询符合条件的文档的数量
			 查询条件：$gt $eq $lt $lte limit() $or				
			 如：db.emp.find({sal:{$lt:2000 , $gt:1000}}).limit(5);
				 db.emp.find({$or:[{sal:{$lt:1000}} , {sal:{$gt:2500}}]});
			 分页：
			 skip()用于跳过指定数量的数据，MongoDB会自动调整skip和limit的位置
			 如：db.numbers.find().skip(10).limit(10); -第11条到20条数据	
			 如：db.stus.find({age:16 , name:"白骨精"});					
			#修改数据库中的文档
			 db.collection.update() #可以修改、替换集合中的一个或多个文档（默认修改一个）					
				注意：update()默认情况下会使用新对象来替换旧的对象，如果需要修改指定的属性，而不是替换需要使用“修改操作符”来完成修改；							
							$set 可以用来修改文档中的指定属性，$unset可以用来删除文档的指定属性；
							内嵌文档中：
							$push 用于向数组中添加一个新的元素
							$addToSet 向数组中添加一个新元素 ，如果数组中已经存在了该元素，则不会添加
							$inc 增加到多少，如:db.emp.updateMany({sal:{$lte:1000}} , {$inc:{sal:400}});						
			 db.collection.updateOne()	#修改集合中的一个文档					
			 db.collection.updateMany() #修改集合中的多个文档
			 db.collection.replaceOne() #替换集合中的一个文档
			 如：db.stus.update(
				{"_id" : ObjectId("59c219689410bc1dbecc0709")},
				{$set:{
					gender:"男",
					address:"流沙河"
				}}    
			 )
			 又如：db.stus.update(
					{"name" : "猪八戒"},					
					{
						$set:{
						address:"呵呵呵"
						}
					}  ,
					{
						multi:true
					}    
			 )	
    文档关系：一对一（one to one），内嵌文档的形式；
			 如：db.wifeAndHusband.insert([
					{
						name:"黄蓉",
						husband:{
							name:"郭靖"
						}
					},{
						name:"潘金莲",
						husband:{
							name:"武大郎"
						}
					}
				]);
			 一对多（one to many）/多对一(many to one)，也可以用内嵌文档的形式；
			 多对多(many to many) 用两个集合表示；
	排序与投影：
			查询文档时，默认情况是按照_id的值进行排列（升序）
			sort()可以用来指定文档的排序的规则,sort()需要传递一个对象来指定排序规则 1表示升序 -1表示降序,limit skip sort 可以以任意的顺序进行调用；
			如：db.emp.find({}).sort({sal:1,empno:-1});
			在查询时，可以在第二个参数的位置来设置查询结果的投影，0不显示；1：显示
			如：db.emp.find({},{ename:1 , _id:0 , sal:1});
	分组查询：
		分组分片查询，aggregate的使用
		//源数据
		db.items.insert( [
		  {
		   "quantity" : 2,
		   "price" : 5.0,
		   "pnumber" : "p003",
		  }...,{
		   "quantity" : 5,
		   "price" : 10.0,
		   "pnumber" : "p002"
		  }
		])    
		//$group语法:{ $group: { _id: <expression>, <field1>: { <accumulator1> : <expression1> }, ... } }
		/*
		 *_id 分组的key,expression分组的字段，如果_id为null 相当于SQL:select count(*) from table
		 *field1 分组后展示的字段
		 *accumulator1 分组管道函数，如：$sum\$avg\$min\$max\$push\$addToSet\$first\$last
		 *expression1  分组显示数据相关
		 */	
		//查询总数,相当于SQL:select count(1) as count from items
		db.items.count();
		db.items.aggregate([{$group:{_id:null,count:{$sum:1}}}])
		//统计数量，相当于SQL:select sum(quantity) as total  from  items
		db.items.aggregate([{$group:{_id:null,total:{$sum:"$quantity"}}}]);
		//按产品类型来进行分组，然后在统计卖出的数量是多少，相当于SQL：select sum(quantity) as total from  items  group by pnumber
		db.items.aggregate([{$group:{_id:"$pnumber",total:{$sum:"$quantity"}}}])
		//通过相同的产品类型来进行分组，然后查询相同产品类型卖出最多的订单详情，相当于SQL:select max(quantity) as quantity from  items  group by pnumber
		db.items.aggregate([{$group:{_id:"$pnumber",max:{$max:"$quantity"}}}])
		db.items.aggregate([{$group:{_id:"$pnumber",min:{$min:"$quantity"}}}])
		//通过相同的产品类型来进行分组，统计各个产品数量，然后获取最大的数量，相当于SQL:select max(t.total) from (select sum(quantity) as total from  items  group by pnumber) t
		db.items.aggregate([{$group:{_id:"$pnumber",total:{$sum:"$quantity"}}}])
		db.items.aggregate([{$group:{_id:"$pnumber",total:{$sum:"$quantity"}}},{$group:{_id:null,max:{$max:"$total"}}}])
		//通过相同的产品类型来进行分组，然后查询每个订单详情相同产品类型卖出的平均价格，相当于SQL:select avg(price) as price from  items  group by pnumber
		db.items.aggregate([{$group:{_id:"$pnumber",price:{$avg:"$price"}}}])
		//通过相同的产品类型来进行分组，然后查询每个相同产品卖出的数量放在数组里面,，注意值数组中的值不要超过16M
		db.items.aggregate([{$group:{_id:"$pnumber",quantitys:{$push:"$quantity"}}}])
		db.items.aggregate([{$group:{_id:"$pnumber",quantitys:{$push:{quantity:"$quantity",price:"$price"}}}}])
		//表达式的值添加到一个数组中（无重复值），这个值不要超过16M
		db.items.aggregate([{$group:{_id:"$pnumber",quantitys:{$addToSet:"$quantity"}}}])
		//$first：返回每组第一个文档，如果有排序，按照排序，如果没有按照默认的存储的顺序的第一个文档。
		//$last：返回每组最后一个文档，如果有排序，按照排序，如果没有按照默认的存储的顺序的最后个文档。
		db.items.aggregate([{$group:{_id:"$pnumber",quantityFrist:{$first:"$quantity"}}}])
		//$project显示或不显示字段，相当于SQL:select
		db.items.aggregate([{$group:{_id:null,count:{$sum:1}}},{$project:{"_id":0,"count":1}}])
		//通过滤订单中，想知道卖出的数量大于8的产品有哪些产品，相当于SQL:select sum(quantity) as total from  items  group by pnumber having total>8   
		db.items.aggregate([{$group:{_id:"$pnumber",total:{$sum:"$quantity"}}},{$match:{total:{$gt:8}}}])
		//$match如果是放在$group之前就是当做where来使用，我们只统计pnumber =p001 产品卖出了多少个  select sum(quantity) as total from  items where pnumber='p001'
		db.items.aggregate([{$match:{"pnumber":"p001"}},{$group:{_id:null,total:{$sum:"$quantity"}}}])
		//$skip、$limit使用顺序不同，结果也不同，注意：$limit、$skip、$sort、$match可以使用在阶段管道，如果使用在$group之前可以过滤掉一些数据，提高性能
		db.items.aggregate([{ $skip: 2 },{ $limit: 4 },{ $sort: { quantity : -1 }}])
		db.items.aggregate([{ $limit: 4 },{ $skip: 2 }])
		//将文档中的某一个数组类型字段拆分成多条，每条包含数组中的一个值
		db.items.aggregate([{$group:{_id:"$pnumber",quantitys:{$push:"$quantity"}}}])
		db.items.aggregate([{$group:{_id:"$pnumber",quantitys:{$push:"$quantity"}}},{$unwind:"$quantitys"}])
		//$out必须为pipeline最后一个阶段管道，因为是将最后计算结果写入到指定的collection中
		db.items.aggregate([{$group:{_id:"$pnumber",quantitys:{$push:"$quantity"}}},{$unwind:"$quantitys"},{$project:{"_id":0,"quantitys":1}},{$out:"result"}])
		db.result.find()
	模糊查询：$options - 可选参数				  
		如：db.students.find({"user_name": {$regex: /尚/, $options:'i'}}); 
		   db.students.find({"user_name": {$regex:/尚.*/i}}); 
		   db.students.find({user_name:{$in:[/^孙尚香/i,/^胡歌/]}});
		   db.students.find({user_name:{$regex:/^孙尚香/i,$nin:['孙尚香II']}});
		   db.students.find({user_name:{$regex:/香/,$options:"si"}});	
		  